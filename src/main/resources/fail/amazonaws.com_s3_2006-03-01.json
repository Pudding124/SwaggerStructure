{
  "swagger": "2.0",
  "schemes": [
    "https",
    "http"
  ],
  "host": "s3.amazonaws.com",
  "basePath": "/",
  "x-hasEquivalentPaths": true,
  "info": {
    "contact": {
      "email": "mike.ralphson@gmail.com",
      "name": "Mike Ralphson",
      "url": "https://github.com/mermade/aws2openapi",
      "x-twitter": "PermittedSoc"
    },
    "license": {
      "name": "Apache 2.0 License",
      "url": "http://www.apache.org/licenses/"
    },
    "termsOfService": "https://aws.amazon.com/service-terms/",
    "title": "Amazon Simple Storage Service",
    "version": "2006-03-01",
    "x-apiClientRegistration": {
      "url": "https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct"
    },
    "x-apisguru-categories": [
      "cloud"
    ],
    "x-logo": {
      "backgroundColor": "#FFFFFF",
      "url": "https://api.apis.guru/v2/cache/logo/https_twitter.com_awscloud_profile_image.jpeg"
    },
    "x-origin": [
      {
        "contentType": "application/json",
        "converter": {
          "url": "https://github.com/mermade/aws2openapi",
          "version": "1.0.0"
        },
        "url": "https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/s3-2006-03-01.normal.json",
        "x-apisguru-direct": true
      }
    ],
    "x-preferred": true,
    "x-providerName": "amazonaws.com",
    "x-release": "s3",
    "x-serviceName": "s3"
  },
  "externalDocs": {
    "description": "Amazon Web Services documentation",
    "url": "https://aws.amazon.com/s3/"
  },
  "consumes": [
    "text/xml"
  ],
  "produces": [
    "text/xml"
  ],
  "securityDefinitions": {
    "hmac": {
      "description": "Amazon S3 signature",
      "in": "header",
      "name": "Authorization",
      "type": "apiKey",
      "x-amazon-apigateway-authtype": "awsS3"
    }
  },
  "security": [
    {
      "hmac": []
    }
  ],
  "parameters": {
    "x-amz-security-token": {
      "in": "header",
      "name": "x-amz-security-token",
      "required": false,
      "type": "string"
    }
  },
  "paths": {
    "/#ListBuckets": {
      "get": {
        "description": "Returns a list of all buckets owned by the authenticated sender of the request.<p>http://docs.amazonwebservices.com/AmazonS3/latest/API/RESTServiceGET.html</p>",
        "operationId": "ListBuckets",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListBucketsOutput"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/x-amz-security-token"
        }
      ]
    },
    "/{Bucket}": {
      "parameters": [
        {
          "$ref": "#/parameters/x-amz-security-token"
        }
      ],
      "put": {
        "description": "Creates a new bucket.<p>http://docs.amazonwebservices.com/AmazonS3/latest/API/RESTBucketPUT.html</p>",
        "operationId": "CreateBucket",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateBucketRequest"
            }
          },
          {
            "in": "path",
            "name": "Bucket",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateBucketOutput"
            }
          },
          "480": {
            "description": "BucketAlreadyExists",
            "schema": {
              "$ref": "#/definitions/BucketAlreadyExists"
            }
          },
          "481": {
            "description": "BucketAlreadyOwnedByYou",
            "schema": {
              "$ref": "#/definitions/BucketAlreadyOwnedByYou"
            }
          }
        }
      }
    },
    "/{Bucket}#DeleteBucket": {
      "delete": {
        "description": "Deletes the bucket. All objects (including all object versions and Delete Markers) in the bucket must be deleted before the bucket itself can be deleted.<p>http://docs.amazonwebservices.com/AmazonS3/latest/API/RESTBucketDELETE.html</p>",
        "operationId": "DeleteBucket",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteBucketRequest"
            }
          },
          {
            "in": "path",
            "name": "Bucket",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/x-amz-security-token"
        }
      ]
    },
    "/{Bucket}#DeleteBucketAnalyticsConfiguration": {
      "delete": {
        "description": "Deletes an analytics configuration for the bucket (specified by the analytics configuration ID).",
        "operationId": "DeleteBucketAnalyticsConfiguration",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteBucketAnalyticsConfigurationRequest"
            }
          },
          {
            "allowEmptyValue": true,
            "in": "query",
            "name": "analytics",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Bucket",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/x-amz-security-token"
        }
      ]
    },
    "/{Bucket}#DeleteBucketCors": {
      "delete": {
        "description": "Deletes the CORS configuration information set for the bucket.<p>http://docs.amazonwebservices.com/AmazonS3/latest/API/RESTBucketDELETEcors.html</p>",
        "operationId": "DeleteBucketCors",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteBucketCorsRequest"
            }
          },
          {
            "allowEmptyValue": true,
            "in": "query",
            "name": "cors",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Bucket",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/x-amz-security-token"
        }
      ]
    },
    "/{Bucket}#DeleteBucketEncryption": {
      "delete": {
        "description": "Deletes the server-side encryption configuration from the bucket.",
        "operationId": "DeleteBucketEncryption",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteBucketEncryptionRequest"
            }
          },
          {
            "allowEmptyValue": true,
            "in": "query",
            "name": "encryption",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Bucket",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/x-amz-security-token"
        }
      ]
    },
    "/{Bucket}#DeleteBucketInventoryConfiguration": {
      "delete": {
        "description": "Deletes an inventory configuration (identified by the inventory ID) from the bucket.",
        "operationId": "DeleteBucketInventoryConfiguration",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteBucketInventoryConfigurationRequest"
            }
          },
          {
            "allowEmptyValue": true,
            "in": "query",
            "name": "inventory",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Bucket",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/x-amz-security-token"
        }
      ]
    },
    "/{Bucket}#DeleteBucketLifecycle": {
      "delete": {
        "description": "Deletes the lifecycle configuration from the bucket.<p>http://docs.amazonwebservices.com/AmazonS3/latest/API/RESTBucketDELETElifecycle.html</p>",
        "operationId": "DeleteBucketLifecycle",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteBucketLifecycleRequest"
            }
          },
          {
            "allowEmptyValue": true,
            "in": "query",
            "name": "lifecycle",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Bucket",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/x-amz-security-token"
        }
      ]
    },
    "/{Bucket}#DeleteBucketMetricsConfiguration": {
      "delete": {
        "description": "Deletes a metrics configuration (specified by the metrics configuration ID) from the bucket.",
        "operationId": "DeleteBucketMetricsConfiguration",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteBucketMetricsConfigurationRequest"
            }
          },
          {
            "allowEmptyValue": true,
            "in": "query",
            "name": "metrics",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Bucket",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/x-amz-security-token"
        }
      ]
    },
    "/{Bucket}#DeleteBucketPolicy": {
      "delete": {
        "description": "Deletes the policy from the bucket.<p>http://docs.amazonwebservices.com/AmazonS3/latest/API/RESTBucketDELETEpolicy.html</p>",
        "operationId": "DeleteBucketPolicy",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteBucketPolicyRequest"
            }
          },
          {
            "allowEmptyValue": true,
            "in": "query",
            "name": "policy",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Bucket",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/x-amz-security-token"
        }
      ]
    },
    "/{Bucket}#DeleteBucketReplication": {
      "delete": {
        "description": " Deletes the replication configuration from the bucket. For information about replication configuration, see <a href=\" https://docs.aws.amazon.com/AmazonS3/latest/dev/crr.html\">Cross-Region Replication (CRR)</a> in the <i>Amazon S3 Developer Guide</i>. ",
        "operationId": "DeleteBucketReplication",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteBucketReplicationRequest"
            }
          },
          {
            "allowEmptyValue": true,
            "in": "query",
            "name": "replication",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Bucket",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/x-amz-security-token"
        }
      ]
    },
    "/{Bucket}#DeleteBucketTagging": {
      "delete": {
        "description": "Deletes the tags from the bucket.<p>http://docs.amazonwebservices.com/AmazonS3/latest/API/RESTBucketDELETEtagging.html</p>",
        "operationId": "DeleteBucketTagging",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteBucketTaggingRequest"
            }
          },
          {
            "allowEmptyValue": true,
            "in": "query",
            "name": "tagging",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Bucket",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/x-amz-security-token"
        }
      ]
    },
    "/{Bucket}#DeleteBucketWebsite": {
      "delete": {
        "description": "This operation removes the website configuration from the bucket.<p>http://docs.amazonwebservices.com/AmazonS3/latest/API/RESTBucketDELETEwebsite.html</p>",
        "operationId": "DeleteBucketWebsite",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteBucketWebsiteRequest"
            }
          },
          {
            "allowEmptyValue": true,
            "in": "query",
            "name": "website",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Bucket",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/x-amz-security-token"
        }
      ]
    },
    "/{Bucket}#DeleteObjects": {
      "parameters": [
        {
          "$ref": "#/parameters/x-amz-security-token"
        }
      ],
      "post": {
        "description": "This operation enables you to delete multiple objects from a bucket using a single HTTP request. You may specify up to 1000 keys.<p>http://docs.amazonwebservices.com/AmazonS3/latest/API/multiobjectdeleteapi.html</p>",
        "operationId": "DeleteObjects",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteObjectsRequest"
            }
          },
          {
            "allowEmptyValue": true,
            "in": "query",
            "name": "delete",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Bucket",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteObjectsOutput"
            }
          }
        }
      }
    },
    "/{Bucket}#DeletePublicAccessBlock": {
      "delete": {
        "description": "Removes the <code>PublicAccessBlock</code> configuration from an Amazon S3 bucket.",
        "operationId": "DeletePublicAccessBlock",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeletePublicAccessBlockRequest"
            }
          },
          {
            "allowEmptyValue": true,
            "in": "query",
            "name": "publicAccessBlock",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Bucket",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/x-amz-security-token"
        }
      ]
    },
    "/{Bucket}#GetBucketAccelerateConfiguration": {
      "get": {
        "description": "Returns the accelerate configuration of a bucket.",
        "operationId": "GetBucketAccelerateConfiguration",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetBucketAccelerateConfigurationRequest"
            }
          },
          {
            "allowEmptyValue": true,
            "in": "query",
            "name": "accelerate",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Bucket",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetBucketAccelerateConfigurationOutput"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/x-amz-security-token"
        }
      ]
    },
    "/{Bucket}#GetBucketAcl": {
      "get": {
        "description": "Gets the access control policy for the bucket.<p>http://docs.amazonwebservices.com/AmazonS3/latest/API/RESTBucketGETacl.html</p>",
        "operationId": "GetBucketAcl",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetBucketAclRequest"
            }
          },
          {
            "allowEmptyValue": true,
            "in": "query",
            "name": "acl",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Bucket",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetBucketAclOutput"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/x-amz-security-token"
        }
      ]
    },
    "/{Bucket}#GetBucketAnalyticsConfiguration": {
      "get": {
        "description": "Gets an analytics configuration for the bucket (specified by the analytics configuration ID).",
        "operationId": "GetBucketAnalyticsConfiguration",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetBucketAnalyticsConfigurationRequest"
            }
          },
          {
            "allowEmptyValue": true,
            "in": "query",
            "name": "analytics",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Bucket",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetBucketAnalyticsConfigurationOutput"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/x-amz-security-token"
        }
      ]
    },
    "/{Bucket}#GetBucketCors": {
      "get": {
        "description": "Returns the CORS configuration for the bucket.<p>http://docs.amazonwebservices.com/AmazonS3/latest/API/RESTBucketGETcors.html</p>",
        "operationId": "GetBucketCors",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetBucketCorsRequest"
            }
          },
          {
            "allowEmptyValue": true,
            "in": "query",
            "name": "cors",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Bucket",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetBucketCorsOutput"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/x-amz-security-token"
        }
      ]
    },
    "/{Bucket}#GetBucketEncryption": {
      "get": {
        "description": "Returns the server-side encryption configuration of a bucket.",
        "operationId": "GetBucketEncryption",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetBucketEncryptionRequest"
            }
          },
          {
            "allowEmptyValue": true,
            "in": "query",
            "name": "encryption",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Bucket",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetBucketEncryptionOutput"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/x-amz-security-token"
        }
      ]
    },
    "/{Bucket}#GetBucketInventoryConfiguration": {
      "get": {
        "description": "Returns an inventory configuration (identified by the inventory ID) from the bucket.",
        "operationId": "GetBucketInventoryConfiguration",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetBucketInventoryConfigurationRequest"
            }
          },
          {
            "allowEmptyValue": true,
            "in": "query",
            "name": "inventory",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Bucket",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetBucketInventoryConfigurationOutput"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/x-amz-security-token"
        }
      ]
    },
    "/{Bucket}#GetBucketLifecycle": {
      "get": {
        "description": "Deprecated, see the GetBucketLifecycleConfiguration operation.<p>http://docs.amazonwebservices.com/AmazonS3/latest/API/RESTBucketGETlifecycle.html</p>",
        "operationId": "GetBucketLifecycle",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetBucketLifecycleRequest"
            }
          },
          {
            "allowEmptyValue": true,
            "in": "query",
            "name": "lifecycle",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Bucket",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetBucketLifecycleOutput"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/x-amz-security-token"
        }
      ]
    },
    "/{Bucket}#GetBucketLifecycleConfiguration": {
      "get": {
        "description": "Returns the lifecycle configuration information set on the bucket.",
        "operationId": "GetBucketLifecycleConfiguration",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetBucketLifecycleConfigurationRequest"
            }
          },
          {
            "allowEmptyValue": true,
            "in": "query",
            "name": "lifecycle",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Bucket",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetBucketLifecycleConfigurationOutput"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/x-amz-security-token"
        }
      ]
    },
    "/{Bucket}#GetBucketLocation": {
      "get": {
        "description": "Returns the region the bucket resides in.<p>http://docs.amazonwebservices.com/AmazonS3/latest/API/RESTBucketGETlocation.html</p>",
        "operationId": "GetBucketLocation",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetBucketLocationRequest"
            }
          },
          {
            "allowEmptyValue": true,
            "in": "query",
            "name": "location",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Bucket",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetBucketLocationOutput"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/x-amz-security-token"
        }
      ]
    },
    "/{Bucket}#GetBucketLogging": {
      "get": {
        "description": "Returns the logging status of a bucket and the permissions users have to view and modify that status. To use GET, you must be the bucket owner.<p>http://docs.amazonwebservices.com/AmazonS3/latest/API/RESTBucketGETlogging.html</p>",
        "operationId": "GetBucketLogging",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetBucketLoggingRequest"
            }
          },
          {
            "allowEmptyValue": true,
            "in": "query",
            "name": "logging",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Bucket",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetBucketLoggingOutput"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/x-amz-security-token"
        }
      ]
    },
    "/{Bucket}#GetBucketMetricsConfiguration": {
      "get": {
        "description": "Gets a metrics configuration (specified by the metrics configuration ID) from the bucket.",
        "operationId": "GetBucketMetricsConfiguration",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetBucketMetricsConfigurationRequest"
            }
          },
          {
            "allowEmptyValue": true,
            "in": "query",
            "name": "metrics",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Bucket",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetBucketMetricsConfigurationOutput"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/x-amz-security-token"
        }
      ]
    },
    "/{Bucket}#GetBucketNotification": {
      "get": {
        "description": "Deprecated, see the GetBucketNotificationConfiguration operation.<p>http://docs.amazonwebservices.com/AmazonS3/latest/API/RESTBucketGETnotification.html</p>",
        "operationId": "GetBucketNotification",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetBucketNotificationConfigurationRequest"
            }
          },
          {
            "allowEmptyValue": true,
            "in": "query",
            "name": "notification",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Bucket",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/NotificationConfigurationDeprecated"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/x-amz-security-token"
        }
      ]
    },
    "/{Bucket}#GetBucketNotificationConfiguration": {
      "get": {
        "description": "Returns the notification configuration of a bucket.",
        "operationId": "GetBucketNotificationConfiguration",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetBucketNotificationConfigurationRequest"
            }
          },
          {
            "allowEmptyValue": true,
            "in": "query",
            "name": "notification",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Bucket",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/NotificationConfiguration"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/x-amz-security-token"
        }
      ]
    },
    "/{Bucket}#GetBucketPolicy": {
      "get": {
        "description": "Returns the policy of a specified bucket.<p>http://docs.amazonwebservices.com/AmazonS3/latest/API/RESTBucketGETpolicy.html</p>",
        "operationId": "GetBucketPolicy",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetBucketPolicyRequest"
            }
          },
          {
            "allowEmptyValue": true,
            "in": "query",
            "name": "policy",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Bucket",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetBucketPolicyOutput"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/x-amz-security-token"
        }
      ]
    },
    "/{Bucket}#GetBucketPolicyStatus": {
      "get": {
        "description": "Retrieves the policy status for an Amazon S3 bucket, indicating whether the bucket is public.",
        "operationId": "GetBucketPolicyStatus",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetBucketPolicyStatusRequest"
            }
          },
          {
            "allowEmptyValue": true,
            "in": "query",
            "name": "policyStatus",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Bucket",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetBucketPolicyStatusOutput"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/x-amz-security-token"
        }
      ]
    },
    "/{Bucket}#GetBucketReplication": {
      "get": {
        "description": "<p>Returns the replication configuration of a bucket.</p> <note> <p> It can take a while to propagate the put or delete a replication configuration to all Amazon S3 systems. Therefore, a get request soon after put or delete can return a wrong result. </p> </note>",
        "operationId": "GetBucketReplication",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetBucketReplicationRequest"
            }
          },
          {
            "allowEmptyValue": true,
            "in": "query",
            "name": "replication",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Bucket",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetBucketReplicationOutput"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/x-amz-security-token"
        }
      ]
    },
    "/{Bucket}#GetBucketRequestPayment": {
      "get": {
        "description": "Returns the request payment configuration of a bucket.<p>http://docs.amazonwebservices.com/AmazonS3/latest/API/RESTrequestPaymentGET.html</p>",
        "operationId": "GetBucketRequestPayment",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetBucketRequestPaymentRequest"
            }
          },
          {
            "allowEmptyValue": true,
            "in": "query",
            "name": "requestPayment",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Bucket",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetBucketRequestPaymentOutput"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/x-amz-security-token"
        }
      ]
    },
    "/{Bucket}#GetBucketTagging": {
      "get": {
        "description": "Returns the tag set associated with the bucket.<p>http://docs.amazonwebservices.com/AmazonS3/latest/API/RESTBucketGETtagging.html</p>",
        "operationId": "GetBucketTagging",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetBucketTaggingRequest"
            }
          },
          {
            "allowEmptyValue": true,
            "in": "query",
            "name": "tagging",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Bucket",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetBucketTaggingOutput"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/x-amz-security-token"
        }
      ]
    },
    "/{Bucket}#GetBucketVersioning": {
      "get": {
        "description": "Returns the versioning state of a bucket.<p>http://docs.amazonwebservices.com/AmazonS3/latest/API/RESTBucketGETversioningStatus.html</p>",
        "operationId": "GetBucketVersioning",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetBucketVersioningRequest"
            }
          },
          {
            "allowEmptyValue": true,
            "in": "query",
            "name": "versioning",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Bucket",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetBucketVersioningOutput"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/x-amz-security-token"
        }
      ]
    },
    "/{Bucket}#GetBucketWebsite": {
      "get": {
        "description": "Returns the website configuration for a bucket.<p>http://docs.amazonwebservices.com/AmazonS3/latest/API/RESTBucketGETwebsite.html</p>",
        "operationId": "GetBucketWebsite",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetBucketWebsiteRequest"
            }
          },
          {
            "allowEmptyValue": true,
            "in": "query",
            "name": "website",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Bucket",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetBucketWebsiteOutput"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/x-amz-security-token"
        }
      ]
    },
    "/{Bucket}#GetObjectLockConfiguration": {
      "get": {
        "description": "Gets the Object Lock configuration for a bucket. The rule specified in the Object Lock configuration will be applied by default to every new object placed in the specified bucket.",
        "operationId": "GetObjectLockConfiguration",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetObjectLockConfigurationRequest"
            }
          },
          {
            "allowEmptyValue": true,
            "in": "query",
            "name": "object-lock",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Bucket",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetObjectLockConfigurationOutput"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/x-amz-security-token"
        }
      ]
    },
    "/{Bucket}#GetPublicAccessBlock": {
      "get": {
        "description": "Retrieves the <code>PublicAccessBlock</code> configuration for an Amazon S3 bucket.",
        "operationId": "GetPublicAccessBlock",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetPublicAccessBlockRequest"
            }
          },
          {
            "allowEmptyValue": true,
            "in": "query",
            "name": "publicAccessBlock",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Bucket",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetPublicAccessBlockOutput"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/x-amz-security-token"
        }
      ]
    },
    "/{Bucket}#HeadBucket": {
      "head": {
        "description": "This operation is useful to determine if a bucket exists and you have permission to access it.<p>http://docs.amazonwebservices.com/AmazonS3/latest/API/RESTBucketHEAD.html</p>",
        "operationId": "HeadBucket",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/HeadBucketRequest"
            }
          },
          {
            "in": "path",
            "name": "Bucket",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "480": {
            "description": "NoSuchBucket",
            "schema": {
              "$ref": "#/definitions/NoSuchBucket"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/x-amz-security-token"
        }
      ]
    },
    "/{Bucket}#ListBucketAnalyticsConfigurations": {
      "get": {
        "description": "Lists the analytics configurations for the bucket.",
        "operationId": "ListBucketAnalyticsConfigurations",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListBucketAnalyticsConfigurationsRequest"
            }
          },
          {
            "allowEmptyValue": true,
            "in": "query",
            "name": "analytics",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Bucket",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListBucketAnalyticsConfigurationsOutput"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/x-amz-security-token"
        }
      ]
    },
    "/{Bucket}#ListBucketInventoryConfigurations": {
      "get": {
        "description": "Returns a list of inventory configurations for the bucket.",
        "operationId": "ListBucketInventoryConfigurations",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListBucketInventoryConfigurationsRequest"
            }
          },
          {
            "allowEmptyValue": true,
            "in": "query",
            "name": "inventory",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Bucket",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListBucketInventoryConfigurationsOutput"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/x-amz-security-token"
        }
      ]
    },
    "/{Bucket}#ListBucketMetricsConfigurations": {
      "get": {
        "description": "Lists the metrics configurations for the bucket.",
        "operationId": "ListBucketMetricsConfigurations",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListBucketMetricsConfigurationsRequest"
            }
          },
          {
            "allowEmptyValue": true,
            "in": "query",
            "name": "metrics",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Bucket",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListBucketMetricsConfigurationsOutput"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/x-amz-security-token"
        }
      ]
    },
    "/{Bucket}#ListMultipartUploads": {
      "get": {
        "description": "This operation lists in-progress multipart uploads.<p>http://docs.amazonwebservices.com/AmazonS3/latest/API/mpUploadListMPUpload.html</p>",
        "operationId": "ListMultipartUploads",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListMultipartUploadsRequest"
            }
          },
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxUploads",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "KeyMarker",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "UploadIdMarker",
            "required": false,
            "type": "string"
          },
          {
            "allowEmptyValue": true,
            "in": "query",
            "name": "uploads",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Bucket",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListMultipartUploadsOutput"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/x-amz-security-token"
        }
      ]
    },
    "/{Bucket}#ListObjectVersions": {
      "get": {
        "description": "Returns metadata about all of the versions of objects in a bucket.<p>http://docs.amazonwebservices.com/AmazonS3/latest/API/RESTBucketGETVersion.html</p>",
        "operationId": "ListObjectVersions",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListObjectVersionsRequest"
            }
          },
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxKeys",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "KeyMarker",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "VersionIdMarker",
            "required": false,
            "type": "string"
          },
          {
            "allowEmptyValue": true,
            "in": "query",
            "name": "versions",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Bucket",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListObjectVersionsOutput"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/x-amz-security-token"
        }
      ]
    },
    "/{Bucket}#ListObjects": {
      "get": {
        "description": "Returns some or all (up to 1000) of the objects in a bucket. You can use the request parameters as selection criteria to return a subset of the objects in a bucket.<p>http://docs.amazonwebservices.com/AmazonS3/latest/API/RESTBucketGET.html</p>",
        "operationId": "ListObjects",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListObjectsRequest"
            }
          },
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxKeys",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "Marker",
            "required": false,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Bucket",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListObjectsOutput"
            }
          },
          "480": {
            "description": "NoSuchBucket",
            "schema": {
              "$ref": "#/definitions/NoSuchBucket"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/x-amz-security-token"
        }
      ]
    },
    "/{Bucket}#ListObjectsV2": {
      "get": {
        "description": "Returns some or all (up to 1000) of the objects in a bucket. You can use the request parameters as selection criteria to return a subset of the objects in a bucket. Note: ListObjectsV2 is the revised List Objects API and we recommend you use this revised API for new application development.",
        "operationId": "ListObjectsV2",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListObjectsV2Request"
            }
          },
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxKeys",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "ContinuationToken",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "2"
            ],
            "in": "query",
            "name": "list-type",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Bucket",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListObjectsV2Output"
            }
          },
          "480": {
            "description": "NoSuchBucket",
            "schema": {
              "$ref": "#/definitions/NoSuchBucket"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/x-amz-security-token"
        }
      ]
    },
    "/{Bucket}#PutBucketAccelerateConfiguration": {
      "parameters": [
        {
          "$ref": "#/parameters/x-amz-security-token"
        }
      ],
      "put": {
        "description": "Sets the accelerate configuration of an existing bucket.",
        "operationId": "PutBucketAccelerateConfiguration",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PutBucketAccelerateConfigurationRequest"
            }
          },
          {
            "allowEmptyValue": true,
            "in": "query",
            "name": "accelerate",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Bucket",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/{Bucket}#PutBucketAcl": {
      "parameters": [
        {
          "$ref": "#/parameters/x-amz-security-token"
        }
      ],
      "put": {
        "description": "Sets the permissions on a bucket using access control lists (ACL).<p>http://docs.amazonwebservices.com/AmazonS3/latest/API/RESTBucketPUTacl.html</p>",
        "operationId": "PutBucketAcl",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PutBucketAclRequest"
            }
          },
          {
            "allowEmptyValue": true,
            "in": "query",
            "name": "acl",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Bucket",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/{Bucket}#PutBucketAnalyticsConfiguration": {
      "parameters": [
        {
          "$ref": "#/parameters/x-amz-security-token"
        }
      ],
      "put": {
        "description": "Sets an analytics configuration for the bucket (specified by the analytics configuration ID).",
        "operationId": "PutBucketAnalyticsConfiguration",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PutBucketAnalyticsConfigurationRequest"
            }
          },
          {
            "allowEmptyValue": true,
            "in": "query",
            "name": "analytics",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Bucket",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/{Bucket}#PutBucketCors": {
      "parameters": [
        {
          "$ref": "#/parameters/x-amz-security-token"
        }
      ],
      "put": {
        "description": "Sets the CORS configuration for a bucket.<p>http://docs.amazonwebservices.com/AmazonS3/latest/API/RESTBucketPUTcors.html</p>",
        "operationId": "PutBucketCors",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PutBucketCorsRequest"
            }
          },
          {
            "allowEmptyValue": true,
            "in": "query",
            "name": "cors",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Bucket",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/{Bucket}#PutBucketEncryption": {
      "parameters": [
        {
          "$ref": "#/parameters/x-amz-security-token"
        }
      ],
      "put": {
        "description": "Creates a new server-side encryption configuration (or replaces an existing one, if present).",
        "operationId": "PutBucketEncryption",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PutBucketEncryptionRequest"
            }
          },
          {
            "allowEmptyValue": true,
            "in": "query",
            "name": "encryption",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Bucket",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/{Bucket}#PutBucketInventoryConfiguration": {
      "parameters": [
        {
          "$ref": "#/parameters/x-amz-security-token"
        }
      ],
      "put": {
        "description": "Adds an inventory configuration (identified by the inventory ID) from the bucket.",
        "operationId": "PutBucketInventoryConfiguration",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PutBucketInventoryConfigurationRequest"
            }
          },
          {
            "allowEmptyValue": true,
            "in": "query",
            "name": "inventory",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Bucket",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/{Bucket}#PutBucketLifecycle": {
      "parameters": [
        {
          "$ref": "#/parameters/x-amz-security-token"
        }
      ],
      "put": {
        "description": "Deprecated, see the PutBucketLifecycleConfiguration operation.<p>http://docs.amazonwebservices.com/AmazonS3/latest/API/RESTBucketPUTlifecycle.html</p>",
        "operationId": "PutBucketLifecycle",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PutBucketLifecycleRequest"
            }
          },
          {
            "allowEmptyValue": true,
            "in": "query",
            "name": "lifecycle",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Bucket",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/{Bucket}#PutBucketLifecycleConfiguration": {
      "parameters": [
        {
          "$ref": "#/parameters/x-amz-security-token"
        }
      ],
      "put": {
        "description": "Sets lifecycle configuration for your bucket. If a lifecycle configuration exists, it replaces it.",
        "operationId": "PutBucketLifecycleConfiguration",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PutBucketLifecycleConfigurationRequest"
            }
          },
          {
            "allowEmptyValue": true,
            "in": "query",
            "name": "lifecycle",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Bucket",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/{Bucket}#PutBucketLogging": {
      "parameters": [
        {
          "$ref": "#/parameters/x-amz-security-token"
        }
      ],
      "put": {
        "description": "Set the logging parameters for a bucket and to specify permissions for who can view and modify the logging parameters. To set the logging status of a bucket, you must be the bucket owner.<p>http://docs.amazonwebservices.com/AmazonS3/latest/API/RESTBucketPUTlogging.html</p>",
        "operationId": "PutBucketLogging",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PutBucketLoggingRequest"
            }
          },
          {
            "allowEmptyValue": true,
            "in": "query",
            "name": "logging",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Bucket",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/{Bucket}#PutBucketMetricsConfiguration": {
      "parameters": [
        {
          "$ref": "#/parameters/x-amz-security-token"
        }
      ],
      "put": {
        "description": "Sets a metrics configuration (specified by the metrics configuration ID) for the bucket.",
        "operationId": "PutBucketMetricsConfiguration",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PutBucketMetricsConfigurationRequest"
            }
          },
          {
            "allowEmptyValue": true,
            "in": "query",
            "name": "metrics",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Bucket",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/{Bucket}#PutBucketNotification": {
      "parameters": [
        {
          "$ref": "#/parameters/x-amz-security-token"
        }
      ],
      "put": {
        "description": "Deprecated, see the PutBucketNotificationConfiguraiton operation.<p>http://docs.amazonwebservices.com/AmazonS3/latest/API/RESTBucketPUTnotification.html</p>",
        "operationId": "PutBucketNotification",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PutBucketNotificationRequest"
            }
          },
          {
            "allowEmptyValue": true,
            "in": "query",
            "name": "notification",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Bucket",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/{Bucket}#PutBucketNotificationConfiguration": {
      "parameters": [
        {
          "$ref": "#/parameters/x-amz-security-token"
        }
      ],
      "put": {
        "description": "Enables notifications of specified events for a bucket.",
        "operationId": "PutBucketNotificationConfiguration",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PutBucketNotificationConfigurationRequest"
            }
          },
          {
            "allowEmptyValue": true,
            "in": "query",
            "name": "notification",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Bucket",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/{Bucket}#PutBucketPolicy": {
      "parameters": [
        {
          "$ref": "#/parameters/x-amz-security-token"
        }
      ],
      "put": {
        "description": "Replaces a policy on a bucket. If the bucket already has a policy, the one in this request completely replaces it.<p>http://docs.amazonwebservices.com/AmazonS3/latest/API/RESTBucketPUTpolicy.html</p>",
        "operationId": "PutBucketPolicy",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PutBucketPolicyRequest"
            }
          },
          {
            "allowEmptyValue": true,
            "in": "query",
            "name": "policy",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Bucket",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/{Bucket}#PutBucketReplication": {
      "parameters": [
        {
          "$ref": "#/parameters/x-amz-security-token"
        }
      ],
      "put": {
        "description": " Creates a replication configuration or replaces an existing one. For more information, see <a href=\" https://docs.aws.amazon.com/AmazonS3/latest/dev/crr.html\">Cross-Region Replication (CRR)</a> in the <i>Amazon S3 Developer Guide</i>. ",
        "operationId": "PutBucketReplication",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PutBucketReplicationRequest"
            }
          },
          {
            "allowEmptyValue": true,
            "in": "query",
            "name": "replication",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Bucket",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/{Bucket}#PutBucketRequestPayment": {
      "parameters": [
        {
          "$ref": "#/parameters/x-amz-security-token"
        }
      ],
      "put": {
        "description": "Sets the request payment configuration for a bucket. By default, the bucket owner pays for downloads from the bucket. This configuration parameter enables the bucket owner (only) to specify that the person requesting the download will be charged for the download. Documentation on requester pays buckets can be found at http://docs.aws.amazon.com/AmazonS3/latest/dev/RequesterPaysBuckets.html<p>http://docs.amazonwebservices.com/AmazonS3/latest/API/RESTrequestPaymentPUT.html</p>",
        "operationId": "PutBucketRequestPayment",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PutBucketRequestPaymentRequest"
            }
          },
          {
            "allowEmptyValue": true,
            "in": "query",
            "name": "requestPayment",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Bucket",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/{Bucket}#PutBucketTagging": {
      "parameters": [
        {
          "$ref": "#/parameters/x-amz-security-token"
        }
      ],
      "put": {
        "description": "Sets the tags for a bucket.<p>http://docs.amazonwebservices.com/AmazonS3/latest/API/RESTBucketPUTtagging.html</p>",
        "operationId": "PutBucketTagging",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PutBucketTaggingRequest"
            }
          },
          {
            "allowEmptyValue": true,
            "in": "query",
            "name": "tagging",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Bucket",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/{Bucket}#PutBucketVersioning": {
      "parameters": [
        {
          "$ref": "#/parameters/x-amz-security-token"
        }
      ],
      "put": {
        "description": "Sets the versioning state of an existing bucket. To set the versioning state, you must be the bucket owner.<p>http://docs.amazonwebservices.com/AmazonS3/latest/API/RESTBucketPUTVersioningStatus.html</p>",
        "operationId": "PutBucketVersioning",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PutBucketVersioningRequest"
            }
          },
          {
            "allowEmptyValue": true,
            "in": "query",
            "name": "versioning",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Bucket",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/{Bucket}#PutBucketWebsite": {
      "parameters": [
        {
          "$ref": "#/parameters/x-amz-security-token"
        }
      ],
      "put": {
        "description": "Set the website configuration for a bucket.<p>http://docs.amazonwebservices.com/AmazonS3/latest/API/RESTBucketPUTwebsite.html</p>",
        "operationId": "PutBucketWebsite",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PutBucketWebsiteRequest"
            }
          },
          {
            "allowEmptyValue": true,
            "in": "query",
            "name": "website",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Bucket",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/{Bucket}#PutObjectLockConfiguration": {
      "parameters": [
        {
          "$ref": "#/parameters/x-amz-security-token"
        }
      ],
      "put": {
        "description": "Places an Object Lock configuration on the specified bucket. The rule specified in the Object Lock configuration will be applied by default to every new object placed in the specified bucket.",
        "operationId": "PutObjectLockConfiguration",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PutObjectLockConfigurationRequest"
            }
          },
          {
            "allowEmptyValue": true,
            "in": "query",
            "name": "object-lock",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Bucket",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/PutObjectLockConfigurationOutput"
            }
          }
        }
      }
    },
    "/{Bucket}#PutPublicAccessBlock": {
      "parameters": [
        {
          "$ref": "#/parameters/x-amz-security-token"
        }
      ],
      "put": {
        "description": "Creates or modifies the <code>PublicAccessBlock</code> configuration for an Amazon S3 bucket.",
        "operationId": "PutPublicAccessBlock",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PutPublicAccessBlockRequest"
            }
          },
          {
            "allowEmptyValue": true,
            "in": "query",
            "name": "publicAccessBlock",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Bucket",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/{Bucket}/{Key}": {
      "delete": {
        "description": "<p>Aborts a multipart upload.</p> <p>To verify that all parts have been removed, so you don't get charged for the part storage, you should call the List Parts operation and ensure the parts list is empty.</p><p>http://docs.amazonwebservices.com/AmazonS3/latest/API/mpUploadAbort.html</p>",
        "operationId": "AbortMultipartUpload",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AbortMultipartUploadRequest"
            }
          },
          {
            "in": "path",
            "name": "Bucket",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Key",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/AbortMultipartUploadOutput"
            }
          },
          "480": {
            "description": "NoSuchUpload",
            "schema": {
              "$ref": "#/definitions/NoSuchUpload"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/x-amz-security-token"
        }
      ],
      "post": {
        "description": "Completes a multipart upload by assembling previously uploaded parts.<p>http://docs.amazonwebservices.com/AmazonS3/latest/API/mpUploadComplete.html</p>",
        "operationId": "CompleteMultipartUpload",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CompleteMultipartUploadRequest"
            }
          },
          {
            "in": "path",
            "name": "Bucket",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Key",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CompleteMultipartUploadOutput"
            }
          }
        }
      },
      "put": {
        "description": "Creates a copy of an object that is already stored in Amazon S3.<p>http://docs.amazonwebservices.com/AmazonS3/latest/API/RESTObjectCOPY.html</p>",
        "operationId": "CopyObject",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CopyObjectRequest"
            }
          },
          {
            "in": "path",
            "name": "Bucket",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Key",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CopyObjectOutput"
            }
          },
          "480": {
            "description": "ObjectNotInActiveTierError",
            "schema": {
              "$ref": "#/definitions/ObjectNotInActiveTierError"
            }
          }
        }
      }
    },
    "/{Bucket}/{Key}#CreateMultipartUpload": {
      "parameters": [
        {
          "$ref": "#/parameters/x-amz-security-token"
        }
      ],
      "post": {
        "description": "<p>Initiates a multipart upload and returns an upload ID.</p> <p> <b>Note:</b> After you initiate multipart upload and upload one or more parts, you must either complete or abort multipart upload in order to stop getting charged for storage of the uploaded parts. Only after you either complete or abort multipart upload, Amazon S3 frees up the parts storage and stops charging you for the parts storage.</p><p>http://docs.amazonwebservices.com/AmazonS3/latest/API/mpUploadInitiate.html</p>",
        "operationId": "CreateMultipartUpload",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateMultipartUploadRequest"
            }
          },
          {
            "allowEmptyValue": true,
            "in": "query",
            "name": "uploads",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Bucket",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Key",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateMultipartUploadOutput"
            }
          }
        }
      }
    },
    "/{Bucket}/{Key}#DeleteObject": {
      "delete": {
        "description": "Removes the null version (if there is one) of an object and inserts a delete marker, which becomes the latest version of the object. If there isn't a null version, Amazon S3 does not remove any objects.<p>http://docs.amazonwebservices.com/AmazonS3/latest/API/RESTObjectDELETE.html</p>",
        "operationId": "DeleteObject",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteObjectRequest"
            }
          },
          {
            "in": "path",
            "name": "Bucket",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Key",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteObjectOutput"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/x-amz-security-token"
        }
      ]
    },
    "/{Bucket}/{Key}#DeleteObjectTagging": {
      "delete": {
        "description": "Removes the tag-set from an existing object.",
        "operationId": "DeleteObjectTagging",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteObjectTaggingRequest"
            }
          },
          {
            "allowEmptyValue": true,
            "in": "query",
            "name": "tagging",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Bucket",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Key",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteObjectTaggingOutput"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/x-amz-security-token"
        }
      ]
    },
    "/{Bucket}/{Key}#GetObject": {
      "get": {
        "description": "Retrieves objects from Amazon S3.<p>http://docs.amazonwebservices.com/AmazonS3/latest/API/RESTObjectGET.html</p>",
        "operationId": "GetObject",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetObjectRequest"
            }
          },
          {
            "in": "path",
            "name": "Bucket",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Key",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetObjectOutput"
            }
          },
          "480": {
            "description": "NoSuchKey",
            "schema": {
              "$ref": "#/definitions/NoSuchKey"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/x-amz-security-token"
        }
      ]
    },
    "/{Bucket}/{Key}#GetObjectAcl": {
      "get": {
        "description": "Returns the access control list (ACL) of an object.<p>http://docs.amazonwebservices.com/AmazonS3/latest/API/RESTObjectGETacl.html</p>",
        "operationId": "GetObjectAcl",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetObjectAclRequest"
            }
          },
          {
            "allowEmptyValue": true,
            "in": "query",
            "name": "acl",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Bucket",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Key",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetObjectAclOutput"
            }
          },
          "480": {
            "description": "NoSuchKey",
            "schema": {
              "$ref": "#/definitions/NoSuchKey"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/x-amz-security-token"
        }
      ]
    },
    "/{Bucket}/{Key}#GetObjectLegalHold": {
      "get": {
        "description": "Gets an object's current Legal Hold status.",
        "operationId": "GetObjectLegalHold",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetObjectLegalHoldRequest"
            }
          },
          {
            "allowEmptyValue": true,
            "in": "query",
            "name": "legal-hold",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Bucket",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Key",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetObjectLegalHoldOutput"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/x-amz-security-token"
        }
      ]
    },
    "/{Bucket}/{Key}#GetObjectRetention": {
      "get": {
        "description": "Retrieves an object's retention settings.",
        "operationId": "GetObjectRetention",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetObjectRetentionRequest"
            }
          },
          {
            "allowEmptyValue": true,
            "in": "query",
            "name": "retention",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Bucket",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Key",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetObjectRetentionOutput"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/x-amz-security-token"
        }
      ]
    },
    "/{Bucket}/{Key}#GetObjectTagging": {
      "get": {
        "description": "Returns the tag-set of an object.",
        "operationId": "GetObjectTagging",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetObjectTaggingRequest"
            }
          },
          {
            "allowEmptyValue": true,
            "in": "query",
            "name": "tagging",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Bucket",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Key",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetObjectTaggingOutput"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/x-amz-security-token"
        }
      ]
    },
    "/{Bucket}/{Key}#GetObjectTorrent": {
      "get": {
        "description": "Return torrent files from a bucket.<p>http://docs.amazonwebservices.com/AmazonS3/latest/API/RESTObjectGETtorrent.html</p>",
        "operationId": "GetObjectTorrent",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetObjectTorrentRequest"
            }
          },
          {
            "allowEmptyValue": true,
            "in": "query",
            "name": "torrent",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Bucket",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Key",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetObjectTorrentOutput"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/x-amz-security-token"
        }
      ]
    },
    "/{Bucket}/{Key}#HeadObject": {
      "head": {
        "description": "The HEAD operation retrieves metadata from an object without returning the object itself. This operation is useful if you're only interested in an object's metadata. To use HEAD, you must have READ access to the object.<p>http://docs.amazonwebservices.com/AmazonS3/latest/API/RESTObjectHEAD.html</p>",
        "operationId": "HeadObject",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/HeadObjectRequest"
            }
          },
          {
            "in": "path",
            "name": "Bucket",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Key",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/HeadObjectOutput"
            }
          },
          "480": {
            "description": "NoSuchKey",
            "schema": {
              "$ref": "#/definitions/NoSuchKey"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/x-amz-security-token"
        }
      ]
    },
    "/{Bucket}/{Key}#ListParts": {
      "get": {
        "description": "Lists the parts that have been uploaded for a specific multipart upload.<p>http://docs.amazonwebservices.com/AmazonS3/latest/API/mpUploadListParts.html</p>",
        "operationId": "ListParts",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListPartsRequest"
            }
          },
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxParts",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "PartNumberMarker",
            "required": false,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Bucket",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Key",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListPartsOutput"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/x-amz-security-token"
        }
      ]
    },
    "/{Bucket}/{Key}#PutObject": {
      "parameters": [
        {
          "$ref": "#/parameters/x-amz-security-token"
        }
      ],
      "put": {
        "description": "Adds an object to a bucket.<p>http://docs.amazonwebservices.com/AmazonS3/latest/API/RESTObjectPUT.html</p>",
        "operationId": "PutObject",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PutObjectRequest"
            }
          },
          {
            "in": "path",
            "name": "Bucket",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Key",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/PutObjectOutput"
            }
          }
        }
      }
    },
    "/{Bucket}/{Key}#PutObjectAcl": {
      "parameters": [
        {
          "$ref": "#/parameters/x-amz-security-token"
        }
      ],
      "put": {
        "description": "uses the acl subresource to set the access control list (ACL) permissions for an object that already exists in a bucket<p>http://docs.amazonwebservices.com/AmazonS3/latest/API/RESTObjectPUTacl.html</p>",
        "operationId": "PutObjectAcl",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PutObjectAclRequest"
            }
          },
          {
            "allowEmptyValue": true,
            "in": "query",
            "name": "acl",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Bucket",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Key",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/PutObjectAclOutput"
            }
          },
          "480": {
            "description": "NoSuchKey",
            "schema": {
              "$ref": "#/definitions/NoSuchKey"
            }
          }
        }
      }
    },
    "/{Bucket}/{Key}#PutObjectLegalHold": {
      "parameters": [
        {
          "$ref": "#/parameters/x-amz-security-token"
        }
      ],
      "put": {
        "description": "Applies a Legal Hold configuration to the specified object.",
        "operationId": "PutObjectLegalHold",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PutObjectLegalHoldRequest"
            }
          },
          {
            "allowEmptyValue": true,
            "in": "query",
            "name": "legal-hold",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Bucket",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Key",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/PutObjectLegalHoldOutput"
            }
          }
        }
      }
    },
    "/{Bucket}/{Key}#PutObjectRetention": {
      "parameters": [
        {
          "$ref": "#/parameters/x-amz-security-token"
        }
      ],
      "put": {
        "description": "Places an Object Retention configuration on an object.",
        "operationId": "PutObjectRetention",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PutObjectRetentionRequest"
            }
          },
          {
            "allowEmptyValue": true,
            "in": "query",
            "name": "retention",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Bucket",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Key",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/PutObjectRetentionOutput"
            }
          }
        }
      }
    },
    "/{Bucket}/{Key}#PutObjectTagging": {
      "parameters": [
        {
          "$ref": "#/parameters/x-amz-security-token"
        }
      ],
      "put": {
        "description": "Sets the supplied tag-set to an object that already exists in a bucket",
        "operationId": "PutObjectTagging",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PutObjectTaggingRequest"
            }
          },
          {
            "allowEmptyValue": true,
            "in": "query",
            "name": "tagging",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Bucket",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Key",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/PutObjectTaggingOutput"
            }
          }
        }
      }
    },
    "/{Bucket}/{Key}#RestoreObject": {
      "parameters": [
        {
          "$ref": "#/parameters/x-amz-security-token"
        }
      ],
      "post": {
        "description": "Restores an archived copy of an object back into Amazon S3<p>http://docs.amazonwebservices.com/AmazonS3/latest/API/RESTObjectRestore.html</p>",
        "operationId": "RestoreObject",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RestoreObjectRequest"
            }
          },
          {
            "allowEmptyValue": true,
            "in": "query",
            "name": "restore",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Bucket",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Key",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/RestoreObjectOutput"
            }
          },
          "480": {
            "description": "ObjectAlreadyInActiveTierError",
            "schema": {
              "$ref": "#/definitions/ObjectAlreadyInActiveTierError"
            }
          }
        }
      }
    },
    "/{Bucket}/{Key}#SelectObjectContent": {
      "parameters": [
        {
          "$ref": "#/parameters/x-amz-security-token"
        }
      ],
      "post": {
        "description": "This operation filters the contents of an Amazon S3 object based on a simple Structured Query Language (SQL) statement. In the request, along with the SQL expression, you must also specify a data serialization format (JSON or CSV) of the object. Amazon S3 uses this to parse object data into records, and returns only records that match the specified SQL expression. You must also specify the data serialization format for the response.",
        "operationId": "SelectObjectContent",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SelectObjectContentRequest"
            }
          },
          {
            "allowEmptyValue": true,
            "in": "query",
            "name": "select",
            "required": true,
            "type": "string"
          },
          {
            "enum": [
              "2"
            ],
            "in": "query",
            "name": "select-type",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Bucket",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Key",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/SelectObjectContentOutput"
            }
          }
        }
      }
    },
    "/{Bucket}/{Key}#UploadPart": {
      "parameters": [
        {
          "$ref": "#/parameters/x-amz-security-token"
        }
      ],
      "put": {
        "description": "<p>Uploads a part in a multipart upload.</p> <p> <b>Note:</b> After you initiate multipart upload and upload one or more parts, you must either complete or abort multipart upload in order to stop getting charged for storage of the uploaded parts. Only after you either complete or abort multipart upload, Amazon S3 frees up the parts storage and stops charging you for the parts storage.</p><p>http://docs.amazonwebservices.com/AmazonS3/latest/API/mpUploadUploadPart.html</p>",
        "operationId": "UploadPart",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UploadPartRequest"
            }
          },
          {
            "in": "path",
            "name": "Bucket",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Key",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UploadPartOutput"
            }
          }
        }
      }
    },
    "/{Bucket}/{Key}#UploadPartCopy": {
      "parameters": [
        {
          "$ref": "#/parameters/x-amz-security-token"
        }
      ],
      "put": {
        "description": "Uploads a part by copying data from an existing object as data source.<p>http://docs.amazonwebservices.com/AmazonS3/latest/API/mpUploadUploadPartCopy.html</p>",
        "operationId": "UploadPartCopy",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UploadPartCopyRequest"
            }
          },
          {
            "in": "path",
            "name": "Bucket",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Key",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UploadPartCopyOutput"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "AbortDate": {
      "format": "date-time",
      "type": "string"
    },
    "AbortIncompleteMultipartUpload": {
      "description": "Specifies the days since the initiation of an Incomplete Multipart Upload that Lifecycle will wait before permanently removing all parts of the upload.",
      "properties": {
        "DaysAfterInitiation": {
          "$ref": "#/definitions/DaysAfterInitiation",
          "description": "Indicates the number of days that must pass since initiation for Lifecycle to abort an Incomplete Multipart Upload."
        }
      },
      "type": "object"
    },
    "AbortMultipartUploadOutput": {
      "example": {},
      "properties": {},
      "type": "object"
    },
    "AbortMultipartUploadRequest": {
      "example": {
        "Bucket": "examplebucket",
        "Key": "bigobject",
        "UploadId": "xadcOB_7YPBOJuoFiQ9cz4P3Pe6FIZwO4f7wN93uHsNBEw97pl5eNwzExg0LAT2dUN91cOmrEQHDsP3WA60CEg--"
      },
      "properties": {},
      "type": "object"
    },
    "AbortRuleId": {
      "type": "string"
    },
    "AccelerateConfiguration": {
      "properties": {
        "Status": {
          "$ref": "#/definitions/BucketAccelerateStatus",
          "description": "The accelerate configuration of the bucket."
        }
      },
      "type": "object"
    },
    "AcceptRanges": {
      "type": "string"
    },
    "AccessControlPolicy": {
      "properties": {
        "Grants": {
          "$ref": "#/definitions/Grants",
          "description": "A list of grants."
        },
        "Owner": {
          "$ref": "#/definitions/Owner"
        }
      },
      "type": "object"
    },
    "AccessControlTranslation": {
      "description": "A container for information about access control for replicas.",
      "properties": {
        "Owner": {
          "$ref": "#/definitions/OwnerOverride",
          "description": "The override value for the owner of the replica object."
        }
      },
      "required": [
        "Owner"
      ],
      "type": "object"
    },
    "AccountId": {
      "type": "string"
    },
    "AllowQuotedRecordDelimiter": {
      "type": "boolean"
    },
    "AllowedHeader": {
      "type": "string"
    },
    "AllowedHeaders": {
      "items": {
        "$ref": "#/definitions/AllowedHeader"
      },
      "type": "array",
      "xml": {
        "wrapped": false
      }
    },
    "AllowedMethod": {
      "type": "string"
    },
    "AllowedMethods": {
      "items": {
        "$ref": "#/definitions/AllowedMethod"
      },
      "type": "array",
      "xml": {
        "wrapped": false
      }
    },
    "AllowedOrigin": {
      "type": "string"
    },
    "AllowedOrigins": {
      "items": {
        "$ref": "#/definitions/AllowedOrigin"
      },
      "type": "array",
      "xml": {
        "wrapped": false
      }
    },
    "AnalyticsAndOperator": {
      "properties": {
        "Prefix": {
          "$ref": "#/definitions/Prefix",
          "description": "The prefix to use when evaluating an AND predicate."
        },
        "Tags": {
          "$ref": "#/definitions/TagSet",
          "description": "The list of tags to use when evaluating an AND predicate."
        }
      },
      "type": "object",
      "xml": {
        "wrapped": false
      }
    },
    "AnalyticsConfiguration": {
      "properties": {
        "Filter": {
          "$ref": "#/definitions/AnalyticsFilter",
          "description": "The filter used to describe a set of objects for analyses. A filter must have exactly one prefix, one tag, or one conjunction (AnalyticsAndOperator). If no filter is provided, all objects will be considered in any analysis."
        },
        "Id": {
          "$ref": "#/definitions/AnalyticsId",
          "description": "The identifier used to represent an analytics configuration."
        },
        "StorageClassAnalysis": {
          "$ref": "#/definitions/StorageClassAnalysis",
          "description": "If present, it indicates that data related to access patterns will be collected and made available to analyze the tradeoffs between different storage classes."
        }
      },
      "required": [
        "Id",
        "StorageClassAnalysis"
      ],
      "type": "object"
    },
    "AnalyticsConfigurationList": {
      "items": {
        "$ref": "#/definitions/AnalyticsConfiguration"
      },
      "type": "array",
      "xml": {
        "wrapped": false
      }
    },
    "AnalyticsExportDestination": {
      "properties": {
        "S3BucketDestination": {
          "$ref": "#/definitions/AnalyticsS3BucketDestination",
          "description": "A destination signifying output to an S3 bucket."
        }
      },
      "required": [
        "S3BucketDestination"
      ],
      "type": "object"
    },
    "AnalyticsFilter": {
      "properties": {
        "And": {
          "$ref": "#/definitions/AnalyticsAndOperator",
          "description": "A conjunction (logical AND) of predicates, which is used in evaluating an analytics filter. The operator must have at least two predicates."
        },
        "Prefix": {
          "$ref": "#/definitions/Prefix",
          "description": "The prefix to use when evaluating an analytics filter."
        },
        "Tag": {
          "$ref": "#/definitions/Tag",
          "description": "The tag to use when evaluating an analytics filter."
        }
      },
      "type": "object"
    },
    "AnalyticsId": {
      "type": "string"
    },
    "AnalyticsS3BucketDestination": {
      "properties": {
        "Bucket": {
          "$ref": "#/definitions/BucketName",
          "description": "The Amazon resource name (ARN) of the bucket to which data is exported."
        },
        "BucketAccountId": {
          "$ref": "#/definitions/AccountId",
          "description": "The account ID that owns the destination bucket. If no account ID is provided, the owner will not be validated prior to exporting data."
        },
        "Format": {
          "$ref": "#/definitions/AnalyticsS3ExportFileFormat",
          "description": "The file format used when exporting data to Amazon S3."
        },
        "Prefix": {
          "$ref": "#/definitions/Prefix",
          "description": "The prefix to use when exporting data. The exported data begins with this prefix."
        }
      },
      "required": [
        "Format",
        "Bucket"
      ],
      "type": "object"
    },
    "AnalyticsS3ExportFileFormat": {
      "enum": [
        "CSV"
      ],
      "type": "string"
    },
    "Body": {
      "type": "string"
    },
    "Bucket": {
      "properties": {
        "CreationDate": {
          "$ref": "#/definitions/CreationDate",
          "description": "Date the bucket was created."
        },
        "Name": {
          "$ref": "#/definitions/BucketName",
          "description": "The name of the bucket."
        }
      },
      "type": "object"
    },
    "BucketAccelerateStatus": {
      "enum": [
        "Enabled",
        "Suspended"
      ],
      "type": "string"
    },
    "BucketAlreadyExists": {},
    "BucketAlreadyOwnedByYou": {},
    "BucketCannedACL": {
      "enum": [
        "private",
        "public-read",
        "public-read-write",
        "authenticated-read"
      ],
      "type": "string"
    },
    "BucketLifecycleConfiguration": {
      "properties": {
        "Rules": {
          "$ref": "#/definitions/LifecycleRules"
        }
      },
      "required": [
        "Rules"
      ],
      "type": "object"
    },
    "BucketLocationConstraint": {
      "enum": [
        "EU",
        "eu-west-1",
        "us-west-1",
        "us-west-2",
        "ap-south-1",
        "ap-southeast-1",
        "ap-southeast-2",
        "ap-northeast-1",
        "sa-east-1",
        "cn-north-1",
        "eu-central-1"
      ],
      "type": "string"
    },
    "BucketLoggingStatus": {
      "properties": {
        "LoggingEnabled": {
          "$ref": "#/definitions/LoggingEnabled"
        }
      },
      "type": "object"
    },
    "BucketLogsPermission": {
      "enum": [
        "FULL_CONTROL",
        "READ",
        "WRITE"
      ],
      "type": "string"
    },
    "BucketName": {
      "type": "string"
    },
    "BucketVersioningStatus": {
      "enum": [
        "Enabled",
        "Suspended"
      ],
      "type": "string"
    },
    "Buckets": {
      "items": {
        "$ref": "#/definitions/Bucket"
      },
      "type": "array"
    },
    "BypassGovernanceRetention": {
      "type": "boolean"
    },
    "BytesProcessed": {
      "type": "integer"
    },
    "BytesReturned": {
      "type": "integer"
    },
    "BytesScanned": {
      "type": "integer"
    },
    "CORSConfiguration": {
      "properties": {
        "CORSRules": {
          "$ref": "#/definitions/CORSRules"
        }
      },
      "required": [
        "CORSRules"
      ],
      "type": "object"
    },
    "CORSRule": {
      "properties": {
        "AllowedHeaders": {
          "$ref": "#/definitions/AllowedHeaders",
          "description": "Specifies which headers are allowed in a pre-flight OPTIONS request."
        },
        "AllowedMethods": {
          "$ref": "#/definitions/AllowedMethods",
          "description": "Identifies HTTP methods that the domain/origin specified in the rule is allowed to execute."
        },
        "AllowedOrigins": {
          "$ref": "#/definitions/AllowedOrigins",
          "description": "One or more origins you want customers to be able to access the bucket from."
        },
        "ExposeHeaders": {
          "$ref": "#/definitions/ExposeHeaders",
          "description": "One or more headers in the response that you want customers to be able to access from their applications (for example, from a JavaScript XMLHttpRequest object)."
        },
        "MaxAgeSeconds": {
          "$ref": "#/definitions/MaxAgeSeconds",
          "description": "The time in seconds that your browser is to cache the preflight response for the specified resource."
        }
      },
      "required": [
        "AllowedMethods",
        "AllowedOrigins"
      ],
      "type": "object"
    },
    "CORSRules": {
      "items": {
        "$ref": "#/definitions/CORSRule"
      },
      "type": "array",
      "xml": {
        "wrapped": false
      }
    },
    "CSVInput": {
      "description": "Describes how a CSV-formatted input object is formatted.",
      "properties": {
        "AllowQuotedRecordDelimiter": {
          "$ref": "#/definitions/AllowQuotedRecordDelimiter",
          "description": "Specifies that CSV field values may contain quoted record delimiters and such records should be allowed. Default value is FALSE. Setting this value to TRUE may lower performance."
        },
        "Comments": {
          "$ref": "#/definitions/Comments",
          "description": "The single character used to indicate a row should be ignored when present at the start of a row."
        },
        "FieldDelimiter": {
          "$ref": "#/definitions/FieldDelimiter",
          "description": "The value used to separate individual fields in a record."
        },
        "FileHeaderInfo": {
          "$ref": "#/definitions/FileHeaderInfo",
          "description": "Describes the first line of input. Valid values: None, Ignore, Use."
        },
        "QuoteCharacter": {
          "$ref": "#/definitions/QuoteCharacter",
          "description": "Value used for escaping where the field delimiter is part of the value."
        },
        "QuoteEscapeCharacter": {
          "$ref": "#/definitions/QuoteEscapeCharacter",
          "description": "The single character used for escaping the quote character inside an already escaped value."
        },
        "RecordDelimiter": {
          "$ref": "#/definitions/RecordDelimiter",
          "description": "The value used to separate individual records."
        }
      },
      "type": "object"
    },
    "CSVOutput": {
      "description": "Describes how CSV-formatted results are formatted.",
      "properties": {
        "FieldDelimiter": {
          "$ref": "#/definitions/FieldDelimiter",
          "description": "The value used to separate individual fields in a record."
        },
        "QuoteCharacter": {
          "$ref": "#/definitions/QuoteCharacter",
          "description": "The value used for escaping where the field delimiter is part of the value."
        },
        "QuoteEscapeCharacter": {
          "$ref": "#/definitions/QuoteEscapeCharacter",
          "description": "Th single character used for escaping the quote character inside an already escaped value."
        },
        "QuoteFields": {
          "$ref": "#/definitions/QuoteFields",
          "description": "Indicates whether or not all output fields should be quoted."
        },
        "RecordDelimiter": {
          "$ref": "#/definitions/RecordDelimiter",
          "description": "The value used to separate individual records."
        }
      },
      "type": "object"
    },
    "CacheControl": {
      "type": "string"
    },
    "CloudFunction": {
      "type": "string"
    },
    "CloudFunctionConfiguration": {
      "properties": {
        "CloudFunction": {
          "$ref": "#/definitions/CloudFunction"
        },
        "Event": {
          "$ref": "#/definitions/Event"
        },
        "Events": {
          "$ref": "#/definitions/EventList"
        },
        "Id": {
          "$ref": "#/definitions/NotificationId"
        },
        "InvocationRole": {
          "$ref": "#/definitions/CloudFunctionInvocationRole"
        }
      },
      "type": "object"
    },
    "CloudFunctionInvocationRole": {
      "type": "string"
    },
    "Code": {
      "type": "string"
    },
    "Comments": {
      "type": "string"
    },
    "CommonPrefix": {
      "properties": {
        "Prefix": {
          "$ref": "#/definitions/Prefix"
        }
      },
      "type": "object"
    },
    "CommonPrefixList": {
      "items": {
        "$ref": "#/definitions/CommonPrefix"
      },
      "type": "array",
      "xml": {
        "wrapped": false
      }
    },
    "CompleteMultipartUploadOutput": {
      "example": {
        "Bucket": "acexamplebucket",
        "ETag": "\"4d9031c7644d8081c2829f4ea23c55f7-2\"",
        "Key": "bigobject",
        "Location": "https://examplebucket.s3.amazonaws.com/bigobject"
      },
      "properties": {
        "Bucket": {
          "$ref": "#/definitions/BucketName"
        },
        "ETag": {
          "$ref": "#/definitions/ETag",
          "description": "Entity tag of the object."
        },
        "Key": {
          "$ref": "#/definitions/ObjectKey"
        },
        "Location": {
          "$ref": "#/definitions/Location"
        }
      },
      "type": "object"
    },
    "CompleteMultipartUploadRequest": {
      "example": {
        "Bucket": "examplebucket",
        "Key": "bigobject",
        "MultipartUpload": {
          "Parts": [
            {
              "ETag": "\"d8c2eafd90c266e19ab9dcacc479f8af\"",
              "PartNumber": "1"
            },
            {
              "ETag": "\"d8c2eafd90c266e19ab9dcacc479f8af\"",
              "PartNumber": "2"
            }
          ]
        },
        "UploadId": "7YPBOJuoFiQ9cz4P3Pe6FIZwO4f7wN93uHsNBEw97pl5eNwzExg0LAT2dUN91cOmrEQHDsP3WA60CEg--"
      },
      "properties": {
        "MultipartUpload": {
          "$ref": "#/definitions/CompletedMultipartUpload"
        }
      },
      "type": "object",
      "xml": {
        "namespace": "http://s3.amazonaws.com/doc/2006-03-01/"
      }
    },
    "CompletedMultipartUpload": {
      "properties": {
        "Parts": {
          "$ref": "#/definitions/CompletedPartList"
        }
      },
      "type": "object"
    },
    "CompletedPart": {
      "properties": {
        "ETag": {
          "$ref": "#/definitions/ETag",
          "description": "Entity tag returned when the part was uploaded."
        },
        "PartNumber": {
          "$ref": "#/definitions/PartNumber",
          "description": "Part number that identifies the part. This is a positive integer between 1 and 10,000."
        }
      },
      "type": "object"
    },
    "CompletedPartList": {
      "items": {
        "$ref": "#/definitions/CompletedPart"
      },
      "type": "array",
      "xml": {
        "wrapped": false
      }
    },
    "CompressionType": {
      "enum": [
        "NONE",
        "GZIP",
        "BZIP2"
      ],
      "type": "string"
    },
    "Condition": {
      "properties": {
        "HttpErrorCodeReturnedEquals": {
          "$ref": "#/definitions/HttpErrorCodeReturnedEquals",
          "description": "The HTTP error code when the redirect is applied. In the event of an error, if the error code equals this value, then the specified redirect is applied. Required when parent element Condition is specified and sibling KeyPrefixEquals is not specified. If both are specified, then both must be true for the redirect to be applied."
        },
        "KeyPrefixEquals": {
          "$ref": "#/definitions/KeyPrefixEquals",
          "description": "The object key name prefix when the redirect is applied. For example, to redirect requests for ExamplePage.html, the key prefix will be ExamplePage.html. To redirect request for all pages with the prefix docs/, the key prefix will be /docs, which identifies all objects in the docs/ folder. Required when the parent element Condition is specified and sibling HttpErrorCodeReturnedEquals is not specified. If both conditions are specified, both must be true for the redirect to be applied."
        }
      },
      "type": "object"
    },
    "ConfirmRemoveSelfBucketAccess": {
      "type": "boolean"
    },
    "ContentDisposition": {
      "type": "string"
    },
    "ContentEncoding": {
      "type": "string"
    },
    "ContentLanguage": {
      "type": "string"
    },
    "ContentLength": {
      "type": "integer"
    },
    "ContentMD5": {
      "type": "string"
    },
    "ContentRange": {
      "type": "string"
    },
    "ContentType": {
      "type": "string"
    },
    "ContinuationEvent": {
      "properties": {},
      "type": "object"
    },
    "CopyObjectOutput": {
      "example": {
        "CopyObjectResult": {
          "ETag": "\"6805f2cfc46c0f04559748bb039d69ae\"",
          "LastModified": "2016-12-15T17:38:53.000Z"
        }
      },
      "properties": {
        "CopyObjectResult": {
          "$ref": "#/definitions/CopyObjectResult"
        }
      },
      "type": "object"
    },
    "CopyObjectRequest": {
      "example": {
        "Bucket": "destinationbucket",
        "CopySource": "/sourcebucket/HappyFacejpg",
        "Key": "HappyFaceCopyjpg"
      },
      "properties": {
        "Metadata": {
          "$ref": "#/definitions/Metadata",
          "description": "A map of metadata to store with the object in S3."
        }
      },
      "type": "object"
    },
    "CopyObjectResult": {
      "properties": {
        "ETag": {
          "$ref": "#/definitions/ETag"
        },
        "LastModified": {
          "$ref": "#/definitions/LastModified"
        }
      },
      "type": "object"
    },
    "CopyPartResult": {
      "properties": {
        "ETag": {
          "$ref": "#/definitions/ETag",
          "description": "Entity tag of the object."
        },
        "LastModified": {
          "$ref": "#/definitions/LastModified",
          "description": "Date and time at which the object was uploaded."
        }
      },
      "type": "object"
    },
    "CopySource": {
      "pattern": "\\/.+\\/.+",
      "type": "string"
    },
    "CopySourceIfMatch": {
      "type": "string"
    },
    "CopySourceIfModifiedSince": {
      "format": "date-time",
      "type": "string"
    },
    "CopySourceIfNoneMatch": {
      "type": "string"
    },
    "CopySourceIfUnmodifiedSince": {
      "format": "date-time",
      "type": "string"
    },
    "CopySourceRange": {
      "type": "string"
    },
    "CopySourceSSECustomerAlgorithm": {
      "type": "string"
    },
    "CopySourceSSECustomerKey": {
      "format": "password",
      "type": "string"
    },
    "CopySourceSSECustomerKeyMD5": {
      "type": "string"
    },
    "CopySourceVersionId": {
      "type": "string"
    },
    "CreateBucketConfiguration": {
      "properties": {
        "LocationConstraint": {
          "$ref": "#/definitions/BucketLocationConstraint",
          "description": "Specifies the region where the bucket will be created. If you don't specify a region, the bucket will be created in US Standard."
        }
      },
      "type": "object"
    },
    "CreateBucketOutput": {
      "example": {
        "Location": "http://examplebucket.s3.amazonaws.com/"
      },
      "properties": {},
      "type": "object"
    },
    "CreateBucketRequest": {
      "example": {
        "Bucket": "examplebucket",
        "CreateBucketConfiguration": {
          "LocationConstraint": "eu-west-1"
        }
      },
      "properties": {
        "CreateBucketConfiguration": {
          "$ref": "#/definitions/CreateBucketConfiguration"
        }
      },
      "type": "object",
      "xml": {
        "namespace": "http://s3.amazonaws.com/doc/2006-03-01/"
      }
    },
    "CreateMultipartUploadOutput": {
      "example": {
        "Bucket": "examplebucket",
        "Key": "largeobject",
        "UploadId": "ibZBv_75gd9r8lH_gqXatLdxMVpAlj6ZQjEs.OwyF3953YdwbcQnMA2BLGn8Lx12fQNICtMw5KyteFeHw.Sjng--"
      },
      "properties": {
        "Bucket": {
          "$ref": "#/definitions/BucketName",
          "description": "Name of the bucket to which the multipart upload was initiated."
        },
        "Key": {
          "$ref": "#/definitions/ObjectKey",
          "description": "Object key for which the multipart upload was initiated."
        },
        "UploadId": {
          "$ref": "#/definitions/MultipartUploadId",
          "description": "ID for the initiated multipart upload."
        }
      },
      "type": "object"
    },
    "CreateMultipartUploadRequest": {
      "example": {
        "Bucket": "examplebucket",
        "Key": "largeobject"
      },
      "properties": {
        "Metadata": {
          "$ref": "#/definitions/Metadata",
          "description": "A map of metadata to store with the object in S3."
        }
      },
      "type": "object"
    },
    "CreationDate": {
      "format": "date-time",
      "type": "string"
    },
    "Date": {
      "format": "date-time",
      "type": "string"
    },
    "Days": {
      "type": "integer"
    },
    "DaysAfterInitiation": {
      "type": "integer"
    },
    "DefaultRetention": {
      "description": "The container element for specifying the default Object Lock retention settings for new objects placed in the specified bucket.",
      "properties": {
        "Days": {
          "$ref": "#/definitions/Days",
          "description": "The number of days that you want to specify for the default retention period."
        },
        "Mode": {
          "$ref": "#/definitions/ObjectLockRetentionMode",
          "description": "The default Object Lock retention mode you want to apply to new objects placed in the specified bucket."
        },
        "Years": {
          "$ref": "#/definitions/Years",
          "description": "The number of years that you want to specify for the default retention period."
        }
      },
      "type": "object"
    },
    "Delete": {
      "properties": {
        "Objects": {
          "$ref": "#/definitions/ObjectIdentifierList"
        },
        "Quiet": {
          "$ref": "#/definitions/Quiet",
          "description": "Element to enable quiet mode for the request. When you add this element, you must set its value to true."
        }
      },
      "required": [
        "Objects"
      ],
      "type": "object"
    },
    "DeleteBucketAnalyticsConfigurationRequest": {
      "properties": {},
      "type": "object"
    },
    "DeleteBucketCorsRequest": {
      "example": {
        "Bucket": "examplebucket"
      },
      "properties": {},
      "type": "object"
    },
    "DeleteBucketEncryptionRequest": {
      "properties": {},
      "type": "object"
    },
    "DeleteBucketInventoryConfigurationRequest": {
      "properties": {},
      "type": "object"
    },
    "DeleteBucketLifecycleRequest": {
      "example": {
        "Bucket": "examplebucket"
      },
      "properties": {},
      "type": "object"
    },
    "DeleteBucketMetricsConfigurationRequest": {
      "properties": {},
      "type": "object"
    },
    "DeleteBucketPolicyRequest": {
      "example": {
        "Bucket": "examplebucket"
      },
      "properties": {},
      "type": "object"
    },
    "DeleteBucketReplicationRequest": {
      "example": {
        "Bucket": "example"
      },
      "properties": {},
      "type": "object"
    },
    "DeleteBucketRequest": {
      "example": {
        "Bucket": "forrandall2"
      },
      "properties": {},
      "type": "object"
    },
    "DeleteBucketTaggingRequest": {
      "example": {
        "Bucket": "examplebucket"
      },
      "properties": {},
      "type": "object"
    },
    "DeleteBucketWebsiteRequest": {
      "example": {
        "Bucket": "examplebucket"
      },
      "properties": {},
      "type": "object"
    },
    "DeleteMarker": {
      "type": "boolean"
    },
    "DeleteMarkerEntry": {
      "properties": {
        "IsLatest": {
          "$ref": "#/definitions/IsLatest",
          "description": "Specifies whether the object is (true) or is not (false) the latest version of an object."
        },
        "Key": {
          "$ref": "#/definitions/ObjectKey",
          "description": "The object key."
        },
        "LastModified": {
          "$ref": "#/definitions/LastModified",
          "description": "Date and time the object was last modified."
        },
        "Owner": {
          "$ref": "#/definitions/Owner"
        },
        "VersionId": {
          "$ref": "#/definitions/ObjectVersionId",
          "description": "Version ID of an object."
        }
      },
      "type": "object"
    },
    "DeleteMarkerReplication": {
      "description": "Specifies whether Amazon S3 should replicate delete makers.",
      "properties": {
        "Status": {
          "$ref": "#/definitions/DeleteMarkerReplicationStatus",
          "description": "<p>The status of the delete marker replication.</p> <note> <p> In the current implementation, Amazon S3 doesn't replicate the delete markers. The status must be <code>Disabled</code>. </p> </note>"
        }
      },
      "type": "object"
    },
    "DeleteMarkerReplicationStatus": {
      "enum": [
        "Enabled",
        "Disabled"
      ],
      "type": "string"
    },
    "DeleteMarkerVersionId": {
      "type": "string"
    },
    "DeleteMarkers": {
      "items": {
        "$ref": "#/definitions/DeleteMarkerEntry"
      },
      "type": "array",
      "xml": {
        "wrapped": false
      }
    },
    "DeleteObjectOutput": {
      "example": {},
      "properties": {},
      "type": "object"
    },
    "DeleteObjectRequest": {
      "example": {
        "Bucket": "ExampleBucket",
        "Key": "HappyFace.jpg"
      },
      "properties": {},
      "type": "object"
    },
    "DeleteObjectTaggingOutput": {
      "example": {
        "VersionId": "null"
      },
      "properties": {},
      "type": "object"
    },
    "DeleteObjectTaggingRequest": {
      "example": {
        "Bucket": "examplebucket",
        "Key": "HappyFace.jpg"
      },
      "properties": {},
      "type": "object"
    },
    "DeleteObjectsOutput": {
      "example": {
        "Deleted": [
          {
            "Key": "HappyFace.jpg",
            "VersionId": "yoz3HB.ZhCS_tKVEmIOr7qYyyAaZSKVd"
          },
          {
            "Key": "HappyFace.jpg",
            "VersionId": "2LWg7lQLnY41.maGB5Z6SWW.dcq0vx7b"
          }
        ]
      },
      "properties": {
        "Deleted": {
          "$ref": "#/definitions/DeletedObjects"
        },
        "Errors": {
          "$ref": "#/definitions/Errors"
        }
      },
      "type": "object"
    },
    "DeleteObjectsRequest": {
      "example": {
        "Bucket": "examplebucket",
        "Delete": {
          "Objects": [
            {
              "Key": "HappyFace.jpg",
              "VersionId": "2LWg7lQLnY41.maGB5Z6SWW.dcq0vx7b"
            },
            {
              "Key": "HappyFace.jpg",
              "VersionId": "yoz3HB.ZhCS_tKVEmIOr7qYyyAaZSKVd"
            }
          ],
          "Quiet": false
        }
      },
      "properties": {
        "Delete": {
          "$ref": "#/definitions/Delete"
        }
      },
      "required": [
        "Delete"
      ],
      "type": "object",
      "xml": {
        "namespace": "http://s3.amazonaws.com/doc/2006-03-01/"
      }
    },
    "DeletePublicAccessBlockRequest": {
      "properties": {},
      "type": "object"
    },
    "DeletedObject": {
      "properties": {
        "DeleteMarker": {
          "$ref": "#/definitions/DeleteMarker"
        },
        "DeleteMarkerVersionId": {
          "$ref": "#/definitions/DeleteMarkerVersionId"
        },
        "Key": {
          "$ref": "#/definitions/ObjectKey"
        },
        "VersionId": {
          "$ref": "#/definitions/ObjectVersionId"
        }
      },
      "type": "object"
    },
    "DeletedObjects": {
      "items": {
        "$ref": "#/definitions/DeletedObject"
      },
      "type": "array",
      "xml": {
        "wrapped": false
      }
    },
    "Delimiter": {
      "type": "string"
    },
    "Description": {
      "type": "string"
    },
    "Destination": {
      "description": "A container for information about the replication destination.",
      "properties": {
        "AccessControlTranslation": {
          "$ref": "#/definitions/AccessControlTranslation",
          "description": "<p>A container for information about access control for replicas. </p> <p>Use this element only in a cross-account scenario where source and destination bucket owners are not the same to change replica ownership to the AWS account that owns the destination bucket. If you don't add this element to the replication configuration, the replicas are owned by same AWS account that owns the source object. </p>"
        },
        "Account": {
          "$ref": "#/definitions/AccountId",
          "description": "<p>The account ID of the destination bucket. Currently, Amazon S3 verifies this value only if Access Control Translation is enabled. </p> <p>In a cross-account scenario, if you change replica ownership to the AWS account that owns the destination bucket by adding the <code>AccessControlTranslation</code> element, this is the account ID of the owner of the destination bucket. </p>"
        },
        "Bucket": {
          "$ref": "#/definitions/BucketName",
          "description": "<p> The Amazon Resource Name (ARN) of the bucket where you want Amazon S3 to store replicas of the object identified by the rule. </p> <p> If there are multiple rules in your replication configuration, all rules must specify the same bucket as the destination. A replication configuration can replicate objects to only one destination bucket. </p>"
        },
        "EncryptionConfiguration": {
          "$ref": "#/definitions/EncryptionConfiguration",
          "description": "A container that provides information about encryption. If <code>SourceSelectionCriteria</code> is specified, you must specify this element. "
        },
        "StorageClass": {
          "$ref": "#/definitions/StorageClass",
          "description": " The class of storage used to store the object. By default Amazon S3 uses storage class of the source object when creating a replica. "
        }
      },
      "required": [
        "Bucket"
      ],
      "type": "object"
    },
    "DisplayName": {
      "type": "string"
    },
    "ETag": {
      "type": "string"
    },
    "EmailAddress": {
      "type": "string"
    },
    "EnableRequestProgress": {
      "type": "boolean"
    },
    "EncodingType": {
      "description": "Requests Amazon S3 to encode the object keys in the response and specifies the encoding method to use. An object key may contain any Unicode character; however, XML 1.0 parser cannot parse some characters, such as characters with an ASCII value from 0 to 10. For characters that are not supported in XML 1.0, you can add this parameter to request that Amazon S3 encode the keys in the response.",
      "enum": [
        "url"
      ],
      "type": "string"
    },
    "Encryption": {
      "description": "Describes the server-side encryption that will be applied to the restore results.",
      "properties": {
        "EncryptionType": {
          "$ref": "#/definitions/ServerSideEncryption",
          "description": "The server-side encryption algorithm used when storing job results in Amazon S3 (e.g., AES256, aws:kms)."
        },
        "KMSContext": {
          "$ref": "#/definitions/KMSContext",
          "description": "If the encryption type is aws:kms, this optional value can be used to specify the encryption context for the restore results."
        },
        "KMSKeyId": {
          "$ref": "#/definitions/SSEKMSKeyId",
          "description": "If the encryption type is aws:kms, this optional value specifies the AWS KMS key ID to use for encryption of job results."
        }
      },
      "required": [
        "EncryptionType"
      ],
      "type": "object"
    },
    "EncryptionConfiguration": {
      "description": "A container for information about the encryption-based configuration for replicas.",
      "properties": {
        "ReplicaKmsKeyID": {
          "$ref": "#/definitions/ReplicaKmsKeyID",
          "description": "The ID of the AWS KMS key for the AWS Region where the destination bucket resides. Amazon S3 uses this key to encrypt the replica object. "
        }
      },
      "type": "object"
    },
    "EndEvent": {
      "properties": {},
      "type": "object"
    },
    "Error": {
      "properties": {
        "Code": {
          "$ref": "#/definitions/Code"
        },
        "Key": {
          "$ref": "#/definitions/ObjectKey"
        },
        "Message": {
          "$ref": "#/definitions/Message"
        },
        "VersionId": {
          "$ref": "#/definitions/ObjectVersionId"
        }
      },
      "type": "object"
    },
    "ErrorDocument": {
      "properties": {
        "Key": {
          "$ref": "#/definitions/ObjectKey",
          "description": "The object key name to use when a 4XX class error occurs."
        }
      },
      "required": [
        "Key"
      ],
      "type": "object"
    },
    "Errors": {
      "items": {
        "$ref": "#/definitions/Error"
      },
      "type": "array",
      "xml": {
        "wrapped": false
      }
    },
    "Event": {
      "description": "The bucket event for which to send notifications.",
      "enum": [
        "s3:ReducedRedundancyLostObject",
        "s3:ObjectCreated:*",
        "s3:ObjectCreated:Put",
        "s3:ObjectCreated:Post",
        "s3:ObjectCreated:Copy",
        "s3:ObjectCreated:CompleteMultipartUpload",
        "s3:ObjectRemoved:*",
        "s3:ObjectRemoved:Delete",
        "s3:ObjectRemoved:DeleteMarkerCreated",
        "s3:ObjectRestore:Post",
        "s3:ObjectRestore:Completed"
      ],
      "type": "string"
    },
    "EventList": {
      "items": {
        "$ref": "#/definitions/Event"
      },
      "type": "array",
      "xml": {
        "wrapped": false
      }
    },
    "Expiration": {
      "type": "string"
    },
    "ExpirationStatus": {
      "enum": [
        "Enabled",
        "Disabled"
      ],
      "type": "string"
    },
    "ExpiredObjectDeleteMarker": {
      "type": "boolean"
    },
    "Expires": {
      "format": "date-time",
      "type": "string"
    },
    "ExposeHeader": {
      "type": "string"
    },
    "ExposeHeaders": {
      "items": {
        "$ref": "#/definitions/ExposeHeader"
      },
      "type": "array",
      "xml": {
        "wrapped": false
      }
    },
    "Expression": {
      "type": "string"
    },
    "ExpressionType": {
      "enum": [
        "SQL"
      ],
      "type": "string"
    },
    "FetchOwner": {
      "type": "boolean"
    },
    "FieldDelimiter": {
      "type": "string"
    },
    "FileHeaderInfo": {
      "enum": [
        "USE",
        "IGNORE",
        "NONE"
      ],
      "type": "string"
    },
    "FilterRule": {
      "description": "A container for a key value pair that defines the criteria for the filter rule.",
      "properties": {
        "Name": {
          "$ref": "#/definitions/FilterRuleName",
          "description": "The object key name prefix or suffix identifying one or more objects to which the filtering rule applies. The maximum prefix length is 1,024 characters. Overlapping prefixes and suffixes are not supported. For more information, see <a href=\"http://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html\">Configuring Event Notifications</a> in the <i>Amazon Simple Storage Service Developer Guide</i>."
        },
        "Value": {
          "$ref": "#/definitions/FilterRuleValue"
        }
      },
      "type": "object"
    },
    "FilterRuleList": {
      "description": "A list of containers for the key value pair that defines the criteria for the filter rule.",
      "items": {
        "$ref": "#/definitions/FilterRule"
      },
      "type": "array",
      "xml": {
        "wrapped": false
      }
    },
    "FilterRuleName": {
      "enum": [
        "prefix",
        "suffix"
      ],
      "type": "string"
    },
    "FilterRuleValue": {
      "type": "string"
    },
    "GetBucketAccelerateConfigurationOutput": {
      "properties": {
        "Status": {
          "$ref": "#/definitions/BucketAccelerateStatus",
          "description": "The accelerate configuration of the bucket."
        }
      },
      "type": "object"
    },
    "GetBucketAccelerateConfigurationRequest": {
      "properties": {},
      "type": "object"
    },
    "GetBucketAclOutput": {
      "properties": {
        "Grants": {
          "$ref": "#/definitions/Grants",
          "description": "A list of grants."
        },
        "Owner": {
          "$ref": "#/definitions/Owner"
        }
      },
      "type": "object"
    },
    "GetBucketAclRequest": {
      "properties": {},
      "type": "object"
    },
    "GetBucketAnalyticsConfigurationOutput": {
      "properties": {
        "AnalyticsConfiguration": {
          "$ref": "#/definitions/AnalyticsConfiguration",
          "description": "The configuration and any analyses for the analytics filter."
        }
      },
      "type": "object"
    },
    "GetBucketAnalyticsConfigurationRequest": {
      "properties": {},
      "type": "object"
    },
    "GetBucketCorsOutput": {
      "example": {
        "CORSRules": [
          {
            "AllowedHeaders": [
              "Authorization"
            ],
            "AllowedMethods": [
              "GET"
            ],
            "AllowedOrigins": [
              "*"
            ],
            "MaxAgeSeconds": 3000
          }
        ]
      },
      "properties": {
        "CORSRules": {
          "$ref": "#/definitions/CORSRules"
        }
      },
      "type": "object"
    },
    "GetBucketCorsRequest": {
      "example": {
        "Bucket": "examplebucket"
      },
      "properties": {},
      "type": "object"
    },
    "GetBucketEncryptionOutput": {
      "properties": {
        "ServerSideEncryptionConfiguration": {
          "$ref": "#/definitions/ServerSideEncryptionConfiguration"
        }
      },
      "type": "object"
    },
    "GetBucketEncryptionRequest": {
      "properties": {},
      "type": "object"
    },
    "GetBucketInventoryConfigurationOutput": {
      "properties": {
        "InventoryConfiguration": {
          "$ref": "#/definitions/InventoryConfiguration",
          "description": "Specifies the inventory configuration."
        }
      },
      "type": "object"
    },
    "GetBucketInventoryConfigurationRequest": {
      "properties": {},
      "type": "object"
    },
    "GetBucketLifecycleConfigurationOutput": {
      "example": {
        "Rules": [
          {
            "ID": "Rule for TaxDocs/",
            "Prefix": "TaxDocs",
            "Status": "Enabled",
            "Transitions": [
              {
                "Days": 365,
                "StorageClass": "STANDARD_IA"
              }
            ]
          }
        ]
      },
      "properties": {
        "Rules": {
          "$ref": "#/definitions/LifecycleRules"
        }
      },
      "type": "object"
    },
    "GetBucketLifecycleConfigurationRequest": {
      "example": {
        "Bucket": "examplebucket"
      },
      "properties": {},
      "type": "object"
    },
    "GetBucketLifecycleOutput": {
      "example": {
        "Rules": [
          {
            "Expiration": {
              "Days": 1
            },
            "ID": "delete logs",
            "Prefix": "123/",
            "Status": "Enabled"
          }
        ]
      },
      "properties": {
        "Rules": {
          "$ref": "#/definitions/Rules"
        }
      },
      "type": "object"
    },
    "GetBucketLifecycleRequest": {
      "example": {
        "Bucket": "acl1"
      },
      "properties": {},
      "type": "object"
    },
    "GetBucketLocationOutput": {
      "example": {
        "LocationConstraint": "us-west-2"
      },
      "properties": {
        "LocationConstraint": {
          "$ref": "#/definitions/BucketLocationConstraint"
        }
      },
      "type": "object"
    },
    "GetBucketLocationRequest": {
      "example": {
        "Bucket": "examplebucket"
      },
      "properties": {},
      "type": "object"
    },
    "GetBucketLoggingOutput": {
      "properties": {
        "LoggingEnabled": {
          "$ref": "#/definitions/LoggingEnabled"
        }
      },
      "type": "object"
    },
    "GetBucketLoggingRequest": {
      "properties": {},
      "type": "object"
    },
    "GetBucketMetricsConfigurationOutput": {
      "properties": {
        "MetricsConfiguration": {
          "$ref": "#/definitions/MetricsConfiguration",
          "description": "Specifies the metrics configuration."
        }
      },
      "type": "object"
    },
    "GetBucketMetricsConfigurationRequest": {
      "properties": {},
      "type": "object"
    },
    "GetBucketNotificationConfigurationRequest": {
      "example": {
        "Bucket": "examplebucket"
      },
      "properties": {},
      "type": "object"
    },
    "GetBucketPolicyOutput": {
      "example": {
        "Policy": "{\"Version\":\"2008-10-17\",\"Id\":\"LogPolicy\",\"Statement\":[{\"Sid\":\"Enables the log delivery group to publish logs to your bucket \",\"Effect\":\"Allow\",\"Principal\":{\"AWS\":\"111122223333\"},\"Action\":[\"s3:GetBucketAcl\",\"s3:GetObjectAcl\",\"s3:PutObject\"],\"Resource\":[\"arn:aws:s3:::policytest1/*\",\"arn:aws:s3:::policytest1\"]}]}"
      },
      "properties": {
        "Policy": {
          "$ref": "#/definitions/Policy",
          "description": "The bucket policy as a JSON document."
        }
      },
      "type": "object"
    },
    "GetBucketPolicyRequest": {
      "example": {
        "Bucket": "examplebucket"
      },
      "properties": {},
      "type": "object"
    },
    "GetBucketPolicyStatusOutput": {
      "properties": {
        "PolicyStatus": {
          "$ref": "#/definitions/PolicyStatus",
          "description": "The policy status for the specified bucket."
        }
      },
      "type": "object"
    },
    "GetBucketPolicyStatusRequest": {
      "properties": {},
      "type": "object"
    },
    "GetBucketReplicationOutput": {
      "example": {
        "ReplicationConfiguration": {
          "Role": "arn:aws:iam::acct-id:role/example-role",
          "Rules": [
            {
              "Destination": {
                "Bucket": "arn:aws:s3:::destination-bucket"
              },
              "ID": "MWIwNTkwZmItMTE3MS00ZTc3LWJkZDEtNzRmODQwYzc1OTQy",
              "Prefix": "Tax",
              "Status": "Enabled"
            }
          ]
        }
      },
      "properties": {
        "ReplicationConfiguration": {
          "$ref": "#/definitions/ReplicationConfiguration"
        }
      },
      "type": "object"
    },
    "GetBucketReplicationRequest": {
      "example": {
        "Bucket": "examplebucket"
      },
      "properties": {},
      "type": "object"
    },
    "GetBucketRequestPaymentOutput": {
      "example": {
        "Payer": "BucketOwner"
      },
      "properties": {
        "Payer": {
          "$ref": "#/definitions/Payer",
          "description": "Specifies who pays for the download and request fees."
        }
      },
      "type": "object"
    },
    "GetBucketRequestPaymentRequest": {
      "example": {
        "Bucket": "examplebucket"
      },
      "properties": {},
      "type": "object"
    },
    "GetBucketTaggingOutput": {
      "example": {
        "TagSet": [
          {
            "Key": "key1",
            "Value": "value1"
          },
          {
            "Key": "key2",
            "Value": "value2"
          }
        ]
      },
      "properties": {
        "TagSet": {
          "$ref": "#/definitions/TagSet"
        }
      },
      "required": [
        "TagSet"
      ],
      "type": "object"
    },
    "GetBucketTaggingRequest": {
      "example": {
        "Bucket": "examplebucket"
      },
      "properties": {},
      "type": "object"
    },
    "GetBucketVersioningOutput": {
      "example": {
        "MFADelete": "Disabled",
        "Status": "Enabled"
      },
      "properties": {
        "MFADelete": {
          "$ref": "#/definitions/MFADeleteStatus",
          "description": "Specifies whether MFA delete is enabled in the bucket versioning configuration. This element is only returned if the bucket has been configured with MFA delete. If the bucket has never been so configured, this element is not returned."
        },
        "Status": {
          "$ref": "#/definitions/BucketVersioningStatus",
          "description": "The versioning state of the bucket."
        }
      },
      "type": "object"
    },
    "GetBucketVersioningRequest": {
      "example": {
        "Bucket": "examplebucket"
      },
      "properties": {},
      "type": "object"
    },
    "GetBucketWebsiteOutput": {
      "example": {
        "ErrorDocument": {
          "Key": "error.html"
        },
        "IndexDocument": {
          "Suffix": "index.html"
        }
      },
      "properties": {
        "ErrorDocument": {
          "$ref": "#/definitions/ErrorDocument"
        },
        "IndexDocument": {
          "$ref": "#/definitions/IndexDocument"
        },
        "RedirectAllRequestsTo": {
          "$ref": "#/definitions/RedirectAllRequestsTo"
        },
        "RoutingRules": {
          "$ref": "#/definitions/RoutingRules"
        }
      },
      "type": "object"
    },
    "GetBucketWebsiteRequest": {
      "example": {
        "Bucket": "examplebucket"
      },
      "properties": {},
      "type": "object"
    },
    "GetObjectAclOutput": {
      "example": {
        "Grants": [
          {
            "Grantee": {
              "DisplayName": "owner-display-name",
              "ID": "examplee7a2f25102679df27bb0ae12b3f85be6f290b936c4393484be31bebcc",
              "Type": "CanonicalUser"
            },
            "Permission": "WRITE"
          },
          {
            "Grantee": {
              "DisplayName": "owner-display-name",
              "ID": "examplee7a2f25102679df27bb0ae12b3f85be6f290b936c4393484be31bebcc",
              "Type": "CanonicalUser"
            },
            "Permission": "WRITE_ACP"
          },
          {
            "Grantee": {
              "DisplayName": "owner-display-name",
              "ID": "examplee7a2f25102679df27bb0ae12b3f85be6f290b936c4393484be31bebcc",
              "Type": "CanonicalUser"
            },
            "Permission": "READ"
          },
          {
            "Grantee": {
              "DisplayName": "owner-display-name",
              "ID": "852b113eexamplee7a2f25102679df27bb0ae12b3f85be6f290b936c4393484be31bebcc7a2f25102679df27bb0ae12b3f85be6f290b936c4393484be31bebcc",
              "Type": "CanonicalUser"
            },
            "Permission": "READ_ACP"
          }
        ],
        "Owner": {
          "DisplayName": "owner-display-name",
          "ID": "examplee7a2f25102679df27bb0ae12b3f85be6f290b936c4393484be31bebcc"
        }
      },
      "properties": {
        "Grants": {
          "$ref": "#/definitions/Grants",
          "description": "A list of grants."
        },
        "Owner": {
          "$ref": "#/definitions/Owner"
        }
      },
      "type": "object"
    },
    "GetObjectAclRequest": {
      "example": {
        "Bucket": "examplebucket",
        "Key": "HappyFace.jpg"
      },
      "properties": {},
      "type": "object"
    },
    "GetObjectLegalHoldOutput": {
      "properties": {
        "LegalHold": {
          "$ref": "#/definitions/ObjectLockLegalHold",
          "description": "The current Legal Hold status for the specified object."
        }
      },
      "type": "object"
    },
    "GetObjectLegalHoldRequest": {
      "properties": {},
      "type": "object"
    },
    "GetObjectLockConfigurationOutput": {
      "properties": {
        "ObjectLockConfiguration": {
          "$ref": "#/definitions/ObjectLockConfiguration",
          "description": "The specified bucket's Object Lock configuration."
        }
      },
      "type": "object"
    },
    "GetObjectLockConfigurationRequest": {
      "properties": {},
      "type": "object"
    },
    "GetObjectOutput": {
      "example": {
        "AcceptRanges": "bytes",
        "ContentLength": "10",
        "ContentRange": "bytes 0-9/43",
        "ContentType": "text/plain",
        "ETag": "\"0d94420ffd0bc68cd3d152506b97a9cc\"",
        "LastModified": "Thu, 09 Oct 2014 22:57:28 GMT",
        "Metadata": {},
        "VersionId": "null"
      },
      "properties": {
        "Body": {
          "$ref": "#/definitions/Body",
          "description": "Object data."
        },
        "Metadata": {
          "$ref": "#/definitions/Metadata",
          "description": "A map of metadata to store with the object in S3."
        }
      },
      "type": "object"
    },
    "GetObjectRequest": {
      "example": {
        "Bucket": "examplebucket",
        "Key": "SampleFile.txt",
        "Range": "bytes=0-9"
      },
      "properties": {},
      "type": "object"
    },
    "GetObjectRetentionOutput": {
      "properties": {
        "Retention": {
          "$ref": "#/definitions/ObjectLockRetention",
          "description": "The container element for an object's retention settings."
        }
      },
      "type": "object"
    },
    "GetObjectRetentionRequest": {
      "properties": {},
      "type": "object"
    },
    "GetObjectTaggingOutput": {
      "example": {
        "TagSet": [
          {
            "Key": "Key4",
            "Value": "Value4"
          },
          {
            "Key": "Key3",
            "Value": "Value3"
          }
        ],
        "VersionId": "null"
      },
      "properties": {
        "TagSet": {
          "$ref": "#/definitions/TagSet"
        }
      },
      "required": [
        "TagSet"
      ],
      "type": "object"
    },
    "GetObjectTaggingRequest": {
      "example": {
        "Bucket": "examplebucket",
        "Key": "HappyFace.jpg"
      },
      "properties": {},
      "type": "object"
    },
    "GetObjectTorrentOutput": {
      "example": {},
      "properties": {
        "Body": {
          "$ref": "#/definitions/Body"
        }
      },
      "type": "object"
    },
    "GetObjectTorrentRequest": {
      "example": {
        "Bucket": "examplebucket",
        "Key": "HappyFace.jpg"
      },
      "properties": {},
      "type": "object"
    },
    "GetPublicAccessBlockOutput": {
      "properties": {
        "PublicAccessBlockConfiguration": {
          "$ref": "#/definitions/PublicAccessBlockConfiguration",
          "description": "The <code>PublicAccessBlock</code> configuration currently in effect for this Amazon S3 bucket."
        }
      },
      "type": "object"
    },
    "GetPublicAccessBlockRequest": {
      "properties": {},
      "type": "object"
    },
    "GlacierJobParameters": {
      "properties": {
        "Tier": {
          "$ref": "#/definitions/Tier",
          "description": "Glacier retrieval tier at which the restore will be processed."
        }
      },
      "required": [
        "Tier"
      ],
      "type": "object"
    },
    "Grant": {
      "properties": {
        "Grantee": {
          "$ref": "#/definitions/Grantee"
        },
        "Permission": {
          "$ref": "#/definitions/Permission",
          "description": "Specifies the permission given to the grantee."
        }
      },
      "type": "object"
    },
    "GrantFullControl": {
      "type": "string"
    },
    "GrantRead": {
      "type": "string"
    },
    "GrantReadACP": {
      "type": "string"
    },
    "GrantWrite": {
      "type": "string"
    },
    "GrantWriteACP": {
      "type": "string"
    },
    "Grantee": {
      "properties": {
        "DisplayName": {
          "$ref": "#/definitions/DisplayName",
          "description": "Screen name of the grantee."
        },
        "EmailAddress": {
          "$ref": "#/definitions/EmailAddress",
          "description": "Email address of the grantee."
        },
        "ID": {
          "$ref": "#/definitions/ID",
          "description": "The canonical user ID of the grantee."
        },
        "Type": {
          "$ref": "#/definitions/Type",
          "description": "Type of grantee"
        },
        "URI": {
          "$ref": "#/definitions/URI",
          "description": "URI of the grantee group."
        }
      },
      "required": [
        "Type"
      ],
      "type": "object",
      "xml": {
        "attribute": true,
        "namespace": "http://www.w3.org/2001/XMLSchema-instance"
      }
    },
    "Grants": {
      "items": {
        "$ref": "#/definitions/Grant"
      },
      "type": "array"
    },
    "HeadBucketRequest": {
      "example": {
        "Bucket": "acl1"
      },
      "properties": {},
      "type": "object"
    },
    "HeadObjectOutput": {
      "example": {
        "AcceptRanges": "bytes",
        "ContentLength": "3191",
        "ContentType": "image/jpeg",
        "ETag": "\"6805f2cfc46c0f04559748bb039d69ae\"",
        "LastModified": "Thu, 15 Dec 2016 01:19:41 GMT",
        "Metadata": {},
        "VersionId": "null"
      },
      "properties": {
        "Metadata": {
          "$ref": "#/definitions/Metadata",
          "description": "A map of metadata to store with the object in S3."
        }
      },
      "type": "object"
    },
    "HeadObjectRequest": {
      "example": {
        "Bucket": "examplebucket",
        "Key": "HappyFace.jpg"
      },
      "properties": {},
      "type": "object"
    },
    "HostName": {
      "type": "string"
    },
    "HttpErrorCodeReturnedEquals": {
      "type": "string"
    },
    "HttpRedirectCode": {
      "type": "string"
    },
    "ID": {
      "type": "string"
    },
    "IfMatch": {
      "type": "string"
    },
    "IfModifiedSince": {
      "format": "date-time",
      "type": "string"
    },
    "IfNoneMatch": {
      "type": "string"
    },
    "IfUnmodifiedSince": {
      "format": "date-time",
      "type": "string"
    },
    "IndexDocument": {
      "properties": {
        "Suffix": {
          "$ref": "#/definitions/Suffix",
          "description": "A suffix that is appended to a request that is for a directory on the website endpoint (e.g. if the suffix is index.html and you make a request to samplebucket/images/ the data that is returned will be for the object with the key name images/index.html) The suffix must not be empty and must not include a slash character."
        }
      },
      "required": [
        "Suffix"
      ],
      "type": "object"
    },
    "Initiated": {
      "format": "date-time",
      "type": "string"
    },
    "Initiator": {
      "properties": {
        "DisplayName": {
          "$ref": "#/definitions/DisplayName",
          "description": "Name of the Principal."
        },
        "ID": {
          "$ref": "#/definitions/ID",
          "description": "If the principal is an AWS account, it provides the Canonical User ID. If the principal is an IAM User, it provides a user ARN value."
        }
      },
      "type": "object"
    },
    "InputSerialization": {
      "description": "Describes the serialization format of the object.",
      "properties": {
        "CSV": {
          "$ref": "#/definitions/CSVInput",
          "description": "Describes the serialization of a CSV-encoded object."
        },
        "CompressionType": {
          "$ref": "#/definitions/CompressionType",
          "description": "Specifies object's compression format. Valid values: NONE, GZIP, BZIP2. Default Value: NONE."
        },
        "JSON": {
          "$ref": "#/definitions/JSONInput",
          "description": "Specifies JSON as object's input serialization format."
        },
        "Parquet": {
          "$ref": "#/definitions/ParquetInput",
          "description": "Specifies Parquet as object's input serialization format."
        }
      },
      "type": "object"
    },
    "InventoryConfiguration": {
      "properties": {
        "Destination": {
          "$ref": "#/definitions/InventoryDestination",
          "description": "Contains information about where to publish the inventory results."
        },
        "Filter": {
          "$ref": "#/definitions/InventoryFilter",
          "description": "Specifies an inventory filter. The inventory only includes objects that meet the filter's criteria."
        },
        "Id": {
          "$ref": "#/definitions/InventoryId",
          "description": "The ID used to identify the inventory configuration."
        },
        "IncludedObjectVersions": {
          "$ref": "#/definitions/InventoryIncludedObjectVersions",
          "description": "Specifies which object version(s) to included in the inventory results."
        },
        "IsEnabled": {
          "$ref": "#/definitions/IsEnabled",
          "description": "Specifies whether the inventory is enabled or disabled."
        },
        "OptionalFields": {
          "$ref": "#/definitions/InventoryOptionalFields",
          "description": "Contains the optional fields that are included in the inventory results."
        },
        "Schedule": {
          "$ref": "#/definitions/InventorySchedule",
          "description": "Specifies the schedule for generating inventory results."
        }
      },
      "required": [
        "Destination",
        "IsEnabled",
        "Id",
        "IncludedObjectVersions",
        "Schedule"
      ],
      "type": "object"
    },
    "InventoryConfigurationList": {
      "items": {
        "$ref": "#/definitions/InventoryConfiguration"
      },
      "type": "array",
      "xml": {
        "wrapped": false
      }
    },
    "InventoryDestination": {
      "properties": {
        "S3BucketDestination": {
          "$ref": "#/definitions/InventoryS3BucketDestination",
          "description": "Contains the bucket name, file format, bucket owner (optional), and prefix (optional) where inventory results are published."
        }
      },
      "required": [
        "S3BucketDestination"
      ],
      "type": "object"
    },
    "InventoryEncryption": {
      "description": "Contains the type of server-side encryption used to encrypt the inventory results.",
      "properties": {
        "SSEKMS": {
          "$ref": "#/definitions/SSEKMS",
          "description": "Specifies the use of SSE-KMS to encrypt delivered Inventory reports."
        },
        "SSES3": {
          "$ref": "#/definitions/SSES3",
          "description": "Specifies the use of SSE-S3 to encrypt delivered Inventory reports."
        }
      },
      "type": "object"
    },
    "InventoryFilter": {
      "properties": {
        "Prefix": {
          "$ref": "#/definitions/Prefix",
          "description": "The prefix that an object must have to be included in the inventory results."
        }
      },
      "required": [
        "Prefix"
      ],
      "type": "object"
    },
    "InventoryFormat": {
      "enum": [
        "CSV",
        "ORC",
        "Parquet"
      ],
      "type": "string"
    },
    "InventoryFrequency": {
      "enum": [
        "Daily",
        "Weekly"
      ],
      "type": "string"
    },
    "InventoryId": {
      "type": "string"
    },
    "InventoryIncludedObjectVersions": {
      "enum": [
        "All",
        "Current"
      ],
      "type": "string"
    },
    "InventoryOptionalField": {
      "enum": [
        "Size",
        "LastModifiedDate",
        "StorageClass",
        "ETag",
        "IsMultipartUploaded",
        "ReplicationStatus",
        "EncryptionStatus",
        "ObjectLockRetainUntilDate",
        "ObjectLockMode",
        "ObjectLockLegalHoldStatus"
      ],
      "type": "string"
    },
    "InventoryOptionalFields": {
      "items": {
        "$ref": "#/definitions/InventoryOptionalField"
      },
      "type": "array"
    },
    "InventoryS3BucketDestination": {
      "properties": {
        "AccountId": {
          "$ref": "#/definitions/AccountId",
          "description": "The ID of the account that owns the destination bucket."
        },
        "Bucket": {
          "$ref": "#/definitions/BucketName",
          "description": "The Amazon resource name (ARN) of the bucket where inventory results will be published."
        },
        "Encryption": {
          "$ref": "#/definitions/InventoryEncryption",
          "description": "Contains the type of server-side encryption used to encrypt the inventory results."
        },
        "Format": {
          "$ref": "#/definitions/InventoryFormat",
          "description": "Specifies the output format of the inventory results."
        },
        "Prefix": {
          "$ref": "#/definitions/Prefix",
          "description": "The prefix that is prepended to all inventory results."
        }
      },
      "required": [
        "Bucket",
        "Format"
      ],
      "type": "object"
    },
    "InventorySchedule": {
      "properties": {
        "Frequency": {
          "$ref": "#/definitions/InventoryFrequency",
          "description": "Specifies how frequently inventory results are produced."
        }
      },
      "required": [
        "Frequency"
      ],
      "type": "object"
    },
    "IsEnabled": {
      "type": "boolean"
    },
    "IsLatest": {
      "type": "boolean"
    },
    "IsPublic": {
      "type": "boolean"
    },
    "IsTruncated": {
      "type": "boolean"
    },
    "JSONInput": {
      "properties": {
        "Type": {
          "$ref": "#/definitions/JSONType",
          "description": "The type of JSON. Valid values: Document, Lines."
        }
      },
      "type": "object"
    },
    "JSONOutput": {
      "properties": {
        "RecordDelimiter": {
          "$ref": "#/definitions/RecordDelimiter",
          "description": "The value used to separate individual records in the output."
        }
      },
      "type": "object"
    },
    "JSONType": {
      "enum": [
        "DOCUMENT",
        "LINES"
      ],
      "type": "string"
    },
    "KMSContext": {
      "type": "string"
    },
    "KeyCount": {
      "type": "integer"
    },
    "KeyMarker": {
      "type": "string"
    },
    "KeyPrefixEquals": {
      "type": "string"
    },
    "LambdaFunctionArn": {
      "type": "string"
    },
    "LambdaFunctionConfiguration": {
      "description": "A container for specifying the configuration for AWS Lambda notifications.",
      "properties": {
        "Events": {
          "$ref": "#/definitions/EventList"
        },
        "Filter": {
          "$ref": "#/definitions/NotificationConfigurationFilter"
        },
        "Id": {
          "$ref": "#/definitions/NotificationId"
        },
        "LambdaFunctionArn": {
          "$ref": "#/definitions/LambdaFunctionArn",
          "description": "The Amazon Resource Name (ARN) of the Lambda cloud function that Amazon S3 can invoke when it detects events of the specified type."
        }
      },
      "required": [
        "LambdaFunctionArn",
        "Events"
      ],
      "type": "object"
    },
    "LambdaFunctionConfigurationList": {
      "items": {
        "$ref": "#/definitions/LambdaFunctionConfiguration"
      },
      "type": "array",
      "xml": {
        "wrapped": false
      }
    },
    "LastModified": {
      "format": "date-time",
      "type": "string"
    },
    "LifecycleConfiguration": {
      "properties": {
        "Rules": {
          "$ref": "#/definitions/Rules"
        }
      },
      "required": [
        "Rules"
      ],
      "type": "object"
    },
    "LifecycleExpiration": {
      "properties": {
        "Date": {
          "$ref": "#/definitions/Date",
          "description": "Indicates at what date the object is to be moved or deleted. Should be in GMT ISO 8601 Format."
        },
        "Days": {
          "$ref": "#/definitions/Days",
          "description": "Indicates the lifetime, in days, of the objects that are subject to the rule. The value must be a non-zero positive integer."
        },
        "ExpiredObjectDeleteMarker": {
          "$ref": "#/definitions/ExpiredObjectDeleteMarker",
          "description": "Indicates whether Amazon S3 will remove a delete marker with no noncurrent versions. If set to true, the delete marker will be expired; if set to false the policy takes no action. This cannot be specified with Days or Date in a Lifecycle Expiration Policy."
        }
      },
      "type": "object"
    },
    "LifecycleRule": {
      "properties": {
        "AbortIncompleteMultipartUpload": {
          "$ref": "#/definitions/AbortIncompleteMultipartUpload"
        },
        "Expiration": {
          "$ref": "#/definitions/LifecycleExpiration"
        },
        "Filter": {
          "$ref": "#/definitions/LifecycleRuleFilter"
        },
        "ID": {
          "$ref": "#/definitions/ID",
          "description": "Unique identifier for the rule. The value cannot be longer than 255 characters."
        },
        "NoncurrentVersionExpiration": {
          "$ref": "#/definitions/NoncurrentVersionExpiration"
        },
        "NoncurrentVersionTransitions": {
          "$ref": "#/definitions/NoncurrentVersionTransitionList"
        },
        "Prefix": {
          "$ref": "#/definitions/Prefix",
          "description": "Prefix identifying one or more objects to which the rule applies. This is deprecated; use Filter instead."
        },
        "Status": {
          "$ref": "#/definitions/ExpirationStatus",
          "description": "If 'Enabled', the rule is currently being applied. If 'Disabled', the rule is not currently being applied."
        },
        "Transitions": {
          "$ref": "#/definitions/TransitionList"
        }
      },
      "required": [
        "Status"
      ],
      "type": "object"
    },
    "LifecycleRuleAndOperator": {
      "description": "This is used in a Lifecycle Rule Filter to apply a logical AND to two or more predicates. The Lifecycle Rule will apply to any object matching all of the predicates configured inside the And operator.",
      "properties": {
        "Prefix": {
          "$ref": "#/definitions/Prefix"
        },
        "Tags": {
          "$ref": "#/definitions/TagSet",
          "description": "All of these tags must exist in the object's tag set in order for the rule to apply."
        }
      },
      "type": "object",
      "xml": {
        "wrapped": false
      }
    },
    "LifecycleRuleFilter": {
      "description": "The Filter is used to identify objects that a Lifecycle Rule applies to. A Filter must have exactly one of Prefix, Tag, or And specified.",
      "properties": {
        "And": {
          "$ref": "#/definitions/LifecycleRuleAndOperator"
        },
        "Prefix": {
          "$ref": "#/definitions/Prefix",
          "description": "Prefix identifying one or more objects to which the rule applies."
        },
        "Tag": {
          "$ref": "#/definitions/Tag",
          "description": "This tag must exist in the object's tag set in order for the rule to apply."
        }
      },
      "type": "object"
    },
    "LifecycleRules": {
      "items": {
        "$ref": "#/definitions/LifecycleRule"
      },
      "type": "array",
      "xml": {
        "wrapped": false
      }
    },
    "ListBucketAnalyticsConfigurationsOutput": {
      "properties": {
        "AnalyticsConfigurationList": {
          "$ref": "#/definitions/AnalyticsConfigurationList",
          "description": "The list of analytics configurations for a bucket."
        },
        "ContinuationToken": {
          "$ref": "#/definitions/Token",
          "description": "The ContinuationToken that represents where this request began."
        },
        "IsTruncated": {
          "$ref": "#/definitions/IsTruncated",
          "description": "Indicates whether the returned list of analytics configurations is complete. A value of true indicates that the list is not complete and the NextContinuationToken will be provided for a subsequent request."
        },
        "NextContinuationToken": {
          "$ref": "#/definitions/NextToken",
          "description": "NextContinuationToken is sent when isTruncated is true, which indicates that there are more analytics configurations to list. The next request must include this NextContinuationToken. The token is obfuscated and is not a usable value."
        }
      },
      "type": "object"
    },
    "ListBucketAnalyticsConfigurationsRequest": {
      "properties": {},
      "type": "object"
    },
    "ListBucketInventoryConfigurationsOutput": {
      "properties": {
        "ContinuationToken": {
          "$ref": "#/definitions/Token",
          "description": "If sent in the request, the marker that is used as a starting point for this inventory configuration list response."
        },
        "InventoryConfigurationList": {
          "$ref": "#/definitions/InventoryConfigurationList",
          "description": "The list of inventory configurations for a bucket."
        },
        "IsTruncated": {
          "$ref": "#/definitions/IsTruncated",
          "description": "Indicates whether the returned list of inventory configurations is truncated in this response. A value of true indicates that the list is truncated."
        },
        "NextContinuationToken": {
          "$ref": "#/definitions/NextToken",
          "description": "The marker used to continue this inventory configuration listing. Use the NextContinuationToken from this response to continue the listing in a subsequent request. The continuation token is an opaque value that Amazon S3 understands."
        }
      },
      "type": "object"
    },
    "ListBucketInventoryConfigurationsRequest": {
      "properties": {},
      "type": "object"
    },
    "ListBucketMetricsConfigurationsOutput": {
      "properties": {
        "ContinuationToken": {
          "$ref": "#/definitions/Token",
          "description": "The marker that is used as a starting point for this metrics configuration list response. This value is present if it was sent in the request."
        },
        "IsTruncated": {
          "$ref": "#/definitions/IsTruncated",
          "description": "Indicates whether the returned list of metrics configurations is complete. A value of true indicates that the list is not complete and the NextContinuationToken will be provided for a subsequent request."
        },
        "MetricsConfigurationList": {
          "$ref": "#/definitions/MetricsConfigurationList",
          "description": "The list of metrics configurations for a bucket."
        },
        "NextContinuationToken": {
          "$ref": "#/definitions/NextToken",
          "description": "The marker used to continue a metrics configuration listing that has been truncated. Use the NextContinuationToken from a previously truncated list response to continue the listing. The continuation token is an opaque value that Amazon S3 understands."
        }
      },
      "type": "object"
    },
    "ListBucketMetricsConfigurationsRequest": {
      "properties": {},
      "type": "object"
    },
    "ListBucketsOutput": {
      "example": {
        "Buckets": [
          {
            "CreationDate": "2012-02-15T21: 03: 02.000Z",
            "Name": "examplebucket"
          },
          {
            "CreationDate": "2011-07-24T19: 33: 50.000Z",
            "Name": "examplebucket2"
          },
          {
            "CreationDate": "2010-12-17T00: 56: 49.000Z",
            "Name": "examplebucket3"
          }
        ],
        "Owner": {
          "DisplayName": "own-display-name",
          "ID": "examplee7a2f25102679df27bb0ae12b3f85be6f290b936c4393484be31"
        }
      },
      "properties": {
        "Buckets": {
          "$ref": "#/definitions/Buckets"
        },
        "Owner": {
          "$ref": "#/definitions/Owner"
        }
      },
      "type": "object"
    },
    "ListMultipartUploadsOutput": {
      "example": {
        "Bucket": "acl1",
        "IsTruncated": true,
        "KeyMarker": "",
        "MaxUploads": "2",
        "NextKeyMarker": "someobjectkey",
        "NextUploadIdMarker": "examplelo91lv1iwvWpvCiJWugw2xXLPAD7Z8cJyX9.WiIRgNrdG6Ldsn.9FtS63TCl1Uf5faTB.1U5Ckcbmdw--",
        "UploadIdMarker": "",
        "Uploads": [
          {
            "Initiated": "2014-05-01T05:40:58.000Z",
            "Initiator": {
              "DisplayName": "ownder-display-name",
              "ID": "examplee7a2f25102679df27bb0ae12b3f85be6f290b936c4393484be31bebcc"
            },
            "Key": "JavaFile",
            "Owner": {
              "DisplayName": "mohanataws",
              "ID": "852b113e7a2f25102679df27bb0ae12b3f85be6f290b936c4393484be31bebcc"
            },
            "StorageClass": "STANDARD",
            "UploadId": "gZ30jIqlUa.CInXklLQtSMJITdUnoZ1Y5GACB5UckOtspm5zbDMCkPF_qkfZzMiFZ6dksmcnqxJyIBvQMG9X9Q--"
          },
          {
            "Initiated": "2014-05-01T05:41:27.000Z",
            "Initiator": {
              "DisplayName": "ownder-display-name",
              "ID": "examplee7a2f25102679df27bb0ae12b3f85be6f290b936c4393484be31bebcc"
            },
            "Key": "JavaFile",
            "Owner": {
              "DisplayName": "ownder-display-name",
              "ID": "examplee7a2f25102679df27bb0ae12b3f85be6f290b936c4393484be31bebcc"
            },
            "StorageClass": "STANDARD",
            "UploadId": "b7tZSqIlo91lv1iwvWpvCiJWugw2xXLPAD7Z8cJyX9.WiIRgNrdG6Ldsn.9FtS63TCl1Uf5faTB.1U5Ckcbmdw--"
          }
        ]
      },
      "properties": {
        "Bucket": {
          "$ref": "#/definitions/BucketName",
          "description": "Name of the bucket to which the multipart upload was initiated."
        },
        "CommonPrefixes": {
          "$ref": "#/definitions/CommonPrefixList"
        },
        "Delimiter": {
          "$ref": "#/definitions/Delimiter"
        },
        "EncodingType": {
          "$ref": "#/definitions/EncodingType",
          "description": "Encoding type used by Amazon S3 to encode object keys in the response."
        },
        "IsTruncated": {
          "$ref": "#/definitions/IsTruncated",
          "description": "Indicates whether the returned list of multipart uploads is truncated. A value of true indicates that the list was truncated. The list can be truncated if the number of multipart uploads exceeds the limit allowed or specified by max uploads."
        },
        "KeyMarker": {
          "$ref": "#/definitions/KeyMarker",
          "description": "The key at or after which the listing began."
        },
        "MaxUploads": {
          "$ref": "#/definitions/MaxUploads",
          "description": "Maximum number of multipart uploads that could have been included in the response."
        },
        "NextKeyMarker": {
          "$ref": "#/definitions/NextKeyMarker",
          "description": "When a list is truncated, this element specifies the value that should be used for the key-marker request parameter in a subsequent request."
        },
        "NextUploadIdMarker": {
          "$ref": "#/definitions/NextUploadIdMarker",
          "description": "When a list is truncated, this element specifies the value that should be used for the upload-id-marker request parameter in a subsequent request."
        },
        "Prefix": {
          "$ref": "#/definitions/Prefix",
          "description": "When a prefix is provided in the request, this field contains the specified prefix. The result contains only keys starting with the specified prefix."
        },
        "UploadIdMarker": {
          "$ref": "#/definitions/UploadIdMarker",
          "description": "Upload ID after which listing began."
        },
        "Uploads": {
          "$ref": "#/definitions/MultipartUploadList"
        }
      },
      "type": "object"
    },
    "ListMultipartUploadsRequest": {
      "example": {
        "Bucket": "examplebucket",
        "KeyMarker": "nextkeyfrompreviousresponse",
        "MaxUploads": "2",
        "UploadIdMarker": "valuefrompreviousresponse"
      },
      "properties": {},
      "type": "object"
    },
    "ListObjectVersionsOutput": {
      "example": {
        "Versions": [
          {
            "ETag": "\"6805f2cfc46c0f04559748bb039d69ae\"",
            "IsLatest": true,
            "Key": "HappyFace.jpg",
            "LastModified": "2016-12-15T01:19:41.000Z",
            "Owner": {
              "DisplayName": "owner-display-name",
              "ID": "examplee7a2f25102679df27bb0ae12b3f85be6f290b936c4393484be31bebcc"
            },
            "Size": 3191,
            "StorageClass": "STANDARD",
            "VersionId": "null"
          },
          {
            "ETag": "\"6805f2cfc46c0f04559748bb039d69ae\"",
            "IsLatest": false,
            "Key": "HappyFace.jpg",
            "LastModified": "2016-12-13T00:58:26.000Z",
            "Owner": {
              "DisplayName": "owner-display-name",
              "ID": "examplee7a2f25102679df27bb0ae12b3f85be6f290b936c4393484be31bebcc"
            },
            "Size": 3191,
            "StorageClass": "STANDARD",
            "VersionId": "PHtexPGjH2y.zBgT8LmB7wwLI2mpbz.k"
          }
        ]
      },
      "properties": {
        "CommonPrefixes": {
          "$ref": "#/definitions/CommonPrefixList"
        },
        "DeleteMarkers": {
          "$ref": "#/definitions/DeleteMarkers"
        },
        "Delimiter": {
          "$ref": "#/definitions/Delimiter"
        },
        "EncodingType": {
          "$ref": "#/definitions/EncodingType",
          "description": "Encoding type used by Amazon S3 to encode object keys in the response."
        },
        "IsTruncated": {
          "$ref": "#/definitions/IsTruncated",
          "description": "A flag that indicates whether or not Amazon S3 returned all of the results that satisfied the search criteria. If your results were truncated, you can make a follow-up paginated request using the NextKeyMarker and NextVersionIdMarker response parameters as a starting place in another request to return the rest of the results."
        },
        "KeyMarker": {
          "$ref": "#/definitions/KeyMarker",
          "description": "Marks the last Key returned in a truncated response."
        },
        "MaxKeys": {
          "$ref": "#/definitions/MaxKeys"
        },
        "Name": {
          "$ref": "#/definitions/BucketName"
        },
        "NextKeyMarker": {
          "$ref": "#/definitions/NextKeyMarker",
          "description": "Use this value for the key marker request parameter in a subsequent request."
        },
        "NextVersionIdMarker": {
          "$ref": "#/definitions/NextVersionIdMarker",
          "description": "Use this value for the next version id marker parameter in a subsequent request."
        },
        "Prefix": {
          "$ref": "#/definitions/Prefix"
        },
        "VersionIdMarker": {
          "$ref": "#/definitions/VersionIdMarker"
        },
        "Versions": {
          "$ref": "#/definitions/ObjectVersionList"
        }
      },
      "type": "object"
    },
    "ListObjectVersionsRequest": {
      "example": {
        "Bucket": "examplebucket",
        "Prefix": "HappyFace.jpg"
      },
      "properties": {},
      "type": "object"
    },
    "ListObjectsOutput": {
      "example": {
        "Contents": [
          {
            "ETag": "\"70ee1738b6b21e2c8a43f3a5ab0eee71\"",
            "Key": "example1.jpg",
            "LastModified": "2014-11-21T19:40:05.000Z",
            "Owner": {
              "DisplayName": "myname",
              "ID": "12345example25102679df27bb0ae12b3f85be6f290b936c4393484be31bebcc"
            },
            "Size": 11,
            "StorageClass": "STANDARD"
          },
          {
            "ETag": "\"9c8af9a76df052144598c115ef33e511\"",
            "Key": "example2.jpg",
            "LastModified": "2013-11-15T01:10:49.000Z",
            "Owner": {
              "DisplayName": "myname",
              "ID": "12345example25102679df27bb0ae12b3f85be6f290b936c4393484be31bebcc"
            },
            "Size": 713193,
            "StorageClass": "STANDARD"
          }
        ],
        "NextMarker": "eyJNYXJrZXIiOiBudWxsLCAiYm90b190cnVuY2F0ZV9hbW91bnQiOiAyfQ=="
      },
      "properties": {
        "CommonPrefixes": {
          "$ref": "#/definitions/CommonPrefixList"
        },
        "Contents": {
          "$ref": "#/definitions/ObjectList"
        },
        "Delimiter": {
          "$ref": "#/definitions/Delimiter"
        },
        "EncodingType": {
          "$ref": "#/definitions/EncodingType",
          "description": "Encoding type used by Amazon S3 to encode object keys in the response."
        },
        "IsTruncated": {
          "$ref": "#/definitions/IsTruncated",
          "description": "A flag that indicates whether or not Amazon S3 returned all of the results that satisfied the search criteria."
        },
        "Marker": {
          "$ref": "#/definitions/Marker"
        },
        "MaxKeys": {
          "$ref": "#/definitions/MaxKeys"
        },
        "Name": {
          "$ref": "#/definitions/BucketName"
        },
        "NextMarker": {
          "$ref": "#/definitions/NextMarker",
          "description": "When response is truncated (the IsTruncated element value in the response is true), you can use the key name in this field as marker in the subsequent request to get next set of objects. Amazon S3 lists objects in alphabetical order Note: This element is returned only if you have delimiter request parameter specified. If response does not include the NextMaker and it is truncated, you can use the value of the last Key in the response as the marker in the subsequent request to get the next set of object keys."
        },
        "Prefix": {
          "$ref": "#/definitions/Prefix"
        }
      },
      "type": "object"
    },
    "ListObjectsRequest": {
      "example": {
        "Bucket": "examplebucket",
        "MaxKeys": "2"
      },
      "properties": {},
      "type": "object"
    },
    "ListObjectsV2Output": {
      "example": {
        "Contents": [
          {
            "ETag": "\"70ee1738b6b21e2c8a43f3a5ab0eee71\"",
            "Key": "happyface.jpg",
            "LastModified": "2014-11-21T19:40:05.000Z",
            "Size": 11,
            "StorageClass": "STANDARD"
          },
          {
            "ETag": "\"becf17f89c30367a9a44495d62ed521a-1\"",
            "Key": "test.jpg",
            "LastModified": "2014-05-02T04:51:50.000Z",
            "Size": 4192256,
            "StorageClass": "STANDARD"
          }
        ],
        "IsTruncated": true,
        "KeyCount": "2",
        "MaxKeys": "2",
        "Name": "examplebucket",
        "NextContinuationToken": "1w41l63U0xa8q7smH50vCxyTQqdxo69O3EmK28Bi5PcROI4wI/EyIJg==",
        "Prefix": ""
      },
      "properties": {
        "CommonPrefixes": {
          "$ref": "#/definitions/CommonPrefixList",
          "description": "CommonPrefixes contains all (if there are any) keys between Prefix and the next occurrence of the string specified by delimiter"
        },
        "Contents": {
          "$ref": "#/definitions/ObjectList",
          "description": "Metadata about each object returned."
        },
        "ContinuationToken": {
          "$ref": "#/definitions/Token",
          "description": "ContinuationToken indicates Amazon S3 that the list is being continued on this bucket with a token. ContinuationToken is obfuscated and is not a real key"
        },
        "Delimiter": {
          "$ref": "#/definitions/Delimiter",
          "description": "A delimiter is a character you use to group keys."
        },
        "EncodingType": {
          "$ref": "#/definitions/EncodingType",
          "description": "Encoding type used by Amazon S3 to encode object keys in the response."
        },
        "IsTruncated": {
          "$ref": "#/definitions/IsTruncated",
          "description": "A flag that indicates whether or not Amazon S3 returned all of the results that satisfied the search criteria."
        },
        "KeyCount": {
          "$ref": "#/definitions/KeyCount",
          "description": "KeyCount is the number of keys returned with this request. KeyCount will always be less than equals to MaxKeys field. Say you ask for 50 keys, your result will include less than equals 50 keys "
        },
        "MaxKeys": {
          "$ref": "#/definitions/MaxKeys",
          "description": "Sets the maximum number of keys returned in the response. The response might contain fewer keys but will never contain more."
        },
        "Name": {
          "$ref": "#/definitions/BucketName",
          "description": "Name of the bucket to list."
        },
        "NextContinuationToken": {
          "$ref": "#/definitions/NextToken",
          "description": "NextContinuationToken is sent when isTruncated is true which means there are more keys in the bucket that can be listed. The next list requests to Amazon S3 can be continued with this NextContinuationToken. NextContinuationToken is obfuscated and is not a real key"
        },
        "Prefix": {
          "$ref": "#/definitions/Prefix",
          "description": "Limits the response to keys that begin with the specified prefix."
        },
        "StartAfter": {
          "$ref": "#/definitions/StartAfter",
          "description": "StartAfter is where you want Amazon S3 to start listing from. Amazon S3 starts listing after this specified key. StartAfter can be any key in the bucket"
        }
      },
      "type": "object"
    },
    "ListObjectsV2Request": {
      "example": {
        "Bucket": "examplebucket",
        "MaxKeys": "2"
      },
      "properties": {},
      "type": "object"
    },
    "ListPartsOutput": {
      "example": {
        "Initiator": {
          "DisplayName": "owner-display-name",
          "ID": "examplee7a2f25102679df27bb0ae12b3f85be6f290b936c4393484be31bebcc"
        },
        "Owner": {
          "DisplayName": "owner-display-name",
          "ID": "examplee7a2f25102679df27bb0ae12b3f85be6f290b936c4393484be31bebcc"
        },
        "Parts": [
          {
            "ETag": "\"d8c2eafd90c266e19ab9dcacc479f8af\"",
            "LastModified": "2016-12-16T00:11:42.000Z",
            "PartNumber": "1",
            "Size": 26246026
          },
          {
            "ETag": "\"d8c2eafd90c266e19ab9dcacc479f8af\"",
            "LastModified": "2016-12-16T00:15:01.000Z",
            "PartNumber": "2",
            "Size": 26246026
          }
        ],
        "StorageClass": "STANDARD"
      },
      "properties": {
        "Bucket": {
          "$ref": "#/definitions/BucketName",
          "description": "Name of the bucket to which the multipart upload was initiated."
        },
        "Initiator": {
          "$ref": "#/definitions/Initiator",
          "description": "Identifies who initiated the multipart upload."
        },
        "IsTruncated": {
          "$ref": "#/definitions/IsTruncated",
          "description": "Indicates whether the returned list of parts is truncated."
        },
        "Key": {
          "$ref": "#/definitions/ObjectKey",
          "description": "Object key for which the multipart upload was initiated."
        },
        "MaxParts": {
          "$ref": "#/definitions/MaxParts",
          "description": "Maximum number of parts that were allowed in the response."
        },
        "NextPartNumberMarker": {
          "$ref": "#/definitions/NextPartNumberMarker",
          "description": "When a list is truncated, this element specifies the last part in the list, as well as the value to use for the part-number-marker request parameter in a subsequent request."
        },
        "Owner": {
          "$ref": "#/definitions/Owner"
        },
        "PartNumberMarker": {
          "$ref": "#/definitions/PartNumberMarker",
          "description": "Part number after which listing begins."
        },
        "Parts": {
          "$ref": "#/definitions/Parts"
        },
        "StorageClass": {
          "$ref": "#/definitions/StorageClass",
          "description": "The class of storage used to store the object."
        },
        "UploadId": {
          "$ref": "#/definitions/MultipartUploadId",
          "description": "Upload ID identifying the multipart upload whose parts are being listed."
        }
      },
      "type": "object"
    },
    "ListPartsRequest": {
      "example": {
        "Bucket": "examplebucket",
        "Key": "bigobject",
        "UploadId": "example7YPBOJuoFiQ9cz4P3Pe6FIZwO4f7wN93uHsNBEw97pl5eNwzExg0LAT2dUN91cOmrEQHDsP3WA60CEg--"
      },
      "properties": {},
      "type": "object"
    },
    "Location": {
      "type": "string"
    },
    "LocationPrefix": {
      "type": "string"
    },
    "LoggingEnabled": {
      "description": "Container for logging information. Presence of this element indicates that logging is enabled. Parameters TargetBucket and TargetPrefix are required in this case.",
      "properties": {
        "TargetBucket": {
          "$ref": "#/definitions/TargetBucket",
          "description": "Specifies the bucket where you want Amazon S3 to store server access logs. You can have your logs delivered to any bucket that you own, including the same bucket that is being logged. You can also configure multiple buckets to deliver their logs to the same target bucket. In this case you should choose a different TargetPrefix for each source bucket so that the delivered log files can be distinguished by key."
        },
        "TargetGrants": {
          "$ref": "#/definitions/TargetGrants"
        },
        "TargetPrefix": {
          "$ref": "#/definitions/TargetPrefix",
          "description": "This element lets you specify a prefix for the keys that the log files will be stored under."
        }
      },
      "required": [
        "TargetBucket",
        "TargetPrefix"
      ],
      "type": "object"
    },
    "MFA": {
      "type": "string"
    },
    "MFADelete": {
      "enum": [
        "Enabled",
        "Disabled"
      ],
      "type": "string"
    },
    "MFADeleteStatus": {
      "enum": [
        "Enabled",
        "Disabled"
      ],
      "type": "string"
    },
    "Marker": {
      "type": "string"
    },
    "MaxAgeSeconds": {
      "type": "integer"
    },
    "MaxKeys": {
      "type": "integer"
    },
    "MaxParts": {
      "type": "integer"
    },
    "MaxUploads": {
      "type": "integer"
    },
    "Message": {
      "type": "string"
    },
    "Metadata": {
      "items": {
        "properties": {
          "key": {
            "$ref": "#/definitions/MetadataKey"
          },
          "value": {
            "$ref": "#/definitions/MetadataValue"
          }
        },
        "type": "object"
      },
      "type": "array"
    },
    "MetadataDirective": {
      "enum": [
        "COPY",
        "REPLACE"
      ],
      "type": "string"
    },
    "MetadataEntry": {
      "description": "A metadata key-value pair to store with an object.",
      "properties": {
        "Name": {
          "$ref": "#/definitions/MetadataKey"
        },
        "Value": {
          "$ref": "#/definitions/MetadataValue"
        }
      },
      "type": "object"
    },
    "MetadataKey": {
      "type": "string"
    },
    "MetadataValue": {
      "type": "string"
    },
    "MetricsAndOperator": {
      "properties": {
        "Prefix": {
          "$ref": "#/definitions/Prefix",
          "description": "The prefix used when evaluating an AND predicate."
        },
        "Tags": {
          "$ref": "#/definitions/TagSet",
          "description": "The list of tags used when evaluating an AND predicate."
        }
      },
      "type": "object",
      "xml": {
        "wrapped": false
      }
    },
    "MetricsConfiguration": {
      "properties": {
        "Filter": {
          "$ref": "#/definitions/MetricsFilter",
          "description": "Specifies a metrics configuration filter. The metrics configuration will only include objects that meet the filter's criteria. A filter must be a prefix, a tag, or a conjunction (MetricsAndOperator)."
        },
        "Id": {
          "$ref": "#/definitions/MetricsId",
          "description": "The ID used to identify the metrics configuration."
        }
      },
      "required": [
        "Id"
      ],
      "type": "object"
    },
    "MetricsConfigurationList": {
      "items": {
        "$ref": "#/definitions/MetricsConfiguration"
      },
      "type": "array",
      "xml": {
        "wrapped": false
      }
    },
    "MetricsFilter": {
      "properties": {
        "And": {
          "$ref": "#/definitions/MetricsAndOperator",
          "description": "A conjunction (logical AND) of predicates, which is used in evaluating a metrics filter. The operator must have at least two predicates, and an object must match all of the predicates in order for the filter to apply."
        },
        "Prefix": {
          "$ref": "#/definitions/Prefix",
          "description": "The prefix used when evaluating a metrics filter."
        },
        "Tag": {
          "$ref": "#/definitions/Tag",
          "description": "The tag used when evaluating a metrics filter."
        }
      },
      "type": "object"
    },
    "MetricsId": {
      "type": "string"
    },
    "MissingMeta": {
      "type": "integer"
    },
    "MultipartUpload": {
      "properties": {
        "Initiated": {
          "$ref": "#/definitions/Initiated",
          "description": "Date and time at which the multipart upload was initiated."
        },
        "Initiator": {
          "$ref": "#/definitions/Initiator",
          "description": "Identifies who initiated the multipart upload."
        },
        "Key": {
          "$ref": "#/definitions/ObjectKey",
          "description": "Key of the object for which the multipart upload was initiated."
        },
        "Owner": {
          "$ref": "#/definitions/Owner"
        },
        "StorageClass": {
          "$ref": "#/definitions/StorageClass",
          "description": "The class of storage used to store the object."
        },
        "UploadId": {
          "$ref": "#/definitions/MultipartUploadId",
          "description": "Upload ID that identifies the multipart upload."
        }
      },
      "type": "object"
    },
    "MultipartUploadId": {
      "type": "string"
    },
    "MultipartUploadList": {
      "items": {
        "$ref": "#/definitions/MultipartUpload"
      },
      "type": "array",
      "xml": {
        "wrapped": false
      }
    },
    "NextKeyMarker": {
      "type": "string"
    },
    "NextMarker": {
      "type": "string"
    },
    "NextPartNumberMarker": {
      "type": "integer"
    },
    "NextToken": {
      "type": "string"
    },
    "NextUploadIdMarker": {
      "type": "string"
    },
    "NextVersionIdMarker": {
      "type": "string"
    },
    "NoSuchBucket": {},
    "NoSuchKey": {},
    "NoSuchUpload": {},
    "NoncurrentVersionExpiration": {
      "description": "Specifies when noncurrent object versions expire. Upon expiration, Amazon S3 permanently deletes the noncurrent object versions. You set this lifecycle configuration action on a bucket that has versioning enabled (or suspended) to request that Amazon S3 delete noncurrent object versions at a specific period in the object's lifetime.",
      "properties": {
        "NoncurrentDays": {
          "$ref": "#/definitions/Days",
          "description": "Specifies the number of days an object is noncurrent before Amazon S3 can perform the associated action. For information about the noncurrent days calculations, see <a href=\"http://docs.aws.amazon.com/AmazonS3/latest/dev/s3-access-control.html\">How Amazon S3 Calculates When an Object Became Noncurrent</a> in the Amazon Simple Storage Service Developer Guide."
        }
      },
      "type": "object"
    },
    "NoncurrentVersionTransition": {
      "description": "Container for the transition rule that describes when noncurrent objects transition to the STANDARD_IA, ONEZONE_IA, INTELLIGENT_TIERING or GLACIER storage class. If your bucket is versioning-enabled (or versioning is suspended), you can set this action to request that Amazon S3 transition noncurrent object versions to the STANDARD_IA, ONEZONE_IA, INTELLIGENT_TIERING or GLACIER storage class at a specific period in the object's lifetime.",
      "properties": {
        "NoncurrentDays": {
          "$ref": "#/definitions/Days",
          "description": "Specifies the number of days an object is noncurrent before Amazon S3 can perform the associated action. For information about the noncurrent days calculations, see <a href=\"http://docs.aws.amazon.com/AmazonS3/latest/dev/s3-access-control.html\">How Amazon S3 Calculates When an Object Became Noncurrent</a> in the Amazon Simple Storage Service Developer Guide."
        },
        "StorageClass": {
          "$ref": "#/definitions/TransitionStorageClass",
          "description": "The class of storage used to store the object."
        }
      },
      "type": "object"
    },
    "NoncurrentVersionTransitionList": {
      "items": {
        "$ref": "#/definitions/NoncurrentVersionTransition"
      },
      "type": "array",
      "xml": {
        "wrapped": false
      }
    },
    "NotificationConfiguration": {
      "description": "A container for specifying the notification configuration of the bucket. If this element is empty, notifications are turned off for the bucket.",
      "properties": {
        "LambdaFunctionConfigurations": {
          "$ref": "#/definitions/LambdaFunctionConfigurationList"
        },
        "QueueConfigurations": {
          "$ref": "#/definitions/QueueConfigurationList"
        },
        "TopicConfigurations": {
          "$ref": "#/definitions/TopicConfigurationList"
        }
      },
      "type": "object"
    },
    "NotificationConfigurationDeprecated": {
      "example": {
        "QueueConfiguration": {
          "Event": "s3:ObjectCreated:Put",
          "Events": [
            "s3:ObjectCreated:Put"
          ],
          "Id": "MDQ2OGQ4NDEtOTBmNi00YTM4LTk0NzYtZDIwN2I3NWQ1NjIx",
          "Queue": "arn:aws:sqs:us-east-1:acct-id:S3ObjectCreatedEventQueue"
        },
        "TopicConfiguration": {
          "Event": "s3:ObjectCreated:Copy",
          "Events": [
            "s3:ObjectCreated:Copy"
          ],
          "Id": "YTVkMWEzZGUtNTY1NS00ZmE2LWJjYjktMmRlY2QwODFkNTJi",
          "Topic": "arn:aws:sns:us-east-1:acct-id:S3ObjectCreatedEventTopic"
        }
      },
      "properties": {
        "CloudFunctionConfiguration": {
          "$ref": "#/definitions/CloudFunctionConfiguration"
        },
        "QueueConfiguration": {
          "$ref": "#/definitions/QueueConfigurationDeprecated"
        },
        "TopicConfiguration": {
          "$ref": "#/definitions/TopicConfigurationDeprecated"
        }
      },
      "type": "object"
    },
    "NotificationConfigurationFilter": {
      "description": "A container for object key name filtering rules. For information about key name filtering, see <a href=\"http://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html\">Configuring Event Notifications</a> in the <i>Amazon Simple Storage Service Developer Guide</i>.",
      "properties": {
        "Key": {
          "$ref": "#/definitions/S3KeyFilter"
        }
      },
      "type": "object"
    },
    "NotificationId": {
      "description": "An optional unique identifier for configurations in a notification configuration. If you don't provide one, Amazon S3 will assign an ID.",
      "type": "string"
    },
    "Object": {
      "properties": {
        "ETag": {
          "$ref": "#/definitions/ETag"
        },
        "Key": {
          "$ref": "#/definitions/ObjectKey"
        },
        "LastModified": {
          "$ref": "#/definitions/LastModified"
        },
        "Owner": {
          "$ref": "#/definitions/Owner"
        },
        "Size": {
          "$ref": "#/definitions/Size"
        },
        "StorageClass": {
          "$ref": "#/definitions/ObjectStorageClass",
          "description": "The class of storage used to store the object."
        }
      },
      "type": "object"
    },
    "ObjectAlreadyInActiveTierError": {},
    "ObjectCannedACL": {
      "enum": [
        "private",
        "public-read",
        "public-read-write",
        "authenticated-read",
        "aws-exec-read",
        "bucket-owner-read",
        "bucket-owner-full-control"
      ],
      "type": "string"
    },
    "ObjectIdentifier": {
      "properties": {
        "Key": {
          "$ref": "#/definitions/ObjectKey",
          "description": "Key name of the object to delete."
        },
        "VersionId": {
          "$ref": "#/definitions/ObjectVersionId",
          "description": "VersionId for the specific version of the object to delete."
        }
      },
      "required": [
        "Key"
      ],
      "type": "object"
    },
    "ObjectIdentifierList": {
      "items": {
        "$ref": "#/definitions/ObjectIdentifier"
      },
      "type": "array",
      "xml": {
        "wrapped": false
      }
    },
    "ObjectKey": {
      "minLength": 1,
      "type": "string"
    },
    "ObjectList": {
      "items": {
        "$ref": "#/definitions/Object"
      },
      "type": "array",
      "xml": {
        "wrapped": false
      }
    },
    "ObjectLockConfiguration": {
      "description": "The container element for Object Lock configuration parameters.",
      "properties": {
        "ObjectLockEnabled": {
          "$ref": "#/definitions/ObjectLockEnabled",
          "description": "Indicates whether this bucket has an Object Lock configuration enabled."
        },
        "Rule": {
          "$ref": "#/definitions/ObjectLockRule",
          "description": "The Object Lock rule in place for the specified object."
        }
      },
      "type": "object"
    },
    "ObjectLockEnabled": {
      "enum": [
        "Enabled"
      ],
      "type": "string"
    },
    "ObjectLockEnabledForBucket": {
      "type": "boolean"
    },
    "ObjectLockLegalHold": {
      "description": "A Legal Hold configuration for an object.",
      "properties": {
        "Status": {
          "$ref": "#/definitions/ObjectLockLegalHoldStatus",
          "description": "Indicates whether the specified object has a Legal Hold in place."
        }
      },
      "type": "object"
    },
    "ObjectLockLegalHoldStatus": {
      "enum": [
        "ON",
        "OFF"
      ],
      "type": "string"
    },
    "ObjectLockMode": {
      "enum": [
        "GOVERNANCE",
        "COMPLIANCE"
      ],
      "type": "string"
    },
    "ObjectLockRetainUntilDate": {
      "format": "date-time",
      "type": "string"
    },
    "ObjectLockRetention": {
      "description": "A Retention configuration for an object.",
      "properties": {
        "Mode": {
          "$ref": "#/definitions/ObjectLockRetentionMode",
          "description": "Indicates the Retention mode for the specified object."
        },
        "RetainUntilDate": {
          "$ref": "#/definitions/Date",
          "description": "The date on which this Object Lock Retention will expire."
        }
      },
      "type": "object"
    },
    "ObjectLockRetentionMode": {
      "enum": [
        "GOVERNANCE",
        "COMPLIANCE"
      ],
      "type": "string"
    },
    "ObjectLockRule": {
      "description": "The container element for an Object Lock rule.",
      "properties": {
        "DefaultRetention": {
          "$ref": "#/definitions/DefaultRetention",
          "description": "The default retention period that you want to apply to new objects placed in the specified bucket."
        }
      },
      "type": "object"
    },
    "ObjectLockToken": {
      "type": "string"
    },
    "ObjectNotInActiveTierError": {},
    "ObjectStorageClass": {
      "enum": [
        "STANDARD",
        "REDUCED_REDUNDANCY",
        "GLACIER",
        "STANDARD_IA",
        "ONEZONE_IA",
        "INTELLIGENT_TIERING"
      ],
      "type": "string"
    },
    "ObjectVersion": {
      "properties": {
        "ETag": {
          "$ref": "#/definitions/ETag"
        },
        "IsLatest": {
          "$ref": "#/definitions/IsLatest",
          "description": "Specifies whether the object is (true) or is not (false) the latest version of an object."
        },
        "Key": {
          "$ref": "#/definitions/ObjectKey",
          "description": "The object key."
        },
        "LastModified": {
          "$ref": "#/definitions/LastModified",
          "description": "Date and time the object was last modified."
        },
        "Owner": {
          "$ref": "#/definitions/Owner"
        },
        "Size": {
          "$ref": "#/definitions/Size",
          "description": "Size in bytes of the object."
        },
        "StorageClass": {
          "$ref": "#/definitions/ObjectVersionStorageClass",
          "description": "The class of storage used to store the object."
        },
        "VersionId": {
          "$ref": "#/definitions/ObjectVersionId",
          "description": "Version ID of an object."
        }
      },
      "type": "object"
    },
    "ObjectVersionId": {
      "type": "string"
    },
    "ObjectVersionList": {
      "items": {
        "$ref": "#/definitions/ObjectVersion"
      },
      "type": "array",
      "xml": {
        "wrapped": false
      }
    },
    "ObjectVersionStorageClass": {
      "enum": [
        "STANDARD"
      ],
      "type": "string"
    },
    "OutputLocation": {
      "description": "Describes the location where the restore job's output is stored.",
      "properties": {
        "S3": {
          "$ref": "#/definitions/S3Location",
          "description": "Describes an S3 location that will receive the results of the restore request."
        }
      },
      "type": "object"
    },
    "OutputSerialization": {
      "description": "Describes how results of the Select job are serialized.",
      "properties": {
        "CSV": {
          "$ref": "#/definitions/CSVOutput",
          "description": "Describes the serialization of CSV-encoded Select results."
        },
        "JSON": {
          "$ref": "#/definitions/JSONOutput",
          "description": "Specifies JSON as request's output serialization format."
        }
      },
      "type": "object"
    },
    "Owner": {
      "properties": {
        "DisplayName": {
          "$ref": "#/definitions/DisplayName"
        },
        "ID": {
          "$ref": "#/definitions/ID"
        }
      },
      "type": "object"
    },
    "OwnerOverride": {
      "enum": [
        "Destination"
      ],
      "type": "string"
    },
    "ParquetInput": {
      "properties": {},
      "type": "object"
    },
    "Part": {
      "properties": {
        "ETag": {
          "$ref": "#/definitions/ETag",
          "description": "Entity tag returned when the part was uploaded."
        },
        "LastModified": {
          "$ref": "#/definitions/LastModified",
          "description": "Date and time at which the part was uploaded."
        },
        "PartNumber": {
          "$ref": "#/definitions/PartNumber",
          "description": "Part number identifying the part. This is a positive integer between 1 and 10,000."
        },
        "Size": {
          "$ref": "#/definitions/Size",
          "description": "Size in bytes of the uploaded part data."
        }
      },
      "type": "object"
    },
    "PartNumber": {
      "type": "integer"
    },
    "PartNumberMarker": {
      "type": "integer"
    },
    "Parts": {
      "items": {
        "$ref": "#/definitions/Part"
      },
      "type": "array",
      "xml": {
        "wrapped": false
      }
    },
    "PartsCount": {
      "type": "integer"
    },
    "Payer": {
      "enum": [
        "Requester",
        "BucketOwner"
      ],
      "type": "string"
    },
    "Permission": {
      "enum": [
        "FULL_CONTROL",
        "WRITE",
        "WRITE_ACP",
        "READ",
        "READ_ACP"
      ],
      "type": "string"
    },
    "Policy": {
      "type": "string"
    },
    "PolicyStatus": {
      "description": "The container element for a bucket's policy status.",
      "properties": {
        "IsPublic": {
          "$ref": "#/definitions/IsPublic",
          "description": "The policy status for this bucket. <code>TRUE</code> indicates that this bucket is public. <code>FALSE</code> indicates that the bucket is not public."
        }
      },
      "type": "object"
    },
    "Prefix": {
      "type": "string"
    },
    "Priority": {
      "type": "integer"
    },
    "Progress": {
      "properties": {
        "BytesProcessed": {
          "$ref": "#/definitions/BytesProcessed",
          "description": "The current number of uncompressed object bytes processed."
        },
        "BytesReturned": {
          "$ref": "#/definitions/BytesReturned",
          "description": "The current number of bytes of records payload data returned."
        },
        "BytesScanned": {
          "$ref": "#/definitions/BytesScanned",
          "description": "The current number of object bytes scanned."
        }
      },
      "type": "object"
    },
    "ProgressEvent": {
      "properties": {
        "Details": {
          "$ref": "#/definitions/Progress",
          "description": "The Progress event details."
        }
      },
      "type": "object"
    },
    "Protocol": {
      "enum": [
        "http",
        "https"
      ],
      "type": "string"
    },
    "PublicAccessBlockConfiguration": {
      "properties": {
        "BlockPublicAcls": {
          "$ref": "#/definitions/Setting",
          "description": "<p>Specifies whether Amazon S3 should block public access control lists (ACLs) for this bucket and objects in this bucket. Setting this element to <code>TRUE</code> causes the following behavior:</p> <ul> <li> <p>PUT Bucket acl and PUT Object acl calls fail if the specified ACL is public.</p> </li> <li> <p>PUT Object calls fail if the request includes a public ACL.</p> </li> </ul> <p>Enabling this setting doesn't affect existing policies or ACLs.</p>"
        },
        "BlockPublicPolicy": {
          "$ref": "#/definitions/Setting",
          "description": "<p>Specifies whether Amazon S3 should block public bucket policies for this bucket. Setting this element to <code>TRUE</code> causes Amazon S3 to reject calls to PUT Bucket policy if the specified bucket policy allows public access. </p> <p>Enabling this setting doesn't affect existing bucket policies.</p>"
        },
        "IgnorePublicAcls": {
          "$ref": "#/definitions/Setting",
          "description": "<p>Specifies whether Amazon S3 should ignore public ACLs for this bucket and objects in this bucket. Setting this element to <code>TRUE</code> causes Amazon S3 to ignore all public ACLs on this bucket and objects in this bucket.</p> <p>Enabling this setting doesn't affect the persistence of any existing ACLs and doesn't prevent new public ACLs from being set.</p>"
        },
        "RestrictPublicBuckets": {
          "$ref": "#/definitions/Setting",
          "description": "<p>Specifies whether Amazon S3 should restrict public bucket policies for this bucket. Setting this element to <code>TRUE</code> restricts access to this bucket to only AWS services and authorized users within this account if the bucket has a public policy.</p> <p>Enabling this setting doesn't affect previously stored bucket policies, except that public and cross-account access within any public bucket policy, including non-public delegation to specific accounts, is blocked.</p>"
        }
      },
      "type": "object"
    },
    "PutBucketAccelerateConfigurationRequest": {
      "properties": {
        "AccelerateConfiguration": {
          "$ref": "#/definitions/AccelerateConfiguration",
          "description": "Specifies the Accelerate Configuration you want to set for the bucket."
        }
      },
      "required": [
        "AccelerateConfiguration"
      ],
      "type": "object",
      "xml": {
        "namespace": "http://s3.amazonaws.com/doc/2006-03-01/"
      }
    },
    "PutBucketAclRequest": {
      "example": {
        "Bucket": "examplebucket",
        "GrantFullControl": "id=examplee7a2f25102679df27bb0ae12b3f85be6f290b936c4393484",
        "GrantWrite": "uri=http://acs.amazonaws.com/groups/s3/LogDelivery"
      },
      "properties": {
        "AccessControlPolicy": {
          "$ref": "#/definitions/AccessControlPolicy"
        }
      },
      "type": "object",
      "xml": {
        "namespace": "http://s3.amazonaws.com/doc/2006-03-01/"
      }
    },
    "PutBucketAnalyticsConfigurationRequest": {
      "properties": {
        "AnalyticsConfiguration": {
          "$ref": "#/definitions/AnalyticsConfiguration",
          "description": "The configuration and any analyses for the analytics filter."
        }
      },
      "required": [
        "AnalyticsConfiguration"
      ],
      "type": "object",
      "xml": {
        "namespace": "http://s3.amazonaws.com/doc/2006-03-01/"
      }
    },
    "PutBucketCorsRequest": {
      "example": {
        "Bucket": "",
        "CORSConfiguration": {
          "CORSRules": [
            {
              "AllowedHeaders": [
                "*"
              ],
              "AllowedMethods": [
                "PUT",
                "POST",
                "DELETE"
              ],
              "AllowedOrigins": [
                "http://www.example.com"
              ],
              "ExposeHeaders": [
                "x-amz-server-side-encryption"
              ],
              "MaxAgeSeconds": 3000
            },
            {
              "AllowedHeaders": [
                "Authorization"
              ],
              "AllowedMethods": [
                "GET"
              ],
              "AllowedOrigins": [
                "*"
              ],
              "MaxAgeSeconds": 3000
            }
          ]
        },
        "ContentMD5": ""
      },
      "properties": {
        "CORSConfiguration": {
          "$ref": "#/definitions/CORSConfiguration"
        }
      },
      "required": [
        "CORSConfiguration"
      ],
      "type": "object",
      "xml": {
        "namespace": "http://s3.amazonaws.com/doc/2006-03-01/"
      }
    },
    "PutBucketEncryptionRequest": {
      "properties": {
        "ServerSideEncryptionConfiguration": {
          "$ref": "#/definitions/ServerSideEncryptionConfiguration"
        }
      },
      "required": [
        "ServerSideEncryptionConfiguration"
      ],
      "type": "object",
      "xml": {
        "namespace": "http://s3.amazonaws.com/doc/2006-03-01/"
      }
    },
    "PutBucketInventoryConfigurationRequest": {
      "properties": {
        "InventoryConfiguration": {
          "$ref": "#/definitions/InventoryConfiguration",
          "description": "Specifies the inventory configuration."
        }
      },
      "required": [
        "InventoryConfiguration"
      ],
      "type": "object",
      "xml": {
        "namespace": "http://s3.amazonaws.com/doc/2006-03-01/"
      }
    },
    "PutBucketLifecycleConfigurationRequest": {
      "example": {
        "Bucket": "examplebucket",
        "LifecycleConfiguration": {
          "Rules": [
            {
              "Expiration": {
                "Days": 3650
              },
              "Filter": {
                "Prefix": "documents/"
              },
              "ID": "TestOnly",
              "Status": "Enabled",
              "Transitions": [
                {
                  "Days": 365,
                  "StorageClass": "GLACIER"
                }
              ]
            }
          ]
        }
      },
      "properties": {
        "LifecycleConfiguration": {
          "$ref": "#/definitions/BucketLifecycleConfiguration"
        }
      },
      "type": "object",
      "xml": {
        "namespace": "http://s3.amazonaws.com/doc/2006-03-01/"
      }
    },
    "PutBucketLifecycleRequest": {
      "properties": {
        "LifecycleConfiguration": {
          "$ref": "#/definitions/LifecycleConfiguration"
        }
      },
      "type": "object",
      "xml": {
        "namespace": "http://s3.amazonaws.com/doc/2006-03-01/"
      }
    },
    "PutBucketLoggingRequest": {
      "example": {
        "Bucket": "sourcebucket",
        "BucketLoggingStatus": {
          "LoggingEnabled": {
            "TargetBucket": "targetbucket",
            "TargetGrants": [
              {
                "Grantee": {
                  "Type": "Group",
                  "URI": "http://acs.amazonaws.com/groups/global/AllUsers"
                },
                "Permission": "READ"
              }
            ],
            "TargetPrefix": "MyBucketLogs/"
          }
        }
      },
      "properties": {
        "BucketLoggingStatus": {
          "$ref": "#/definitions/BucketLoggingStatus"
        }
      },
      "required": [
        "BucketLoggingStatus"
      ],
      "type": "object",
      "xml": {
        "namespace": "http://s3.amazonaws.com/doc/2006-03-01/"
      }
    },
    "PutBucketMetricsConfigurationRequest": {
      "properties": {
        "MetricsConfiguration": {
          "$ref": "#/definitions/MetricsConfiguration",
          "description": "Specifies the metrics configuration."
        }
      },
      "required": [
        "MetricsConfiguration"
      ],
      "type": "object",
      "xml": {
        "namespace": "http://s3.amazonaws.com/doc/2006-03-01/"
      }
    },
    "PutBucketNotificationConfigurationRequest": {
      "example": {
        "Bucket": "examplebucket",
        "NotificationConfiguration": {
          "TopicConfigurations": [
            {
              "Events": [
                "s3:ObjectCreated:*"
              ],
              "TopicArn": "arn:aws:sns:us-west-2:123456789012:s3-notification-topic"
            }
          ]
        }
      },
      "properties": {
        "NotificationConfiguration": {
          "$ref": "#/definitions/NotificationConfiguration"
        }
      },
      "required": [
        "NotificationConfiguration"
      ],
      "type": "object",
      "xml": {
        "namespace": "http://s3.amazonaws.com/doc/2006-03-01/"
      }
    },
    "PutBucketNotificationRequest": {
      "properties": {
        "NotificationConfiguration": {
          "$ref": "#/definitions/NotificationConfigurationDeprecated"
        }
      },
      "required": [
        "NotificationConfiguration"
      ],
      "type": "object",
      "xml": {
        "namespace": "http://s3.amazonaws.com/doc/2006-03-01/"
      }
    },
    "PutBucketPolicyRequest": {
      "example": {
        "Bucket": "examplebucket",
        "Policy": "{\"Version\": \"2012-10-17\", \"Statement\": [{ \"Sid\": \"id-1\",\"Effect\": \"Allow\",\"Principal\": {\"AWS\": \"arn:aws:iam::123456789012:root\"}, \"Action\": [ \"s3:PutObject\",\"s3:PutObjectAcl\"], \"Resource\": [\"arn:aws:s3:::acl3/*\" ] } ]}"
      },
      "properties": {
        "Policy": {
          "$ref": "#/definitions/Policy",
          "description": "The bucket policy as a JSON document."
        }
      },
      "required": [
        "Policy"
      ],
      "type": "object"
    },
    "PutBucketReplicationRequest": {
      "example": {
        "Bucket": "examplebucket",
        "ReplicationConfiguration": {
          "Role": "arn:aws:iam::123456789012:role/examplerole",
          "Rules": [
            {
              "Destination": {
                "Bucket": "arn:aws:s3:::destinationbucket",
                "StorageClass": "STANDARD"
              },
              "Prefix": "",
              "Status": "Enabled"
            }
          ]
        }
      },
      "properties": {
        "ReplicationConfiguration": {
          "$ref": "#/definitions/ReplicationConfiguration"
        }
      },
      "required": [
        "ReplicationConfiguration"
      ],
      "type": "object",
      "xml": {
        "namespace": "http://s3.amazonaws.com/doc/2006-03-01/"
      }
    },
    "PutBucketRequestPaymentRequest": {
      "example": {
        "Bucket": "examplebucket",
        "RequestPaymentConfiguration": {
          "Payer": "Requester"
        }
      },
      "properties": {
        "RequestPaymentConfiguration": {
          "$ref": "#/definitions/RequestPaymentConfiguration"
        }
      },
      "required": [
        "RequestPaymentConfiguration"
      ],
      "type": "object",
      "xml": {
        "namespace": "http://s3.amazonaws.com/doc/2006-03-01/"
      }
    },
    "PutBucketTaggingRequest": {
      "example": {
        "Bucket": "examplebucket",
        "Tagging": {
          "TagSet": [
            {
              "Key": "Key1",
              "Value": "Value1"
            },
            {
              "Key": "Key2",
              "Value": "Value2"
            }
          ]
        }
      },
      "properties": {
        "Tagging": {
          "$ref": "#/definitions/Tagging"
        }
      },
      "required": [
        "Tagging"
      ],
      "type": "object",
      "xml": {
        "namespace": "http://s3.amazonaws.com/doc/2006-03-01/"
      }
    },
    "PutBucketVersioningRequest": {
      "example": {
        "Bucket": "examplebucket",
        "VersioningConfiguration": {
          "MFADelete": "Disabled",
          "Status": "Enabled"
        }
      },
      "properties": {
        "VersioningConfiguration": {
          "$ref": "#/definitions/VersioningConfiguration"
        }
      },
      "required": [
        "VersioningConfiguration"
      ],
      "type": "object",
      "xml": {
        "namespace": "http://s3.amazonaws.com/doc/2006-03-01/"
      }
    },
    "PutBucketWebsiteRequest": {
      "example": {
        "Bucket": "examplebucket",
        "ContentMD5": "",
        "WebsiteConfiguration": {
          "ErrorDocument": {
            "Key": "error.html"
          },
          "IndexDocument": {
            "Suffix": "index.html"
          }
        }
      },
      "properties": {
        "WebsiteConfiguration": {
          "$ref": "#/definitions/WebsiteConfiguration"
        }
      },
      "required": [
        "WebsiteConfiguration"
      ],
      "type": "object",
      "xml": {
        "namespace": "http://s3.amazonaws.com/doc/2006-03-01/"
      }
    },
    "PutObjectAclOutput": {
      "example": {},
      "properties": {},
      "type": "object"
    },
    "PutObjectAclRequest": {
      "example": {
        "AccessControlPolicy": {},
        "Bucket": "examplebucket",
        "GrantFullControl": "emailaddress=user1@example.com,emailaddress=user2@example.com",
        "GrantRead": "uri=http://acs.amazonaws.com/groups/global/AllUsers",
        "Key": "HappyFace.jpg"
      },
      "properties": {
        "AccessControlPolicy": {
          "$ref": "#/definitions/AccessControlPolicy"
        }
      },
      "type": "object",
      "xml": {
        "namespace": "http://s3.amazonaws.com/doc/2006-03-01/"
      }
    },
    "PutObjectLegalHoldOutput": {
      "properties": {},
      "type": "object"
    },
    "PutObjectLegalHoldRequest": {
      "properties": {
        "LegalHold": {
          "$ref": "#/definitions/ObjectLockLegalHold",
          "description": "Container element for the Legal Hold configuration you want to apply to the specified object."
        }
      },
      "type": "object",
      "xml": {
        "namespace": "http://s3.amazonaws.com/doc/2006-03-01/"
      }
    },
    "PutObjectLockConfigurationOutput": {
      "properties": {},
      "type": "object"
    },
    "PutObjectLockConfigurationRequest": {
      "properties": {
        "ObjectLockConfiguration": {
          "$ref": "#/definitions/ObjectLockConfiguration",
          "description": "The Object Lock configuration that you want to apply to the specified bucket."
        }
      },
      "type": "object",
      "xml": {
        "namespace": "http://s3.amazonaws.com/doc/2006-03-01/"
      }
    },
    "PutObjectOutput": {
      "example": {
        "ETag": "\"6805f2cfc46c0f04559748bb039d69ae\"",
        "VersionId": "Kirh.unyZwjQ69YxcQLA8z4F5j3kJJKr"
      },
      "properties": {},
      "type": "object"
    },
    "PutObjectRequest": {
      "example": {
        "ACL": "authenticated-read",
        "Body": "filetoupload",
        "Bucket": "examplebucket",
        "Key": "exampleobject"
      },
      "properties": {
        "Body": {
          "$ref": "#/definitions/Body",
          "description": "Object data."
        },
        "Metadata": {
          "$ref": "#/definitions/Metadata",
          "description": "A map of metadata to store with the object in S3."
        }
      },
      "type": "object"
    },
    "PutObjectRetentionOutput": {
      "properties": {},
      "type": "object"
    },
    "PutObjectRetentionRequest": {
      "properties": {
        "Retention": {
          "$ref": "#/definitions/ObjectLockRetention",
          "description": "The container element for the Object Retention configuration."
        }
      },
      "type": "object",
      "xml": {
        "namespace": "http://s3.amazonaws.com/doc/2006-03-01/"
      }
    },
    "PutObjectTaggingOutput": {
      "example": {
        "VersionId": "null"
      },
      "properties": {},
      "type": "object"
    },
    "PutObjectTaggingRequest": {
      "example": {
        "Bucket": "examplebucket",
        "Key": "HappyFace.jpg",
        "Tagging": {
          "TagSet": [
            {
              "Key": "Key3",
              "Value": "Value3"
            },
            {
              "Key": "Key4",
              "Value": "Value4"
            }
          ]
        }
      },
      "properties": {
        "Tagging": {
          "$ref": "#/definitions/Tagging"
        }
      },
      "required": [
        "Tagging"
      ],
      "type": "object",
      "xml": {
        "namespace": "http://s3.amazonaws.com/doc/2006-03-01/"
      }
    },
    "PutPublicAccessBlockRequest": {
      "properties": {
        "PublicAccessBlockConfiguration": {
          "$ref": "#/definitions/PublicAccessBlockConfiguration",
          "description": "The <code>PublicAccessBlock</code> configuration that you want to apply to this Amazon S3 bucket. You can enable the configuration options in any combination. For more information about when Amazon S3 considers a bucket or object public, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/access-control-block-public-access.html#access-control-block-public-access-policy-status\">The Meaning of \"Public\"</a> in the <i>Amazon Simple Storage Service Developer Guide</i>."
        }
      },
      "required": [
        "PublicAccessBlockConfiguration"
      ],
      "type": "object",
      "xml": {
        "namespace": "http://s3.amazonaws.com/doc/2006-03-01/"
      }
    },
    "QueueArn": {
      "type": "string"
    },
    "QueueConfiguration": {
      "description": "A container for specifying the configuration for publication of messages to an Amazon Simple Queue Service (Amazon SQS) queue.when Amazon S3 detects specified events.",
      "properties": {
        "Events": {
          "$ref": "#/definitions/EventList"
        },
        "Filter": {
          "$ref": "#/definitions/NotificationConfigurationFilter"
        },
        "Id": {
          "$ref": "#/definitions/NotificationId"
        },
        "QueueArn": {
          "$ref": "#/definitions/QueueArn",
          "description": "The Amazon Resource Name (ARN) of the Amazon SQS queue to which Amazon S3 will publish a message when it detects events of the specified type."
        }
      },
      "required": [
        "QueueArn",
        "Events"
      ],
      "type": "object"
    },
    "QueueConfigurationDeprecated": {
      "properties": {
        "Event": {
          "$ref": "#/definitions/Event"
        },
        "Events": {
          "$ref": "#/definitions/EventList"
        },
        "Id": {
          "$ref": "#/definitions/NotificationId"
        },
        "Queue": {
          "$ref": "#/definitions/QueueArn"
        }
      },
      "type": "object"
    },
    "QueueConfigurationList": {
      "items": {
        "$ref": "#/definitions/QueueConfiguration"
      },
      "type": "array",
      "xml": {
        "wrapped": false
      }
    },
    "Quiet": {
      "type": "boolean"
    },
    "QuoteCharacter": {
      "type": "string"
    },
    "QuoteEscapeCharacter": {
      "type": "string"
    },
    "QuoteFields": {
      "enum": [
        "ALWAYS",
        "ASNEEDED"
      ],
      "type": "string"
    },
    "Range": {
      "type": "string"
    },
    "RecordDelimiter": {
      "type": "string"
    },
    "RecordsEvent": {
      "properties": {
        "Payload": {
          "$ref": "#/definitions/Body",
          "description": "The byte array of partial, one or more result records."
        }
      },
      "type": "object"
    },
    "Redirect": {
      "properties": {
        "HostName": {
          "$ref": "#/definitions/HostName",
          "description": "The host name to use in the redirect request."
        },
        "HttpRedirectCode": {
          "$ref": "#/definitions/HttpRedirectCode",
          "description": "The HTTP redirect code to use on the response. Not required if one of the siblings is present."
        },
        "Protocol": {
          "$ref": "#/definitions/Protocol",
          "description": "Protocol to use (http, https) when redirecting requests. The default is the protocol that is used in the original request."
        },
        "ReplaceKeyPrefixWith": {
          "$ref": "#/definitions/ReplaceKeyPrefixWith",
          "description": "The object key prefix to use in the redirect request. For example, to redirect requests for all pages with prefix docs/ (objects in the docs/ folder) to documents/, you can set a condition block with KeyPrefixEquals set to docs/ and in the Redirect set ReplaceKeyPrefixWith to /documents. Not required if one of the siblings is present. Can be present only if ReplaceKeyWith is not provided."
        },
        "ReplaceKeyWith": {
          "$ref": "#/definitions/ReplaceKeyWith",
          "description": "The specific object key to use in the redirect request. For example, redirect request to error.html. Not required if one of the sibling is present. Can be present only if ReplaceKeyPrefixWith is not provided."
        }
      },
      "type": "object"
    },
    "RedirectAllRequestsTo": {
      "properties": {
        "HostName": {
          "$ref": "#/definitions/HostName",
          "description": "Name of the host where requests will be redirected."
        },
        "Protocol": {
          "$ref": "#/definitions/Protocol",
          "description": "Protocol to use (http, https) when redirecting requests. The default is the protocol that is used in the original request."
        }
      },
      "required": [
        "HostName"
      ],
      "type": "object"
    },
    "ReplaceKeyPrefixWith": {
      "type": "string"
    },
    "ReplaceKeyWith": {
      "type": "string"
    },
    "ReplicaKmsKeyID": {
      "type": "string"
    },
    "ReplicationConfiguration": {
      "description": "A container for replication rules. You can add up to 1,000 rules. The maximum size of a replication configuration is 2 MB.",
      "properties": {
        "Role": {
          "$ref": "#/definitions/Role",
          "description": "The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that Amazon S3 can assume when replicating the objects."
        },
        "Rules": {
          "$ref": "#/definitions/ReplicationRules",
          "description": "A container for one or more replication rules. A replication configuration must have at least one rule and can contain a maximum of 1,000 rules. "
        }
      },
      "required": [
        "Role",
        "Rules"
      ],
      "type": "object"
    },
    "ReplicationRule": {
      "description": "A container for information about a specific replication rule.",
      "properties": {
        "DeleteMarkerReplication": {
          "$ref": "#/definitions/DeleteMarkerReplication"
        },
        "Destination": {
          "$ref": "#/definitions/Destination",
          "description": "A container for information about the replication destination."
        },
        "Filter": {
          "$ref": "#/definitions/ReplicationRuleFilter"
        },
        "ID": {
          "$ref": "#/definitions/ID",
          "description": "A unique identifier for the rule. The maximum value is 255 characters."
        },
        "Prefix": {
          "$ref": "#/definitions/Prefix",
          "description": "An object keyname prefix that identifies the object or objects to which the rule applies. The maximum prefix length is 1,024 characters. "
        },
        "Priority": {
          "$ref": "#/definitions/Priority",
          "description": "<p>The priority associated with the rule. If you specify multiple rules in a replication configuration, Amazon S3 prioritizes the rules to prevent conflicts when filtering. If two or more rules identify the same object based on a specified filter, the rule with higher priority takes precedence. For example:</p> <ul> <li> <p>Same object quality prefix based filter criteria If prefixes you specified in multiple rules overlap </p> </li> <li> <p>Same object qualify tag based filter criteria specified in multiple rules</p> </li> </ul> <p>For more information, see <a href=\" https://docs.aws.amazon.com/AmazonS3/latest/dev/crr.html\">Cross-Region Replication (CRR)</a> in the <i>Amazon S3 Developer Guide</i>.</p>"
        },
        "SourceSelectionCriteria": {
          "$ref": "#/definitions/SourceSelectionCriteria",
          "description": "<p>A container that describes additional filters for identifying the source objects that you want to replicate. You can choose to enable or disable the replication of these objects. Currently, Amazon S3 supports only the filter that you can specify for objects created with server-side encryption using an AWS KMS-Managed Key (SSE-KMS). </p> <p> If you want Amazon S3 to replicate objects created with server-side encryption using AWS KMS-Managed Keys. </p>"
        },
        "Status": {
          "$ref": "#/definitions/ReplicationRuleStatus",
          "description": "If status isn't enabled, the rule is ignored."
        }
      },
      "required": [
        "Status",
        "Destination"
      ],
      "type": "object"
    },
    "ReplicationRuleAndOperator": {
      "properties": {
        "Prefix": {
          "$ref": "#/definitions/Prefix"
        },
        "Tags": {
          "$ref": "#/definitions/TagSet"
        }
      },
      "type": "object",
      "xml": {
        "wrapped": false
      }
    },
    "ReplicationRuleFilter": {
      "description": "A filter that identifies the subset of objects to which the replication rule applies. A <code>Filter</code> must specify exactly one <code>Prefix</code>, <code>Tag</code>, or an <code>And</code> child element.",
      "properties": {
        "And": {
          "$ref": "#/definitions/ReplicationRuleAndOperator",
          "description": "<p>A container for specifying rule filters. The filters determine the subset of objects to which the rule applies. This element is required only if you specify more than one filter. For example: </p> <ul> <li> <p>If you specify both a <code>Prefix</code> and a <code>Tag</code> filter, wrap these filters in an <code>And</code> tag.</p> </li> <li> <p>If you specify a filter based on multiple tags, wrap the <code>Tag</code> elements in an <code>And</code> tag.</p> </li> </ul>"
        },
        "Prefix": {
          "$ref": "#/definitions/Prefix",
          "description": "An object keyname prefix that identifies the subset of objects to which the rule applies."
        },
        "Tag": {
          "$ref": "#/definitions/Tag",
          "description": "<p>A container for specifying a tag key and value. </p> <p>The rule applies only to objects that have the tag in their tag set.</p>"
        }
      },
      "type": "object"
    },
    "ReplicationRuleStatus": {
      "enum": [
        "Enabled",
        "Disabled"
      ],
      "type": "string"
    },
    "ReplicationRules": {
      "items": {
        "$ref": "#/definitions/ReplicationRule"
      },
      "type": "array",
      "xml": {
        "wrapped": false
      }
    },
    "ReplicationStatus": {
      "enum": [
        "COMPLETE",
        "PENDING",
        "FAILED",
        "REPLICA"
      ],
      "type": "string"
    },
    "RequestCharged": {
      "description": "If present, indicates that the requester was successfully charged for the request.",
      "enum": [
        "requester"
      ],
      "type": "string"
    },
    "RequestPayer": {
      "description": "Confirms that the requester knows that she or he will be charged for the request. Bucket owners need not specify this parameter in their requests. Documentation on downloading objects from requester pays buckets can be found at http://docs.aws.amazon.com/AmazonS3/latest/dev/ObjectsinRequesterPaysBuckets.html",
      "enum": [
        "requester"
      ],
      "type": "string"
    },
    "RequestPaymentConfiguration": {
      "properties": {
        "Payer": {
          "$ref": "#/definitions/Payer",
          "description": "Specifies who pays for the download and request fees."
        }
      },
      "required": [
        "Payer"
      ],
      "type": "object"
    },
    "RequestProgress": {
      "properties": {
        "Enabled": {
          "$ref": "#/definitions/EnableRequestProgress",
          "description": "Specifies whether periodic QueryProgress frames should be sent. Valid values: TRUE, FALSE. Default value: FALSE."
        }
      },
      "type": "object"
    },
    "ResponseCacheControl": {
      "type": "string"
    },
    "ResponseContentDisposition": {
      "type": "string"
    },
    "ResponseContentEncoding": {
      "type": "string"
    },
    "ResponseContentLanguage": {
      "type": "string"
    },
    "ResponseContentType": {
      "type": "string"
    },
    "ResponseExpires": {
      "format": "date-time",
      "type": "string"
    },
    "Restore": {
      "type": "string"
    },
    "RestoreObjectOutput": {
      "example": {},
      "properties": {},
      "type": "object"
    },
    "RestoreObjectRequest": {
      "example": {
        "Bucket": "examplebucket",
        "Key": "archivedobjectkey",
        "RestoreRequest": {
          "Days": 1,
          "GlacierJobParameters": {
            "Tier": "Expedited"
          }
        }
      },
      "properties": {
        "RestoreRequest": {
          "$ref": "#/definitions/RestoreRequest"
        }
      },
      "type": "object",
      "xml": {
        "namespace": "http://s3.amazonaws.com/doc/2006-03-01/"
      }
    },
    "RestoreOutputPath": {
      "type": "string"
    },
    "RestoreRequest": {
      "description": "Container for restore job parameters.",
      "properties": {
        "Days": {
          "$ref": "#/definitions/Days",
          "description": "Lifetime of the active copy in days. Do not use with restores that specify OutputLocation."
        },
        "Description": {
          "$ref": "#/definitions/Description",
          "description": "The optional description for the job."
        },
        "GlacierJobParameters": {
          "$ref": "#/definitions/GlacierJobParameters",
          "description": "Glacier related parameters pertaining to this job. Do not use with restores that specify OutputLocation."
        },
        "OutputLocation": {
          "$ref": "#/definitions/OutputLocation",
          "description": "Describes the location where the restore job's output is stored."
        },
        "SelectParameters": {
          "$ref": "#/definitions/SelectParameters",
          "description": "Describes the parameters for Select job types."
        },
        "Tier": {
          "$ref": "#/definitions/Tier",
          "description": "Glacier retrieval tier at which the restore will be processed."
        },
        "Type": {
          "$ref": "#/definitions/RestoreRequestType",
          "description": "Type of restore request."
        }
      },
      "type": "object"
    },
    "RestoreRequestType": {
      "enum": [
        "SELECT"
      ],
      "type": "string"
    },
    "Role": {
      "type": "string"
    },
    "RoutingRule": {
      "properties": {
        "Condition": {
          "$ref": "#/definitions/Condition",
          "description": "A container for describing a condition that must be met for the specified redirect to apply. For example, 1. If request is for pages in the /docs folder, redirect to the /documents folder. 2. If request results in HTTP error 4xx, redirect request to another host where you might process the error."
        },
        "Redirect": {
          "$ref": "#/definitions/Redirect",
          "description": "Container for redirect information. You can redirect requests to another host, to another page, or with another protocol. In the event of an error, you can specify a different error code to return."
        }
      },
      "required": [
        "Redirect"
      ],
      "type": "object"
    },
    "RoutingRules": {
      "items": {
        "$ref": "#/definitions/RoutingRule"
      },
      "type": "array"
    },
    "Rule": {
      "properties": {
        "AbortIncompleteMultipartUpload": {
          "$ref": "#/definitions/AbortIncompleteMultipartUpload"
        },
        "Expiration": {
          "$ref": "#/definitions/LifecycleExpiration"
        },
        "ID": {
          "$ref": "#/definitions/ID",
          "description": "Unique identifier for the rule. The value cannot be longer than 255 characters."
        },
        "NoncurrentVersionExpiration": {
          "$ref": "#/definitions/NoncurrentVersionExpiration"
        },
        "NoncurrentVersionTransition": {
          "$ref": "#/definitions/NoncurrentVersionTransition"
        },
        "Prefix": {
          "$ref": "#/definitions/Prefix",
          "description": "Prefix identifying one or more objects to which the rule applies."
        },
        "Status": {
          "$ref": "#/definitions/ExpirationStatus",
          "description": "If 'Enabled', the rule is currently being applied. If 'Disabled', the rule is not currently being applied."
        },
        "Transition": {
          "$ref": "#/definitions/Transition"
        }
      },
      "required": [
        "Prefix",
        "Status"
      ],
      "type": "object"
    },
    "Rules": {
      "items": {
        "$ref": "#/definitions/Rule"
      },
      "type": "array",
      "xml": {
        "wrapped": false
      }
    },
    "S3KeyFilter": {
      "description": "A container for object key name prefix and suffix filtering rules.",
      "properties": {
        "FilterRules": {
          "$ref": "#/definitions/FilterRuleList"
        }
      },
      "type": "object"
    },
    "S3Location": {
      "description": "Describes an S3 location that will receive the results of the restore request.",
      "properties": {
        "AccessControlList": {
          "$ref": "#/definitions/Grants",
          "description": "A list of grants that control access to the staged results."
        },
        "BucketName": {
          "$ref": "#/definitions/BucketName",
          "description": "The name of the bucket where the restore results will be placed."
        },
        "CannedACL": {
          "$ref": "#/definitions/ObjectCannedACL",
          "description": "The canned ACL to apply to the restore results."
        },
        "Encryption": {
          "$ref": "#/definitions/Encryption"
        },
        "Prefix": {
          "$ref": "#/definitions/LocationPrefix",
          "description": "The prefix that is prepended to the restore results for this request."
        },
        "StorageClass": {
          "$ref": "#/definitions/StorageClass",
          "description": "The class of storage used to store the restore results."
        },
        "Tagging": {
          "$ref": "#/definitions/Tagging",
          "description": "The tag-set that is applied to the restore results."
        },
        "UserMetadata": {
          "$ref": "#/definitions/UserMetadata",
          "description": "A list of metadata to store with the restore results in S3."
        }
      },
      "required": [
        "BucketName",
        "Prefix"
      ],
      "type": "object"
    },
    "SSECustomerAlgorithm": {
      "type": "string"
    },
    "SSECustomerKey": {
      "format": "password",
      "type": "string"
    },
    "SSECustomerKeyMD5": {
      "type": "string"
    },
    "SSEKMS": {
      "description": "Specifies the use of SSE-KMS to encrypt delivered Inventory reports.",
      "properties": {
        "KeyId": {
          "$ref": "#/definitions/SSEKMSKeyId",
          "description": "Specifies the ID of the AWS Key Management Service (KMS) master encryption key to use for encrypting Inventory reports."
        }
      },
      "required": [
        "KeyId"
      ],
      "type": "object"
    },
    "SSEKMSKeyId": {
      "format": "password",
      "type": "string"
    },
    "SSES3": {
      "description": "Specifies the use of SSE-S3 to encrypt delivered Inventory reports.",
      "properties": {},
      "type": "object"
    },
    "SelectObjectContentEventStream": {
      "properties": {
        "Cont": {
          "$ref": "#/definitions/ContinuationEvent",
          "description": "The Continuation Event."
        },
        "End": {
          "$ref": "#/definitions/EndEvent",
          "description": "The End Event."
        },
        "Progress": {
          "$ref": "#/definitions/ProgressEvent",
          "description": "The Progress Event."
        },
        "Records": {
          "$ref": "#/definitions/RecordsEvent",
          "description": "The Records Event."
        },
        "Stats": {
          "$ref": "#/definitions/StatsEvent",
          "description": "The Stats Event."
        }
      },
      "type": "object"
    },
    "SelectObjectContentOutput": {
      "properties": {
        "Payload": {
          "$ref": "#/definitions/SelectObjectContentEventStream"
        }
      },
      "type": "object"
    },
    "SelectObjectContentRequest": {
      "description": "Request to filter the contents of an Amazon S3 object based on a simple Structured Query Language (SQL) statement. In the request, along with the SQL expression, you must specify a data serialization format (JSON or CSV) of the object. Amazon S3 uses this to parse object data into records. It returns only records that match the specified SQL expression. You must also specify the data serialization format for the response. For more information, see <a href=\"http://docs.aws.amazon.com/AmazonS3/latest/API/RESTObjectSELECTContent.html\">S3Select API Documentation</a>.",
      "properties": {
        "Expression": {
          "$ref": "#/definitions/Expression",
          "description": "The expression that is used to query the object."
        },
        "ExpressionType": {
          "$ref": "#/definitions/ExpressionType",
          "description": "The type of the provided expression (for example., SQL)."
        },
        "InputSerialization": {
          "$ref": "#/definitions/InputSerialization",
          "description": "Describes the format of the data in the object that is being queried."
        },
        "OutputSerialization": {
          "$ref": "#/definitions/OutputSerialization",
          "description": "Describes the format of the data that you want Amazon S3 to return in response."
        },
        "RequestProgress": {
          "$ref": "#/definitions/RequestProgress",
          "description": "Specifies if periodic request progress information should be enabled."
        }
      },
      "required": [
        "Expression",
        "ExpressionType",
        "InputSerialization",
        "OutputSerialization"
      ],
      "type": "object"
    },
    "SelectParameters": {
      "description": "Describes the parameters for Select job types.",
      "properties": {
        "Expression": {
          "$ref": "#/definitions/Expression",
          "description": "The expression that is used to query the object."
        },
        "ExpressionType": {
          "$ref": "#/definitions/ExpressionType",
          "description": "The type of the provided expression (e.g., SQL)."
        },
        "InputSerialization": {
          "$ref": "#/definitions/InputSerialization",
          "description": "Describes the serialization format of the object."
        },
        "OutputSerialization": {
          "$ref": "#/definitions/OutputSerialization",
          "description": "Describes how the results of the Select job are serialized."
        }
      },
      "required": [
        "InputSerialization",
        "ExpressionType",
        "Expression",
        "OutputSerialization"
      ],
      "type": "object"
    },
    "ServerSideEncryption": {
      "enum": [
        "AES256",
        "aws:kms"
      ],
      "type": "string"
    },
    "ServerSideEncryptionByDefault": {
      "description": "Describes the default server-side encryption to apply to new objects in the bucket. If Put Object request does not specify any server-side encryption, this default encryption will be applied.",
      "properties": {
        "KMSMasterKeyID": {
          "$ref": "#/definitions/SSEKMSKeyId",
          "description": "KMS master key ID to use for the default encryption. This parameter is allowed if SSEAlgorithm is aws:kms."
        },
        "SSEAlgorithm": {
          "$ref": "#/definitions/ServerSideEncryption",
          "description": "Server-side encryption algorithm to use for the default encryption."
        }
      },
      "required": [
        "SSEAlgorithm"
      ],
      "type": "object"
    },
    "ServerSideEncryptionConfiguration": {
      "description": "Container for server-side encryption configuration rules. Currently S3 supports one rule only.",
      "properties": {
        "Rules": {
          "$ref": "#/definitions/ServerSideEncryptionRules",
          "description": "Container for information about a particular server-side encryption configuration rule."
        }
      },
      "required": [
        "Rules"
      ],
      "type": "object"
    },
    "ServerSideEncryptionRule": {
      "description": "Container for information about a particular server-side encryption configuration rule.",
      "properties": {
        "ApplyServerSideEncryptionByDefault": {
          "$ref": "#/definitions/ServerSideEncryptionByDefault",
          "description": "Describes the default server-side encryption to apply to new objects in the bucket. If Put Object request does not specify any server-side encryption, this default encryption will be applied."
        }
      },
      "type": "object"
    },
    "ServerSideEncryptionRules": {
      "items": {
        "$ref": "#/definitions/ServerSideEncryptionRule"
      },
      "type": "array",
      "xml": {
        "wrapped": false
      }
    },
    "Setting": {
      "type": "boolean"
    },
    "Size": {
      "type": "integer"
    },
    "SourceSelectionCriteria": {
      "description": "A container for filters that define which source objects should be replicated.",
      "properties": {
        "SseKmsEncryptedObjects": {
          "$ref": "#/definitions/SseKmsEncryptedObjects",
          "description": " A container for filter information for the selection of S3 objects encrypted with AWS KMS. If you include <code>SourceSelectionCriteria</code> in the replication configuration, this element is required. "
        }
      },
      "type": "object"
    },
    "SseKmsEncryptedObjects": {
      "description": "A container for filter information for the selection of S3 objects encrypted with AWS KMS.",
      "properties": {
        "Status": {
          "$ref": "#/definitions/SseKmsEncryptedObjectsStatus",
          "description": " If the status is not <code>Enabled</code>, replication for S3 objects encrypted with AWS KMS is disabled."
        }
      },
      "required": [
        "Status"
      ],
      "type": "object"
    },
    "SseKmsEncryptedObjectsStatus": {
      "enum": [
        "Enabled",
        "Disabled"
      ],
      "type": "string"
    },
    "StartAfter": {
      "type": "string"
    },
    "Stats": {
      "properties": {
        "BytesProcessed": {
          "$ref": "#/definitions/BytesProcessed",
          "description": "The total number of uncompressed object bytes processed."
        },
        "BytesReturned": {
          "$ref": "#/definitions/BytesReturned",
          "description": "The total number of bytes of records payload data returned."
        },
        "BytesScanned": {
          "$ref": "#/definitions/BytesScanned",
          "description": "The total number of object bytes scanned."
        }
      },
      "type": "object"
    },
    "StatsEvent": {
      "properties": {
        "Details": {
          "$ref": "#/definitions/Stats",
          "description": "The Stats event details."
        }
      },
      "type": "object"
    },
    "StorageClass": {
      "enum": [
        "STANDARD",
        "REDUCED_REDUNDANCY",
        "STANDARD_IA",
        "ONEZONE_IA",
        "INTELLIGENT_TIERING",
        "GLACIER"
      ],
      "type": "string"
    },
    "StorageClassAnalysis": {
      "properties": {
        "DataExport": {
          "$ref": "#/definitions/StorageClassAnalysisDataExport",
          "description": "A container used to describe how data related to the storage class analysis should be exported."
        }
      },
      "type": "object"
    },
    "StorageClassAnalysisDataExport": {
      "properties": {
        "Destination": {
          "$ref": "#/definitions/AnalyticsExportDestination",
          "description": "The place to store the data for an analysis."
        },
        "OutputSchemaVersion": {
          "$ref": "#/definitions/StorageClassAnalysisSchemaVersion",
          "description": "The version of the output schema to use when exporting data. Must be V_1."
        }
      },
      "required": [
        "OutputSchemaVersion",
        "Destination"
      ],
      "type": "object"
    },
    "StorageClassAnalysisSchemaVersion": {
      "enum": [
        "V_1"
      ],
      "type": "string"
    },
    "Suffix": {
      "type": "string"
    },
    "Tag": {
      "properties": {
        "Key": {
          "$ref": "#/definitions/ObjectKey",
          "description": "Name of the tag."
        },
        "Value": {
          "$ref": "#/definitions/Value",
          "description": "Value of the tag."
        }
      },
      "required": [
        "Key",
        "Value"
      ],
      "type": "object"
    },
    "TagCount": {
      "type": "integer"
    },
    "TagSet": {
      "items": {
        "$ref": "#/definitions/Tag"
      },
      "type": "array"
    },
    "Tagging": {
      "properties": {
        "TagSet": {
          "$ref": "#/definitions/TagSet"
        }
      },
      "required": [
        "TagSet"
      ],
      "type": "object"
    },
    "TaggingDirective": {
      "enum": [
        "COPY",
        "REPLACE"
      ],
      "type": "string"
    },
    "TaggingHeader": {
      "type": "string"
    },
    "TargetBucket": {
      "type": "string"
    },
    "TargetGrant": {
      "properties": {
        "Grantee": {
          "$ref": "#/definitions/Grantee"
        },
        "Permission": {
          "$ref": "#/definitions/BucketLogsPermission",
          "description": "Logging permissions assigned to the Grantee for the bucket."
        }
      },
      "type": "object"
    },
    "TargetGrants": {
      "items": {
        "$ref": "#/definitions/TargetGrant"
      },
      "type": "array"
    },
    "TargetPrefix": {
      "type": "string"
    },
    "Tier": {
      "enum": [
        "Standard",
        "Bulk",
        "Expedited"
      ],
      "type": "string"
    },
    "Token": {
      "type": "string"
    },
    "TopicArn": {
      "type": "string"
    },
    "TopicConfiguration": {
      "description": "A container for specifying the configuration for publication of messages to an Amazon Simple Notification Service (Amazon SNS) topic.when Amazon S3 detects specified events.",
      "properties": {
        "Events": {
          "$ref": "#/definitions/EventList"
        },
        "Filter": {
          "$ref": "#/definitions/NotificationConfigurationFilter"
        },
        "Id": {
          "$ref": "#/definitions/NotificationId"
        },
        "TopicArn": {
          "$ref": "#/definitions/TopicArn",
          "description": "The Amazon Resource Name (ARN) of the Amazon SNS topic to which Amazon S3 will publish a message when it detects events of the specified type."
        }
      },
      "required": [
        "TopicArn",
        "Events"
      ],
      "type": "object"
    },
    "TopicConfigurationDeprecated": {
      "properties": {
        "Event": {
          "$ref": "#/definitions/Event",
          "description": "Bucket event for which to send notifications."
        },
        "Events": {
          "$ref": "#/definitions/EventList"
        },
        "Id": {
          "$ref": "#/definitions/NotificationId"
        },
        "Topic": {
          "$ref": "#/definitions/TopicArn",
          "description": "Amazon SNS topic to which Amazon S3 will publish a message to report the specified events for the bucket."
        }
      },
      "type": "object"
    },
    "TopicConfigurationList": {
      "items": {
        "$ref": "#/definitions/TopicConfiguration"
      },
      "type": "array",
      "xml": {
        "wrapped": false
      }
    },
    "Transition": {
      "properties": {
        "Date": {
          "$ref": "#/definitions/Date",
          "description": "Indicates at what date the object is to be moved or deleted. Should be in GMT ISO 8601 Format."
        },
        "Days": {
          "$ref": "#/definitions/Days",
          "description": "Indicates the lifetime, in days, of the objects that are subject to the rule. The value must be a non-zero positive integer."
        },
        "StorageClass": {
          "$ref": "#/definitions/TransitionStorageClass",
          "description": "The class of storage used to store the object."
        }
      },
      "type": "object"
    },
    "TransitionList": {
      "items": {
        "$ref": "#/definitions/Transition"
      },
      "type": "array",
      "xml": {
        "wrapped": false
      }
    },
    "TransitionStorageClass": {
      "enum": [
        "GLACIER",
        "STANDARD_IA",
        "ONEZONE_IA",
        "INTELLIGENT_TIERING"
      ],
      "type": "string"
    },
    "Type": {
      "enum": [
        "CanonicalUser",
        "AmazonCustomerByEmail",
        "Group"
      ],
      "type": "string"
    },
    "URI": {
      "type": "string"
    },
    "UploadIdMarker": {
      "type": "string"
    },
    "UploadPartCopyOutput": {
      "example": {
        "CopyPartResult": {
          "ETag": "\"b0c6f0e7e054ab8fa2536a2677f8734d\"",
          "LastModified": "2016-12-29T21:24:43.000Z"
        }
      },
      "properties": {
        "CopyPartResult": {
          "$ref": "#/definitions/CopyPartResult"
        }
      },
      "type": "object"
    },
    "UploadPartCopyRequest": {
      "example": {
        "Bucket": "examplebucket",
        "CopySource": "/bucketname/sourceobjectkey",
        "Key": "examplelargeobject",
        "PartNumber": "1",
        "UploadId": "exampleuoh_10OhKhT7YukE9bjzTPRiuaCotmZM_pFngJFir9OZNrSr5cWa3cq3LZSUsfjI4FI7PkP91We7Nrw--"
      },
      "properties": {},
      "type": "object"
    },
    "UploadPartOutput": {
      "example": {
        "ETag": "\"d8c2eafd90c266e19ab9dcacc479f8af\""
      },
      "properties": {},
      "type": "object"
    },
    "UploadPartRequest": {
      "example": {
        "Body": "fileToUpload",
        "Bucket": "examplebucket",
        "Key": "examplelargeobject",
        "PartNumber": "1",
        "UploadId": "xadcOB_7YPBOJuoFiQ9cz4P3Pe6FIZwO4f7wN93uHsNBEw97pl5eNwzExg0LAT2dUN91cOmrEQHDsP3WA60CEg--"
      },
      "properties": {
        "Body": {
          "$ref": "#/definitions/Body",
          "description": "Object data."
        }
      },
      "type": "object"
    },
    "UserMetadata": {
      "items": {
        "$ref": "#/definitions/MetadataEntry"
      },
      "type": "array"
    },
    "Value": {
      "type": "string"
    },
    "VersionIdMarker": {
      "type": "string"
    },
    "VersioningConfiguration": {
      "properties": {
        "MFADelete": {
          "$ref": "#/definitions/MFADelete",
          "description": "Specifies whether MFA delete is enabled in the bucket versioning configuration. This element is only returned if the bucket has been configured with MFA delete. If the bucket has never been so configured, this element is not returned."
        },
        "Status": {
          "$ref": "#/definitions/BucketVersioningStatus",
          "description": "The versioning state of the bucket."
        }
      },
      "type": "object"
    },
    "WebsiteConfiguration": {
      "properties": {
        "ErrorDocument": {
          "$ref": "#/definitions/ErrorDocument"
        },
        "IndexDocument": {
          "$ref": "#/definitions/IndexDocument"
        },
        "RedirectAllRequestsTo": {
          "$ref": "#/definitions/RedirectAllRequestsTo"
        },
        "RoutingRules": {
          "$ref": "#/definitions/RoutingRules"
        }
      },
      "type": "object"
    },
    "WebsiteRedirectLocation": {
      "type": "string"
    },
    "Years": {
      "type": "integer"
    }
  }
}
