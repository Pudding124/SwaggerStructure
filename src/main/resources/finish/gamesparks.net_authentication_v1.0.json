{
  "swagger": "2.0",
  "schemes": [
    "https"
  ],
  "host": "api.gamesparks.net",
  "info": {
    "contact": {
      "email": "info@gamesparks.com",
      "x-twitter": "GameSparksltd"
    },
    "description": "All Request objects can be passed to this API. This interface is designed for server-to-server connections and a playerId can be passed to indicate the playerId you want the request to be processed as. An optional authToken may also be required, depending on your credential settings.<br>Both playerId and authToken should be passed as parameters in the body of the request.<br> The structure of the host is:{apiKey}.{stage}.gamesparks.net",
    "termsOfService": "http://www.gamesparks.com/gamesparks-terms-of-use/",
    "title": "GameSparks Request",
    "version": "v1.0",
    "x-apisguru-categories": [
      "developer_tools"
    ],
    "x-logo": {
      "url": "https://api.apis.guru/v2/cache/logo/https_twitter.com_GameSparksltd_profile_image.jpeg"
    },
    "x-origin": [
      {
        "format": "swagger",
        "url": "https://api.gamesparks.net/restRequestApiDocs.json",
        "version": "2.0"
      }
    ],
    "x-preferred": true,
    "x-providerName": "gamesparks.net",
    "x-serviceName": "authentication"
  },
  "tags": [
    {
      "name": "Player"
    },
    {
      "name": "Multiplayer"
    },
    {
      "name": "Events"
    },
    {
      "name": "Authentication"
    },
    {
      "name": "Misc"
    },
    {
      "name": "Store"
    },
    {
      "name": "Teams"
    },
    {
      "name": "Admin"
    },
    {
      "name": "Analytics"
    },
    {
      "name": "Leaderboards"
    },
    {
      "name": "Messages"
    }
  ],
  "paths": {
    "/rs/{credential}/{secret}/AcceptChallengeRequest": {
      "post": {
        "description": "Accepts a challenge that has been issued to the current player.",
        "parameters": [
          {
            "description": "The short code of the credential used for the request",
            "in": "path",
            "name": "credential",
            "required": true,
            "type": "string"
          },
          {
            "description": "The secret for the credential used for the request",
            "in": "path",
            "name": "secret",
            "required": true,
            "type": "string"
          },
          {
            "description": "JSON representation of the request",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/AcceptChallengeRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/AcceptChallengeResponse"
            }
          },
          "403": {
            "description": "API key, credential type or secret not valid"
          }
        },
        "tags": [
          "Multiplayer"
        ]
      }
    },
    "/rs/{credential}/{secret}/AccountDetailsRequest": {
      "post": {
        "description": "Retrieves the details of the current authenticated player.",
        "parameters": [
          {
            "description": "The short code of the credential used for the request",
            "in": "path",
            "name": "credential",
            "required": true,
            "type": "string"
          },
          {
            "description": "The secret for the credential used for the request",
            "in": "path",
            "name": "secret",
            "required": true,
            "type": "string"
          },
          {
            "description": "JSON representation of the request",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/AccountDetailsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/AccountDetailsResponse"
            }
          },
          "403": {
            "description": "API key, credential type or secret not valid"
          }
        },
        "tags": [
          "Player"
        ]
      }
    },
    "/rs/{credential}/{secret}/AmazonBuyGoodsRequest": {
      "post": {
        "description": "Processes the receipt from an Amazon in app purchase.\r\nThe GameSparks platform will validate the amazonUserId and receiptId with Amazon using the Amazon Purchase Secret configured against the game.\r\nThe receiptId in the data will be recorded and the request will be rejected if the receiptId has previously been processed, this prevents replay attacks.\r\nOnce verfied, the players account will be credited with the Virtual Good, or Virtual Currency the purchase contains. The virtual good will be looked up by matching the productId in the receipt with the 'Amazon Product Id' configured against the virtual good.",
        "parameters": [
          {
            "description": "The short code of the credential used for the request",
            "in": "path",
            "name": "credential",
            "required": true,
            "type": "string"
          },
          {
            "description": "The secret for the credential used for the request",
            "in": "path",
            "name": "secret",
            "required": true,
            "type": "string"
          },
          {
            "description": "JSON representation of the request",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/AmazonBuyGoodsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/BuyVirtualGoodResponse"
            }
          },
          "403": {
            "description": "API key, credential type or secret not valid"
          }
        },
        "tags": [
          "Store"
        ]
      }
    },
    "/rs/{credential}/{secret}/AmazonConnectRequest": {
      "post": {
        "description": "Allows an Amazon access token to be used as an authentication mechanism.\r\nOnce authenticated the platform can determine the current players details from the Amazon platform and store them within GameSparks.\r\nIf the Amazon user is already linked to a player, the current session will switch to the linked player.\r\nIf the current player has previously created an account using either DeviceAuthentictionRequest or RegistrationRequest AND the Amazon user is not already registered with the game, the Amazon user will be linked to the current player.\r\nIf the current player has not authenticated and the Amazon user is not known, a new player will be created using the Amazon details and the session will be authenticated against the new player.\r\nIf the Amazon user is already known, the session will switch to being the previously created user.",
        "parameters": [
          {
            "description": "The short code of the credential used for the request",
            "in": "path",
            "name": "credential",
            "required": true,
            "type": "string"
          },
          {
            "description": "The secret for the credential used for the request",
            "in": "path",
            "name": "secret",
            "required": true,
            "type": "string"
          },
          {
            "description": "JSON representation of the request",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/AmazonConnectRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/AuthenticationResponse"
            }
          },
          "403": {
            "description": "API key, credential type or secret not valid"
          }
        },
        "tags": [
          "Authentication"
        ]
      }
    },
    "/rs/{credential}/{secret}/AnalyticsRequest": {
      "post": {
        "description": "Records some custom analytical data.\r\nSimple analytics, where you just need to track the number of times something happened, just take a key parameter. We'll record the players id against the data to allow you to report on averages per user\r\nTimed analytics allow you to send start and end timer requests, and with this data GameSparks can track the length of time something takes.\r\nIf an end request is sent without a matching start timer the request will fail silently and your analytics data might not contain what you expect.\r\nIf both start and end are supplied, the request will be treated as a start timer.\r\nAn additional data payload can be attached to the event for advanced reporting. This data can be a string, number or JSON object.\r\nIf a second start timer is created using a key that has already had a start timer created without an end, the previous one will be marked as abandoned.",
        "parameters": [
          {
            "description": "The short code of the credential used for the request",
            "in": "path",
            "name": "credential",
            "required": true,
            "type": "string"
          },
          {
            "description": "The secret for the credential used for the request",
            "in": "path",
            "name": "secret",
            "required": true,
            "type": "string"
          },
          {
            "description": "JSON representation of the request",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/AnalyticsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/AnalyticsResponse"
            }
          },
          "403": {
            "description": "API key, credential type or secret not valid"
          }
        },
        "tags": [
          "Analytics"
        ]
      }
    },
    "/rs/{credential}/{secret}/AroundMeLeaderboardRequest": {
      "post": {
        "description": "Returns leaderboard data that is adjacent to the currently signed in player's position within the given leaderboard.",
        "parameters": [
          {
            "description": "The short code of the credential used for the request",
            "in": "path",
            "name": "credential",
            "required": true,
            "type": "string"
          },
          {
            "description": "The secret for the credential used for the request",
            "in": "path",
            "name": "secret",
            "required": true,
            "type": "string"
          },
          {
            "description": "JSON representation of the request",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/AroundMeLeaderboardRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/AroundMeLeaderboardResponse"
            }
          },
          "403": {
            "description": "API key, credential type or secret not valid"
          }
        },
        "tags": [
          "Leaderboards"
        ]
      }
    },
    "/rs/{credential}/{secret}/AuthenticationRequest": {
      "post": {
        "description": "Provides authentication using a username/password combination.\r\nThe username will have been previously created using a RegistrationRequest.",
        "parameters": [
          {
            "description": "The short code of the credential used for the request",
            "in": "path",
            "name": "credential",
            "required": true,
            "type": "string"
          },
          {
            "description": "The secret for the credential used for the request",
            "in": "path",
            "name": "secret",
            "required": true,
            "type": "string"
          },
          {
            "description": "JSON representation of the request",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/AuthenticationRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/AuthenticationResponse"
            }
          },
          "403": {
            "description": "API key, credential type or secret not valid"
          }
        },
        "tags": [
          "Authentication"
        ]
      }
    },
    "/rs/{credential}/{secret}/BatchAdminRequest": {
      "post": {
        "description": "Performs a request for multiple players.",
        "parameters": [
          {
            "description": "The short code of the credential used for the request",
            "in": "path",
            "name": "credential",
            "required": true,
            "type": "string"
          },
          {
            "description": "The secret for the credential used for the request",
            "in": "path",
            "name": "secret",
            "required": true,
            "type": "string"
          },
          {
            "description": "JSON representation of the request",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/BatchAdminRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/BatchAdminResponse"
            }
          },
          "403": {
            "description": "API key, credential type or secret not valid"
          }
        },
        "tags": [
          "Admin"
        ]
      }
    },
    "/rs/{credential}/{secret}/BuyVirtualGoodsRequest": {
      "post": {
        "description": "Purchases a virtual good with an in game currency. Once purchased the virtual good will be added to the players account.",
        "parameters": [
          {
            "description": "The short code of the credential used for the request",
            "in": "path",
            "name": "credential",
            "required": true,
            "type": "string"
          },
          {
            "description": "The secret for the credential used for the request",
            "in": "path",
            "name": "secret",
            "required": true,
            "type": "string"
          },
          {
            "description": "JSON representation of the request",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/BuyVirtualGoodsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/BuyVirtualGoodResponse"
            }
          },
          "403": {
            "description": "API key, credential type or secret not valid"
          }
        },
        "tags": [
          "Store"
        ]
      }
    },
    "/rs/{credential}/{secret}/CancelBulkJobAdminRequest": {
      "post": {
        "description": "Cancel one or more bulk jobs.",
        "parameters": [
          {
            "description": "The short code of the credential used for the request",
            "in": "path",
            "name": "credential",
            "required": true,
            "type": "string"
          },
          {
            "description": "The secret for the credential used for the request",
            "in": "path",
            "name": "secret",
            "required": true,
            "type": "string"
          },
          {
            "description": "JSON representation of the request",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CancelBulkJobAdminRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CancelBulkJobAdminResponse"
            }
          },
          "403": {
            "description": "API key, credential type or secret not valid"
          }
        },
        "tags": [
          "Admin"
        ]
      }
    },
    "/rs/{credential}/{secret}/ChangeUserDetailsRequest": {
      "post": {
        "description": "Change the details of the currently signed in Player.",
        "parameters": [
          {
            "description": "The short code of the credential used for the request",
            "in": "path",
            "name": "credential",
            "required": true,
            "type": "string"
          },
          {
            "description": "The secret for the credential used for the request",
            "in": "path",
            "name": "secret",
            "required": true,
            "type": "string"
          },
          {
            "description": "JSON representation of the request",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ChangeUserDetailsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ChangeUserDetailsResponse"
            }
          },
          "403": {
            "description": "API key, credential type or secret not valid"
          }
        },
        "tags": [
          "Player"
        ]
      }
    },
    "/rs/{credential}/{secret}/ChatOnChallengeRequest": {
      "post": {
        "description": "Sends a message to all players involved in the challenge. The current player must be involved in the challenge for the message to be sent.\r\nAs the message is sent to all players, the current player will also see details of the message in the response. Read the section on response message aggregation for a description of this.",
        "parameters": [
          {
            "description": "The short code of the credential used for the request",
            "in": "path",
            "name": "credential",
            "required": true,
            "type": "string"
          },
          {
            "description": "The secret for the credential used for the request",
            "in": "path",
            "name": "secret",
            "required": true,
            "type": "string"
          },
          {
            "description": "JSON representation of the request",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ChatOnChallengeRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ChatOnChallengeResponse"
            }
          },
          "403": {
            "description": "API key, credential type or secret not valid"
          }
        },
        "tags": [
          "Multiplayer"
        ]
      }
    },
    "/rs/{credential}/{secret}/ConsumeVirtualGoodRequest": {
      "post": {
        "description": "Consumes a given amount of the specified virtual good.",
        "parameters": [
          {
            "description": "The short code of the credential used for the request",
            "in": "path",
            "name": "credential",
            "required": true,
            "type": "string"
          },
          {
            "description": "The secret for the credential used for the request",
            "in": "path",
            "name": "secret",
            "required": true,
            "type": "string"
          },
          {
            "description": "JSON representation of the request",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ConsumeVirtualGoodRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ConsumeVirtualGoodResponse"
            }
          },
          "403": {
            "description": "API key, credential type or secret not valid"
          }
        },
        "tags": [
          "Store"
        ]
      }
    },
    "/rs/{credential}/{secret}/CreateChallengeRequest": {
      "post": {
        "description": "Issues a challenge to a group of players from the currently signed in player.\r\nThe endTime field must be present unless the challenge template has an achievement set in the 'First to Achievement' field.\r\nThe usersToChallenge field must be present for this request if the acessType is PRIVATE (which is the default).",
        "parameters": [
          {
            "description": "The short code of the credential used for the request",
            "in": "path",
            "name": "credential",
            "required": true,
            "type": "string"
          },
          {
            "description": "The secret for the credential used for the request",
            "in": "path",
            "name": "secret",
            "required": true,
            "type": "string"
          },
          {
            "description": "JSON representation of the request",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CreateChallengeRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateChallengeResponse"
            }
          },
          "403": {
            "description": "API key, credential type or secret not valid"
          }
        },
        "tags": [
          "Multiplayer"
        ]
      }
    },
    "/rs/{credential}/{secret}/CreateTeamRequest": {
      "post": {
        "description": "Allows a new team to be created.",
        "parameters": [
          {
            "description": "The short code of the credential used for the request",
            "in": "path",
            "name": "credential",
            "required": true,
            "type": "string"
          },
          {
            "description": "The secret for the credential used for the request",
            "in": "path",
            "name": "secret",
            "required": true,
            "type": "string"
          },
          {
            "description": "JSON representation of the request",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CreateTeamRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateTeamResponse"
            }
          },
          "403": {
            "description": "API key, credential type or secret not valid"
          }
        },
        "tags": [
          "Teams"
        ]
      }
    },
    "/rs/{credential}/{secret}/DeclineChallengeRequest": {
      "post": {
        "description": "Declines a challenge that has been issued to the current player.",
        "parameters": [
          {
            "description": "The short code of the credential used for the request",
            "in": "path",
            "name": "credential",
            "required": true,
            "type": "string"
          },
          {
            "description": "The secret for the credential used for the request",
            "in": "path",
            "name": "secret",
            "required": true,
            "type": "string"
          },
          {
            "description": "JSON representation of the request",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/DeclineChallengeRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeclineChallengeResponse"
            }
          },
          "403": {
            "description": "API key, credential type or secret not valid"
          }
        },
        "tags": [
          "Multiplayer"
        ]
      }
    },
    "/rs/{credential}/{secret}/DeviceAuthenticationRequest": {
      "post": {
        "description": "Allows a device id to be used to create an anonymous profile in the game.\r\nThis allows the player to be tracked and have data stored against them before using FacebookConnectRequest to create a full profile.\r\nDeviceAuthenticationRequest should not be used in conjunction with RegistrationRequest as the two accounts will not be merged.",
        "parameters": [
          {
            "description": "The short code of the credential used for the request",
            "in": "path",
            "name": "credential",
            "required": true,
            "type": "string"
          },
          {
            "description": "The secret for the credential used for the request",
            "in": "path",
            "name": "secret",
            "required": true,
            "type": "string"
          },
          {
            "description": "JSON representation of the request",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/DeviceAuthenticationRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/AuthenticationResponse"
            }
          },
          "403": {
            "description": "API key, credential type or secret not valid"
          }
        },
        "tags": [
          "Authentication"
        ]
      }
    },
    "/rs/{credential}/{secret}/DismissMessageRequest": {
      "post": {
        "description": "Allows a message to be dismissed. Once dismissed the message will no longer appear in either ListMessageResponse or ListMessageSummaryResponse.",
        "parameters": [
          {
            "description": "The short code of the credential used for the request",
            "in": "path",
            "name": "credential",
            "required": true,
            "type": "string"
          },
          {
            "description": "The secret for the credential used for the request",
            "in": "path",
            "name": "secret",
            "required": true,
            "type": "string"
          },
          {
            "description": "JSON representation of the request",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/DismissMessageRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DismissMessageResponse"
            }
          },
          "403": {
            "description": "API key, credential type or secret not valid"
          }
        },
        "tags": [
          "Player"
        ]
      }
    },
    "/rs/{credential}/{secret}/DismissMultipleMessagesRequest": {
      "post": {
        "description": "Allows multiple messages to be dismissed. Once dismissed the messages will no longer appear in either ListMessageResponse or ListMessageSummaryResponse.",
        "parameters": [
          {
            "description": "The short code of the credential used for the request",
            "in": "path",
            "name": "credential",
            "required": true,
            "type": "string"
          },
          {
            "description": "The secret for the credential used for the request",
            "in": "path",
            "name": "secret",
            "required": true,
            "type": "string"
          },
          {
            "description": "JSON representation of the request",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/DismissMultipleMessagesRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DismissMultipleMessagesResponse"
            }
          },
          "403": {
            "description": "API key, credential type or secret not valid"
          }
        },
        "tags": [
          "Player"
        ]
      }
    },
    "/rs/{credential}/{secret}/DropTeamRequest": {
      "post": {
        "description": "Allows a player to drop a team.",
        "parameters": [
          {
            "description": "The short code of the credential used for the request",
            "in": "path",
            "name": "credential",
            "required": true,
            "type": "string"
          },
          {
            "description": "The secret for the credential used for the request",
            "in": "path",
            "name": "secret",
            "required": true,
            "type": "string"
          },
          {
            "description": "JSON representation of the request",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/DropTeamRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DropTeamResponse"
            }
          },
          "403": {
            "description": "API key, credential type or secret not valid"
          }
        },
        "tags": [
          "Teams"
        ]
      }
    },
    "/rs/{credential}/{secret}/EndSessionRequest": {
      "post": {
        "description": "Records the end of the current player's active session.\r\nThe SDK will automatically create a new session ID when the application is started, this method can be useful to call when the app goes into the background to allow reporting on player session length.",
        "parameters": [
          {
            "description": "The short code of the credential used for the request",
            "in": "path",
            "name": "credential",
            "required": true,
            "type": "string"
          },
          {
            "description": "The secret for the credential used for the request",
            "in": "path",
            "name": "secret",
            "required": true,
            "type": "string"
          },
          {
            "description": "JSON representation of the request",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/EndSessionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/EndSessionResponse"
            }
          },
          "403": {
            "description": "API key, credential type or secret not valid"
          }
        },
        "tags": [
          "Analytics"
        ]
      }
    },
    "/rs/{credential}/{secret}/FacebookConnectRequest": {
      "post": {
        "description": "Allows either a Facebook access token, or a Facebook authorization code to be used as an authentication mechanism.\r\nOnce authenticated the platform can determine the current players details from the Facebook platform and store them within GameSparks.\r\nGameSparks will determine the player's friends and whether any of them are currently registered with the game.\r\nIf the Facebook user is already linked to a player, the current session will switch to the linked player.\r\nIf the current player has previously created an account using either DeviceAuthenticationRequest or RegistrationRequest AND the Facebook user is not already registered with the game, the Facebook user will be linked to the current player.\r\nIf the current player has not authenticated and the Facebook user is not known, a new player will be created using the Facebook details and the session will be authenticated against the new player.\r\nIf the Facebook user is already known, the session will switch to being the previously created user.",
        "parameters": [
          {
            "description": "The short code of the credential used for the request",
            "in": "path",
            "name": "credential",
            "required": true,
            "type": "string"
          },
          {
            "description": "The secret for the credential used for the request",
            "in": "path",
            "name": "secret",
            "required": true,
            "type": "string"
          },
          {
            "description": "JSON representation of the request",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/FacebookConnectRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/AuthenticationResponse"
            }
          },
          "403": {
            "description": "API key, credential type or secret not valid"
          }
        },
        "tags": [
          "Authentication"
        ]
      }
    },
    "/rs/{credential}/{secret}/FindChallengeRequest": {
      "post": {
        "description": "Allows a player to find challenges that they are eligible to join.",
        "parameters": [
          {
            "description": "The short code of the credential used for the request",
            "in": "path",
            "name": "credential",
            "required": true,
            "type": "string"
          },
          {
            "description": "The secret for the credential used for the request",
            "in": "path",
            "name": "secret",
            "required": true,
            "type": "string"
          },
          {
            "description": "JSON representation of the request",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/FindChallengeRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/FindChallengeResponse"
            }
          },
          "403": {
            "description": "API key, credential type or secret not valid"
          }
        },
        "tags": [
          "Multiplayer"
        ]
      }
    },
    "/rs/{credential}/{secret}/FindMatchRequest": {
      "post": {
        "description": "@Deprecated. Use MatchmakingRequest instead.\r\nFind a match for this player, using the given skill and matchShortCode.\r\nPlayers looking for a match using the same matchShortCode will be considered for a match, based on the matchConfig.\r\nEach player must match the other for the match to be found.",
        "parameters": [
          {
            "description": "The short code of the credential used for the request",
            "in": "path",
            "name": "credential",
            "required": true,
            "type": "string"
          },
          {
            "description": "The secret for the credential used for the request",
            "in": "path",
            "name": "secret",
            "required": true,
            "type": "string"
          },
          {
            "description": "JSON representation of the request",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/FindMatchRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/FindMatchResponse"
            }
          },
          "403": {
            "description": "API key, credential type or secret not valid"
          }
        },
        "tags": [
          "Multiplayer"
        ]
      }
    },
    "/rs/{credential}/{secret}/FindPendingMatchesRequest": {
      "post": {
        "description": "Find other pending matches that will match this player's previously submitted MatchmakingRequest.\r\nUsed for manual matching of players, where you want control over which pending match should be chosen.\r\nEach player must match the other for the pending match to be found.",
        "parameters": [
          {
            "description": "The short code of the credential used for the request",
            "in": "path",
            "name": "credential",
            "required": true,
            "type": "string"
          },
          {
            "description": "The secret for the credential used for the request",
            "in": "path",
            "name": "secret",
            "required": true,
            "type": "string"
          },
          {
            "description": "JSON representation of the request",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/FindPendingMatchesRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/FindPendingMatchesResponse"
            }
          },
          "403": {
            "description": "API key, credential type or secret not valid"
          }
        },
        "tags": [
          "Multiplayer"
        ]
      }
    },
    "/rs/{credential}/{secret}/GameCenterConnectRequest": {
      "post": {
        "description": "Allows an Apple account that has GameCenter to be used as an authentication mechanism.\r\nThe request must supply the GameCenter user details, such as the player id and username.\r\nIf the GameCenter user is already linked to a player, the current session will switch to the linked player.\r\nIf the current player has previously created an account using either DeviceAuthentictionRequest or RegistrationRequest AND the GameCenter user is not already registered with the game, the GameCenter user will be linked to the current player.\r\nIf the current player has not authenticated and the GameCenter user is not known, a new player will be created using the GameCenter details and the session will be authenticated against the new player.\r\nIf the GameCenter user is already known, the session will switch to being the previously created user.\r\nThis API call requires the output details from GKLocalPlayer.generateIdentityVerificationSignatureWithCompletionHandler on your iOS device",
        "parameters": [
          {
            "description": "The short code of the credential used for the request",
            "in": "path",
            "name": "credential",
            "required": true,
            "type": "string"
          },
          {
            "description": "The secret for the credential used for the request",
            "in": "path",
            "name": "secret",
            "required": true,
            "type": "string"
          },
          {
            "description": "JSON representation of the request",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/GameCenterConnectRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/AuthenticationResponse"
            }
          },
          "403": {
            "description": "API key, credential type or secret not valid"
          }
        },
        "tags": [
          "Authentication"
        ]
      }
    },
    "/rs/{credential}/{secret}/GetChallengeRequest": {
      "post": {
        "description": "Gets the details of a challenge. The current player must be involved in the challenge for the request to succeed.",
        "parameters": [
          {
            "description": "The short code of the credential used for the request",
            "in": "path",
            "name": "credential",
            "required": true,
            "type": "string"
          },
          {
            "description": "The secret for the credential used for the request",
            "in": "path",
            "name": "secret",
            "required": true,
            "type": "string"
          },
          {
            "description": "JSON representation of the request",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/GetChallengeRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetChallengeResponse"
            }
          },
          "403": {
            "description": "API key, credential type or secret not valid"
          }
        },
        "tags": [
          "Multiplayer"
        ]
      }
    },
    "/rs/{credential}/{secret}/GetDownloadableRequest": {
      "post": {
        "description": "Returns a secure, time sensitive url to allow the game to download a piece of downloadable content stored in the GameSparks platform.",
        "parameters": [
          {
            "description": "The short code of the credential used for the request",
            "in": "path",
            "name": "credential",
            "required": true,
            "type": "string"
          },
          {
            "description": "The secret for the credential used for the request",
            "in": "path",
            "name": "secret",
            "required": true,
            "type": "string"
          },
          {
            "description": "JSON representation of the request",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/GetDownloadableRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetDownloadableResponse"
            }
          },
          "403": {
            "description": "API key, credential type or secret not valid"
          }
        },
        "tags": [
          "Misc"
        ]
      }
    },
    "/rs/{credential}/{secret}/GetLeaderboardEntriesRequest": {
      "post": {
        "description": "Get the leaderboard entry data for the current player or a given player. \r\nFor each leaderboard it returns the hichest score the player has",
        "parameters": [
          {
            "description": "The short code of the credential used for the request",
            "in": "path",
            "name": "credential",
            "required": true,
            "type": "string"
          },
          {
            "description": "The secret for the credential used for the request",
            "in": "path",
            "name": "secret",
            "required": true,
            "type": "string"
          },
          {
            "description": "JSON representation of the request",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/GetLeaderboardEntriesRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetLeaderboardEntriesResponse"
            }
          },
          "403": {
            "description": "API key, credential type or secret not valid"
          }
        },
        "tags": [
          "Leaderboards"
        ]
      }
    },
    "/rs/{credential}/{secret}/GetMessageRequest": {
      "post": {
        "description": "Returns the full details of a message.",
        "parameters": [
          {
            "description": "The short code of the credential used for the request",
            "in": "path",
            "name": "credential",
            "required": true,
            "type": "string"
          },
          {
            "description": "The secret for the credential used for the request",
            "in": "path",
            "name": "secret",
            "required": true,
            "type": "string"
          },
          {
            "description": "JSON representation of the request",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/GetMessageRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetMessageResponse"
            }
          },
          "403": {
            "description": "API key, credential type or secret not valid"
          }
        },
        "tags": [
          "Player"
        ]
      }
    },
    "/rs/{credential}/{secret}/GetMyTeamsRequest": {
      "post": {
        "description": "Get the teams that the player is in. Can be filtered on team type and also on those teams that the player owns.",
        "parameters": [
          {
            "description": "The short code of the credential used for the request",
            "in": "path",
            "name": "credential",
            "required": true,
            "type": "string"
          },
          {
            "description": "The secret for the credential used for the request",
            "in": "path",
            "name": "secret",
            "required": true,
            "type": "string"
          },
          {
            "description": "JSON representation of the request",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/GetMyTeamsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetMyTeamsResponse"
            }
          },
          "403": {
            "description": "API key, credential type or secret not valid"
          }
        },
        "tags": [
          "Teams"
        ]
      }
    },
    "/rs/{credential}/{secret}/GetPropertyRequest": {
      "post": {
        "description": "Get the property for the given short Code.",
        "parameters": [
          {
            "description": "The short code of the credential used for the request",
            "in": "path",
            "name": "credential",
            "required": true,
            "type": "string"
          },
          {
            "description": "The secret for the credential used for the request",
            "in": "path",
            "name": "secret",
            "required": true,
            "type": "string"
          },
          {
            "description": "JSON representation of the request",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/GetPropertyRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetPropertyResponse"
            }
          },
          "403": {
            "description": "API key, credential type or secret not valid"
          }
        },
        "tags": [
          "Misc"
        ]
      }
    },
    "/rs/{credential}/{secret}/GetPropertySetRequest": {
      "post": {
        "description": "Get the property set for the given short Code.",
        "parameters": [
          {
            "description": "The short code of the credential used for the request",
            "in": "path",
            "name": "credential",
            "required": true,
            "type": "string"
          },
          {
            "description": "The secret for the credential used for the request",
            "in": "path",
            "name": "secret",
            "required": true,
            "type": "string"
          },
          {
            "description": "JSON representation of the request",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/GetPropertySetRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetPropertySetResponse"
            }
          },
          "403": {
            "description": "API key, credential type or secret not valid"
          }
        },
        "tags": [
          "Misc"
        ]
      }
    },
    "/rs/{credential}/{secret}/GetTeamRequest": {
      "post": {
        "description": "Allows the details of a team to be retrieved.",
        "parameters": [
          {
            "description": "The short code of the credential used for the request",
            "in": "path",
            "name": "credential",
            "required": true,
            "type": "string"
          },
          {
            "description": "The secret for the credential used for the request",
            "in": "path",
            "name": "secret",
            "required": true,
            "type": "string"
          },
          {
            "description": "JSON representation of the request",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/GetTeamRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetTeamResponse"
            }
          },
          "403": {
            "description": "API key, credential type or secret not valid"
          }
        },
        "tags": [
          "Teams"
        ]
      }
    },
    "/rs/{credential}/{secret}/GetUploadUrlRequest": {
      "post": {
        "description": "Returns a secure, time sensitive URL to allow the game to upload a piece of player content to the GameSparks platform.",
        "parameters": [
          {
            "description": "The short code of the credential used for the request",
            "in": "path",
            "name": "credential",
            "required": true,
            "type": "string"
          },
          {
            "description": "The secret for the credential used for the request",
            "in": "path",
            "name": "secret",
            "required": true,
            "type": "string"
          },
          {
            "description": "JSON representation of the request",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/GetUploadUrlRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetUploadUrlResponse"
            }
          },
          "403": {
            "description": "API key, credential type or secret not valid"
          }
        },
        "tags": [
          "Misc"
        ]
      }
    },
    "/rs/{credential}/{secret}/GetUploadedRequest": {
      "post": {
        "description": "Returns a secure, time sensitive URL to a piece of content that was previously uploaded to the GameSparks platform by a player.",
        "parameters": [
          {
            "description": "The short code of the credential used for the request",
            "in": "path",
            "name": "credential",
            "required": true,
            "type": "string"
          },
          {
            "description": "The secret for the credential used for the request",
            "in": "path",
            "name": "secret",
            "required": true,
            "type": "string"
          },
          {
            "description": "JSON representation of the request",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/GetUploadedRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetUploadedResponse"
            }
          },
          "403": {
            "description": "API key, credential type or secret not valid"
          }
        },
        "tags": [
          "Misc"
        ]
      }
    },
    "/rs/{credential}/{secret}/GooglePlayBuyGoodsRequest": {
      "post": {
        "description": "Processes the response from a Google Play in app purchase flow.\r\nThe GameSparks platform will validate the signature and signed data with the Google Play Public Key configured against the game.\r\nThe orderId in the data will be recorded and the request will be rejected if the orderId has previously been processed, this prevents replay attacks.\r\nOnce verfied, the players account will be credited with the Virtual Good, or Virtual Currency the purchase contains. The virtual good will be looked up by matching the productId in the signed data with the 'Google Product ID' configured against the virtual good.\r\nIt is critical that the signedData is sent exactly as it is returned form google, including any whitespace. Any modification of the signedData will cause the verification process to fail.",
        "parameters": [
          {
            "description": "The short code of the credential used for the request",
            "in": "path",
            "name": "credential",
            "required": true,
            "type": "string"
          },
          {
            "description": "The secret for the credential used for the request",
            "in": "path",
            "name": "secret",
            "required": true,
            "type": "string"
          },
          {
            "description": "JSON representation of the request",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/GooglePlayBuyGoodsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/BuyVirtualGoodResponse"
            }
          },
          "403": {
            "description": "API key, credential type or secret not valid"
          }
        },
        "tags": [
          "Store"
        ]
      }
    },
    "/rs/{credential}/{secret}/GooglePlayConnectRequest": {
      "post": {
        "description": "Allows either a Google Play access code or an access token to be used as an authentication mechanism.\r\nThe access code needs to have at least the https://www.googleapis.com/auth/games scope.\r\nFor more details about Google OAuth 2.0 scopes refer to this: https://developers.google.com/identity/protocols/googlescopes#gamesConfigurationv1configuration\r\nIf the Google Play user is already linked to a player, the current session will switch to the linked player.\r\nIf the current player has previously created an account using either DeviceAuthentictionRequest or RegistrationRequest AND the Google Play user is not already registered with the game, the Google Play user will be linked to the current player.\r\nIf the current player has not authenticated and the Google Play user is not known, a new player will be created using the Google Play details and the session will be authenticated against the new player.\r\nIf the Google Play user is already known, the session will switch to being the previously created user.",
        "parameters": [
          {
            "description": "The short code of the credential used for the request",
            "in": "path",
            "name": "credential",
            "required": true,
            "type": "string"
          },
          {
            "description": "The secret for the credential used for the request",
            "in": "path",
            "name": "secret",
            "required": true,
            "type": "string"
          },
          {
            "description": "JSON representation of the request",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/GooglePlayConnectRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/AuthenticationResponse"
            }
          },
          "403": {
            "description": "API key, credential type or secret not valid"
          }
        },
        "tags": [
          "Authentication"
        ]
      }
    },
    "/rs/{credential}/{secret}/GooglePlusConnectRequest": {
      "post": {
        "description": "Allows either a Google Plus access code or an authentication token to be used as an authentication mechanism.\r\nOnce authenticated the platform can determine the current players details from the Google Plus platform and store them within GameSparks.\r\nGameSparks will determine the player's friends and whether any of them are currently registered with the game.\r\nIf the Google Plus user is already linked to a player, the current session will switch to the linked player.\r\nIf the current player has previously created an account using either DeviceAuthentictionRequest or RegistrationRequest AND the Google Plus user is not already registered with the game, the Google Plus user will be linked to the current player.\r\nIf the current player has not authenticated and the Google Plus user is not known, a new player will be created using the Google Plus details and the session will be authenticated against the new player.\r\nIf the Google Plus user is already known, the session will switch to being the previously created user.",
        "parameters": [
          {
            "description": "The short code of the credential used for the request",
            "in": "path",
            "name": "credential",
            "required": true,
            "type": "string"
          },
          {
            "description": "The secret for the credential used for the request",
            "in": "path",
            "name": "secret",
            "required": true,
            "type": "string"
          },
          {
            "description": "JSON representation of the request",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/GooglePlusConnectRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/AuthenticationResponse"
            }
          },
          "403": {
            "description": "API key, credential type or secret not valid"
          }
        },
        "tags": [
          "Authentication"
        ]
      }
    },
    "/rs/{credential}/{secret}/IOSBuyGoodsRequest": {
      "post": {
        "description": "Processes a transaction receipt from an App Store in app purchase.\r\nThe GameSparks platform will validate the receipt with Apple and process the response. The transaction_id in the response will be recorded and the request will be rejected if the transaction_id has previously been processed, this prevents replay attacks.\r\nOnce verified, the players account will be credited with the Virtual Good, or Virtual Currency the purchase contains. The virtual good will be looked up by matching the product_id in the response with the 'IOS Product ID' configured against the virtual good.",
        "parameters": [
          {
            "description": "The short code of the credential used for the request",
            "in": "path",
            "name": "credential",
            "required": true,
            "type": "string"
          },
          {
            "description": "The secret for the credential used for the request",
            "in": "path",
            "name": "secret",
            "required": true,
            "type": "string"
          },
          {
            "description": "JSON representation of the request",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/IOSBuyGoodsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/BuyVirtualGoodResponse"
            }
          },
          "403": {
            "description": "API key, credential type or secret not valid"
          }
        },
        "tags": [
          "Store"
        ]
      }
    },
    "/rs/{credential}/{secret}/JoinChallengeRequest": {
      "post": {
        "description": "Allows a player to join an open challenge.",
        "parameters": [
          {
            "description": "The short code of the credential used for the request",
            "in": "path",
            "name": "credential",
            "required": true,
            "type": "string"
          },
          {
            "description": "The secret for the credential used for the request",
            "in": "path",
            "name": "secret",
            "required": true,
            "type": "string"
          },
          {
            "description": "JSON representation of the request",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/JoinChallengeRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/JoinChallengeResponse"
            }
          },
          "403": {
            "description": "API key, credential type or secret not valid"
          }
        },
        "tags": [
          "Multiplayer"
        ]
      }
    },
    "/rs/{credential}/{secret}/JoinPendingMatchRequest": {
      "post": {
        "description": "Requests to join a pending match (found via FindPendingMatchesRequest).",
        "parameters": [
          {
            "description": "The short code of the credential used for the request",
            "in": "path",
            "name": "credential",
            "required": true,
            "type": "string"
          },
          {
            "description": "The secret for the credential used for the request",
            "in": "path",
            "name": "secret",
            "required": true,
            "type": "string"
          },
          {
            "description": "JSON representation of the request",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/JoinPendingMatchRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/JoinPendingMatchResponse"
            }
          },
          "403": {
            "description": "API key, credential type or secret not valid"
          }
        },
        "tags": [
          "Multiplayer"
        ]
      }
    },
    "/rs/{credential}/{secret}/JoinTeamRequest": {
      "post": {
        "description": "Allows a player to join a team or a team to be retrieved.",
        "parameters": [
          {
            "description": "The short code of the credential used for the request",
            "in": "path",
            "name": "credential",
            "required": true,
            "type": "string"
          },
          {
            "description": "The secret for the credential used for the request",
            "in": "path",
            "name": "secret",
            "required": true,
            "type": "string"
          },
          {
            "description": "JSON representation of the request",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/JoinTeamRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/JoinTeamResponse"
            }
          },
          "403": {
            "description": "API key, credential type or secret not valid"
          }
        },
        "tags": [
          "Teams"
        ]
      }
    },
    "/rs/{credential}/{secret}/KongregateConnectRequest": {
      "post": {
        "description": "Allows a Kongregate account to be used as an authentication mechanism.\r\nOnce authenticated the platform can determine the current players details from the Kongregate platform and store them within GameSparks.\r\nIf the Kongregate user is already linked to a player, the current session will switch to the linked player.\r\nIf the current player has previously created an account using either DeviceAuthentictionRequest or RegistrationRequest AND the Kongregate user is not already registered with the game, the Kongregate user will be linked to the current player.\r\nIf the current player has not authenticated and the Kongregate user is not known, a new player will be created using the Kongregate details and the session will be authenticated against the new player.\r\nIf the Kongregate user is already known, the session will switch to being the previously created user.",
        "parameters": [
          {
            "description": "The short code of the credential used for the request",
            "in": "path",
            "name": "credential",
            "required": true,
            "type": "string"
          },
          {
            "description": "The secret for the credential used for the request",
            "in": "path",
            "name": "secret",
            "required": true,
            "type": "string"
          },
          {
            "description": "JSON representation of the request",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/KongregateConnectRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/AuthenticationResponse"
            }
          },
          "403": {
            "description": "API key, credential type or secret not valid"
          }
        },
        "tags": [
          "Authentication"
        ]
      }
    },
    "/rs/{credential}/{secret}/LeaderboardDataRequest": {
      "post": {
        "description": "Returns the top data for either the specified global leaderboard or the specified challenges leaderboard. The data is sorted as defined in the rules specified in the leaderboard configuration.\r\nThe response contains the top of the leaderboard, and returns the number of entries as defined in the entryCount parameter.\r\nIf a shortCode is supplied, the response will contain the global leaderboard data. If a challengeInstanceId is supplied, the response will contain the leaderboard data for the challenge.",
        "parameters": [
          {
            "description": "The short code of the credential used for the request",
            "in": "path",
            "name": "credential",
            "required": true,
            "type": "string"
          },
          {
            "description": "The secret for the credential used for the request",
            "in": "path",
            "name": "secret",
            "required": true,
            "type": "string"
          },
          {
            "description": "JSON representation of the request",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/LeaderboardDataRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/LeaderboardDataResponse"
            }
          },
          "403": {
            "description": "API key, credential type or secret not valid"
          }
        },
        "tags": [
          "Leaderboards"
        ]
      }
    },
    "/rs/{credential}/{secret}/LeaderboardsEntriesRequest": {
      "post": {
        "description": "Get the leaderboard entry data for the current player or a given player.\r\nFor each leaderboard it returns the array of leaderboard entries that the player has.",
        "parameters": [
          {
            "description": "The short code of the credential used for the request",
            "in": "path",
            "name": "credential",
            "required": true,
            "type": "string"
          },
          {
            "description": "The secret for the credential used for the request",
            "in": "path",
            "name": "secret",
            "required": true,
            "type": "string"
          },
          {
            "description": "JSON representation of the request",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/LeaderboardsEntriesRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/LeaderboardsEntriesResponse"
            }
          },
          "403": {
            "description": "API key, credential type or secret not valid"
          }
        },
        "tags": [
          "Leaderboards"
        ]
      }
    },
    "/rs/{credential}/{secret}/LeaveTeamRequest": {
      "post": {
        "description": "Allows a player to leave a team.",
        "parameters": [
          {
            "description": "The short code of the credential used for the request",
            "in": "path",
            "name": "credential",
            "required": true,
            "type": "string"
          },
          {
            "description": "The secret for the credential used for the request",
            "in": "path",
            "name": "secret",
            "required": true,
            "type": "string"
          },
          {
            "description": "JSON representation of the request",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/LeaveTeamRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/LeaveTeamResponse"
            }
          },
          "403": {
            "description": "API key, credential type or secret not valid"
          }
        },
        "tags": [
          "Teams"
        ]
      }
    },
    "/rs/{credential}/{secret}/ListAchievementsRequest": {
      "post": {
        "description": "Retrieves a list of the configured achievements in the game, along with whether the current player has earned the achievement.",
        "parameters": [
          {
            "description": "The short code of the credential used for the request",
            "in": "path",
            "name": "credential",
            "required": true,
            "type": "string"
          },
          {
            "description": "The secret for the credential used for the request",
            "in": "path",
            "name": "secret",
            "required": true,
            "type": "string"
          },
          {
            "description": "JSON representation of the request",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ListAchievementsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListAchievementsResponse"
            }
          },
          "403": {
            "description": "API key, credential type or secret not valid"
          }
        },
        "tags": [
          "Player"
        ]
      }
    },
    "/rs/{credential}/{secret}/ListBulkJobsAdminRequest": {
      "post": {
        "description": "Lists existing bulk jobs.",
        "parameters": [
          {
            "description": "The short code of the credential used for the request",
            "in": "path",
            "name": "credential",
            "required": true,
            "type": "string"
          },
          {
            "description": "The secret for the credential used for the request",
            "in": "path",
            "name": "secret",
            "required": true,
            "type": "string"
          },
          {
            "description": "JSON representation of the request",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ListBulkJobsAdminRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListBulkJobsAdminResponse"
            }
          },
          "403": {
            "description": "API key, credential type or secret not valid"
          }
        },
        "tags": [
          "Admin"
        ]
      }
    },
    "/rs/{credential}/{secret}/ListChallengeRequest": {
      "post": {
        "description": "Returns a list of challenges in the state defined in the 'state' field.\r\nThe response can be further filtered by passing a shortCode field which will limit the returned lists to challenges of that short code.\r\nValid states are:\r\nWAITING : The challenge has been issued and accepted and is waiting for the start date.\r\nRUNNING : The challenge is active.\r\nISSUED : The challenge has been issued by the current player and is waiting to be accepted.\r\nRECEIVED : The challenge has been issued to the current player and is waiting to be accepted.\r\nCOMPLETE : The challenge has completed.\r\nDECLINED : The challenge has been issued by the current player and has been declined.",
        "parameters": [
          {
            "description": "The short code of the credential used for the request",
            "in": "path",
            "name": "credential",
            "required": true,
            "type": "string"
          },
          {
            "description": "The secret for the credential used for the request",
            "in": "path",
            "name": "secret",
            "required": true,
            "type": "string"
          },
          {
            "description": "JSON representation of the request",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ListChallengeRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListChallengeResponse"
            }
          },
          "403": {
            "description": "API key, credential type or secret not valid"
          }
        },
        "tags": [
          "Multiplayer"
        ]
      }
    },
    "/rs/{credential}/{secret}/ListChallengeTypeRequest": {
      "post": {
        "description": "Returns the list of configured challenge types.",
        "parameters": [
          {
            "description": "The short code of the credential used for the request",
            "in": "path",
            "name": "credential",
            "required": true,
            "type": "string"
          },
          {
            "description": "The secret for the credential used for the request",
            "in": "path",
            "name": "secret",
            "required": true,
            "type": "string"
          },
          {
            "description": "JSON representation of the request",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ListChallengeTypeRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListChallengeTypeResponse"
            }
          },
          "403": {
            "description": "API key, credential type or secret not valid"
          }
        },
        "tags": [
          "Multiplayer"
        ]
      }
    },
    "/rs/{credential}/{secret}/ListGameFriendsRequest": {
      "post": {
        "description": "Returns the list of the current players game friends.\r\nA Game friend is someone in their social network who also plays the game.\r\nAgainst each friend, an indicator is supplied to show whether the friend is currently connected to the GameSparks service",
        "parameters": [
          {
            "description": "The short code of the credential used for the request",
            "in": "path",
            "name": "credential",
            "required": true,
            "type": "string"
          },
          {
            "description": "The secret for the credential used for the request",
            "in": "path",
            "name": "secret",
            "required": true,
            "type": "string"
          },
          {
            "description": "JSON representation of the request",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ListGameFriendsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListGameFriendsResponse"
            }
          },
          "403": {
            "description": "API key, credential type or secret not valid"
          }
        },
        "tags": [
          "Player"
        ]
      }
    },
    "/rs/{credential}/{secret}/ListInviteFriendsRequest": {
      "post": {
        "description": "Returns the list of the current players friends in their social network, who are not yet playing this game.\r\nThis is dependent on the security and privacy policies of the social network.\r\nFor example, Facebook's policies prevent this friend list being provided, whereas Twitter will supply a list of users who are not playing the game.",
        "parameters": [
          {
            "description": "The short code of the credential used for the request",
            "in": "path",
            "name": "credential",
            "required": true,
            "type": "string"
          },
          {
            "description": "The secret for the credential used for the request",
            "in": "path",
            "name": "secret",
            "required": true,
            "type": "string"
          },
          {
            "description": "JSON representation of the request",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ListInviteFriendsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListInviteFriendsResponse"
            }
          },
          "403": {
            "description": "API key, credential type or secret not valid"
          }
        },
        "tags": [
          "Player"
        ]
      }
    },
    "/rs/{credential}/{secret}/ListLeaderboardsRequest": {
      "post": {
        "description": "Returns a list of all leaderboards configured in the game.",
        "parameters": [
          {
            "description": "The short code of the credential used for the request",
            "in": "path",
            "name": "credential",
            "required": true,
            "type": "string"
          },
          {
            "description": "The secret for the credential used for the request",
            "in": "path",
            "name": "secret",
            "required": true,
            "type": "string"
          },
          {
            "description": "JSON representation of the request",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ListLeaderboardsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListLeaderboardsResponse"
            }
          },
          "403": {
            "description": "API key, credential type or secret not valid"
          }
        },
        "tags": [
          "Leaderboards"
        ]
      }
    },
    "/rs/{credential}/{secret}/ListMessageDetailRequest": {
      "post": {
        "description": "Returns the list of the current player's messages / notifications.\r\nThe list only contains un-dismissed messages, to dismiss a message see DismissMessageRequest Read the section on Messages to see the complete list of messages and their meaning.",
        "parameters": [
          {
            "description": "The short code of the credential used for the request",
            "in": "path",
            "name": "credential",
            "required": true,
            "type": "string"
          },
          {
            "description": "The secret for the credential used for the request",
            "in": "path",
            "name": "secret",
            "required": true,
            "type": "string"
          },
          {
            "description": "JSON representation of the request",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ListMessageDetailRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListMessageDetailResponse"
            }
          },
          "403": {
            "description": "API key, credential type or secret not valid"
          }
        },
        "tags": [
          "Player"
        ]
      }
    },
    "/rs/{credential}/{secret}/ListMessageRequest": {
      "post": {
        "description": "Returns the list of the current player's messages / notifications.\r\nThe list only contains un-dismissed messages, to dismiss a message see DismissMessageRequest Read the section on Messages to see the complete list of messages and their meaning.",
        "parameters": [
          {
            "description": "The short code of the credential used for the request",
            "in": "path",
            "name": "credential",
            "required": true,
            "type": "string"
          },
          {
            "description": "The secret for the credential used for the request",
            "in": "path",
            "name": "secret",
            "required": true,
            "type": "string"
          },
          {
            "description": "JSON representation of the request",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ListMessageRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListMessageResponse"
            }
          },
          "403": {
            "description": "API key, credential type or secret not valid"
          }
        },
        "tags": [
          "Player"
        ]
      }
    },
    "/rs/{credential}/{secret}/ListMessageSummaryRequest": {
      "post": {
        "description": "Returns a summary of the list of the current players messages / notifications.\r\nThe list only contains un-dismissed messages, to dismiss a message see DismissMessageRequest.\r\nThe full message can be retrieved using GetMessageRequest Read the section on Messages to see the complete list of messages and their meanings.",
        "parameters": [
          {
            "description": "The short code of the credential used for the request",
            "in": "path",
            "name": "credential",
            "required": true,
            "type": "string"
          },
          {
            "description": "The secret for the credential used for the request",
            "in": "path",
            "name": "secret",
            "required": true,
            "type": "string"
          },
          {
            "description": "JSON representation of the request",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ListMessageSummaryRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListMessageSummaryResponse"
            }
          },
          "403": {
            "description": "API key, credential type or secret not valid"
          }
        },
        "tags": [
          "Player"
        ]
      }
    },
    "/rs/{credential}/{secret}/ListTeamChatRequest": {
      "post": {
        "description": "Get a list of the messages sent to the team (by players using SendTeamChatMessageRequest).",
        "parameters": [
          {
            "description": "The short code of the credential used for the request",
            "in": "path",
            "name": "credential",
            "required": true,
            "type": "string"
          },
          {
            "description": "The secret for the credential used for the request",
            "in": "path",
            "name": "secret",
            "required": true,
            "type": "string"
          },
          {
            "description": "JSON representation of the request",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ListTeamChatRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListTeamChatResponse"
            }
          },
          "403": {
            "description": "API key, credential type or secret not valid"
          }
        },
        "tags": [
          "Teams"
        ]
      }
    },
    "/rs/{credential}/{secret}/ListTeamsRequest": {
      "post": {
        "description": "Returns a list of teams. Can be filtered on team name or team type.",
        "parameters": [
          {
            "description": "The short code of the credential used for the request",
            "in": "path",
            "name": "credential",
            "required": true,
            "type": "string"
          },
          {
            "description": "The secret for the credential used for the request",
            "in": "path",
            "name": "secret",
            "required": true,
            "type": "string"
          },
          {
            "description": "JSON representation of the request",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ListTeamsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListTeamsResponse"
            }
          },
          "403": {
            "description": "API key, credential type or secret not valid"
          }
        },
        "tags": [
          "Teams"
        ]
      }
    },
    "/rs/{credential}/{secret}/ListTransactionsRequest": {
      "post": {
        "description": "Returns a list of the current player's transaction history.",
        "parameters": [
          {
            "description": "The short code of the credential used for the request",
            "in": "path",
            "name": "credential",
            "required": true,
            "type": "string"
          },
          {
            "description": "The secret for the credential used for the request",
            "in": "path",
            "name": "secret",
            "required": true,
            "type": "string"
          },
          {
            "description": "JSON representation of the request",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ListTransactionsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListTransactionsResponse"
            }
          },
          "403": {
            "description": "API key, credential type or secret not valid"
          }
        },
        "tags": [
          "Player"
        ]
      }
    },
    "/rs/{credential}/{secret}/ListVirtualGoodsRequest": {
      "post": {
        "description": "Returns the list of configured virtual goods.",
        "parameters": [
          {
            "description": "The short code of the credential used for the request",
            "in": "path",
            "name": "credential",
            "required": true,
            "type": "string"
          },
          {
            "description": "The secret for the credential used for the request",
            "in": "path",
            "name": "secret",
            "required": true,
            "type": "string"
          },
          {
            "description": "JSON representation of the request",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ListVirtualGoodsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListVirtualGoodsResponse"
            }
          },
          "403": {
            "description": "API key, credential type or secret not valid"
          }
        },
        "tags": [
          "Store"
        ]
      }
    },
    "/rs/{credential}/{secret}/LogChallengeEventRequest": {
      "post": {
        "description": "Allows a user defined event to be triggered. The event will be posted to the challenge specified.\r\nThis call differs from most as it does not have a fixed format. The @class, challengeInstanceId and eventKey attributes are common, but the rest of the attributes are as defined in the Event object configured in the dev portal.\r\nThe example below shows a request to en event with a short code of HS with 2 attributes, 'HS' & 'GL'.",
        "parameters": [
          {
            "description": "The short code of the credential used for the request",
            "in": "path",
            "name": "credential",
            "required": true,
            "type": "string"
          },
          {
            "description": "The secret for the credential used for the request",
            "in": "path",
            "name": "secret",
            "required": true,
            "type": "string"
          },
          {
            "description": "JSON representation of the request",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/LogChallengeEventRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/LogChallengeEventResponse"
            }
          },
          "403": {
            "description": "API key, credential type or secret not valid"
          }
        },
        "tags": [
          "Events"
        ]
      }
    },
    "/rs/{credential}/{secret}/LogEventRequest": {
      "post": {
        "description": "Allows a user defined event to be triggered.\r\nThis call differs from most as it does not have a fixed format. The @class and eventKey attributes are common, but the rest of the attributes are as defined in the Event object configured in the dev portal.\r\nThe example below shows a request to an event with a short code of HS with 2 attributes, 'HS' & 'GL'.",
        "parameters": [
          {
            "description": "The short code of the credential used for the request",
            "in": "path",
            "name": "credential",
            "required": true,
            "type": "string"
          },
          {
            "description": "The secret for the credential used for the request",
            "in": "path",
            "name": "secret",
            "required": true,
            "type": "string"
          },
          {
            "description": "JSON representation of the request",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/LogEventRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/LogEventResponse"
            }
          },
          "403": {
            "description": "API key, credential type or secret not valid"
          }
        },
        "tags": [
          "Events"
        ]
      }
    },
    "/rs/{credential}/{secret}/MatchDetailsRequest": {
      "post": {
        "description": "Find the details of an existing match this player belongs to, using the matchId",
        "parameters": [
          {
            "description": "The short code of the credential used for the request",
            "in": "path",
            "name": "credential",
            "required": true,
            "type": "string"
          },
          {
            "description": "The secret for the credential used for the request",
            "in": "path",
            "name": "secret",
            "required": true,
            "type": "string"
          },
          {
            "description": "JSON representation of the request",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/MatchDetailsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/MatchDetailsResponse"
            }
          },
          "403": {
            "description": "API key, credential type or secret not valid"
          }
        },
        "tags": [
          "Multiplayer"
        ]
      }
    },
    "/rs/{credential}/{secret}/MatchmakingRequest": {
      "post": {
        "description": "Register this player for matchmaking, using the given skill and matchShortCode.\r\nPlayers looking for a match using the same matchShortCode will be considered for a match, based on the matchConfig.\r\nEach player must match the other for the match to be found.\r\nIf the matchShortCode points to a match with realtime enabled, in order to minimise latency, the location of Players and their proximity to one another takes precedence over their reciprocal skill values.",
        "parameters": [
          {
            "description": "The short code of the credential used for the request",
            "in": "path",
            "name": "credential",
            "required": true,
            "type": "string"
          },
          {
            "description": "The secret for the credential used for the request",
            "in": "path",
            "name": "secret",
            "required": true,
            "type": "string"
          },
          {
            "description": "JSON representation of the request",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/MatchmakingRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/MatchmakingResponse"
            }
          },
          "403": {
            "description": "API key, credential type or secret not valid"
          }
        },
        "tags": [
          "Multiplayer"
        ]
      }
    },
    "/rs/{credential}/{secret}/NXConnectRequest": {
      "post": {
        "description": "Allows an Nintendo Network Service Account (NSA) to be used as an authentication mechanism.\r\nOnce authenticated the platform can determine the current players details from the NSA and store them within GameSparks.\r\nGameSparks will determine the player's friends and whether any of them are currently registered with the game.\r\nIf the NSA is already linked to a player, the current session will switch to the linked player.\r\nIf the current player has previously created an account using either DeviceAuthentictionRequest or RegistrationRequest AND the NSA is not already registered with the game, the NSA will be linked to the current player.\r\nIf the current player has not authenticated and the NSA is not known, a new player will be created using the NSA details and the session will be authenticated against the new player.\r\nIf the NSA is already known, the session will switch to being the previously created user.",
        "parameters": [
          {
            "description": "The short code of the credential used for the request",
            "in": "path",
            "name": "credential",
            "required": true,
            "type": "string"
          },
          {
            "description": "The secret for the credential used for the request",
            "in": "path",
            "name": "secret",
            "required": true,
            "type": "string"
          },
          {
            "description": "JSON representation of the request",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/NXConnectRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/AuthenticationResponse"
            }
          },
          "403": {
            "description": "API key, credential type or secret not valid"
          }
        },
        "tags": [
          "Authentication"
        ]
      }
    },
    "/rs/{credential}/{secret}/PSNAccountConnectRequest": {
      "post": {
        "description": "Allows a PSN account to be used as an authentication mechanism.\r\nOnce authenticated the platform can determine the current players details from the PSN platform and store them within GameSparks.\r\nGameSparks will determine the player's friends and whether any of them are currently registered with the game.\r\nIf the PSN user is already linked to a player, the current session will switch to the linked player.\r\nIf the current player has previously created an account using either DeviceAuthentictionRequest or RegistrationRequest AND the PSN user is not already registered with the game, the PSN user will be linked to the current player.\r\nIf the current player has not authenticated and the PSN user is not known, a new player will be created using the PSN details and the session will be authenticated against the new player.\r\nIf the PSN user is already known, the session will switch to being the previously created user.",
        "parameters": [
          {
            "description": "The short code of the credential used for the request",
            "in": "path",
            "name": "credential",
            "required": true,
            "type": "string"
          },
          {
            "description": "The secret for the credential used for the request",
            "in": "path",
            "name": "secret",
            "required": true,
            "type": "string"
          },
          {
            "description": "JSON representation of the request",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PSNAccountConnectRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/AuthenticationResponse"
            }
          },
          "403": {
            "description": "API key, credential type or secret not valid"
          }
        },
        "tags": [
          "Authentication"
        ]
      }
    },
    "/rs/{credential}/{secret}/PSNConnectRequest": {
      "post": {
        "description": "DEPRECATED - Use PSNAccountConnectRequest instead.\r\nAllows a PSN account to be used as an authentication mechanism.\r\nOnce authenticated the platform can determine the current players details from the PSN platform and store them within GameSparks.\r\nGameSparks will determine the player's friends and whether any of them are currently registered with the game.\r\nIf the PSN user is already linked to a player, the current session will switch to the linked player.\r\nIf the current player has previously created an account using either DeviceAuthentictionRequest or RegistrationRequest AND the PSN user is not already registered with the game, the PSN user will be linked to the current player.\r\nIf the current player has not authenticated and the PSN user is not known, a new player will be created using the PSN details and the session will be authenticated against the new player.\r\nIf the PSN user is already known, the session will switch to being the previously created user.",
        "parameters": [
          {
            "description": "The short code of the credential used for the request",
            "in": "path",
            "name": "credential",
            "required": true,
            "type": "string"
          },
          {
            "description": "The secret for the credential used for the request",
            "in": "path",
            "name": "secret",
            "required": true,
            "type": "string"
          },
          {
            "description": "JSON representation of the request",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PSNConnectRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/AuthenticationResponse"
            }
          },
          "403": {
            "description": "API key, credential type or secret not valid"
          }
        },
        "tags": [
          "Authentication"
        ]
      }
    },
    "/rs/{credential}/{secret}/PsnBuyGoodsRequest": {
      "post": {
        "description": "Processes an update of entitlement in PlayStation network.\r\nThe GameSparks platform will update the 'use_count' for an entitlement (by default 'use_count' is 1).\r\nThe request will be rejected if entitlement 'use_limit' is 0\r\nGampSparks platform by default will use internally saved PSN user access token",
        "parameters": [
          {
            "description": "The short code of the credential used for the request",
            "in": "path",
            "name": "credential",
            "required": true,
            "type": "string"
          },
          {
            "description": "The secret for the credential used for the request",
            "in": "path",
            "name": "secret",
            "required": true,
            "type": "string"
          },
          {
            "description": "JSON representation of the request",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PsnBuyGoodsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/BuyVirtualGoodResponse"
            }
          },
          "403": {
            "description": "API key, credential type or secret not valid"
          }
        },
        "tags": [
          "Store"
        ]
      }
    },
    "/rs/{credential}/{secret}/PushRegistrationRequest": {
      "post": {
        "description": "Registers the current device for push notifications. Currently GameSparks supports iOS, Android (GCM), FCM, Kindle, Viber & Microsoft Push notifications.\r\nSupply the device type, and the push notification identifier for the device.",
        "parameters": [
          {
            "description": "The short code of the credential used for the request",
            "in": "path",
            "name": "credential",
            "required": true,
            "type": "string"
          },
          {
            "description": "The secret for the credential used for the request",
            "in": "path",
            "name": "secret",
            "required": true,
            "type": "string"
          },
          {
            "description": "JSON representation of the request",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PushRegistrationRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/PushRegistrationResponse"
            }
          },
          "403": {
            "description": "API key, credential type or secret not valid"
          }
        },
        "tags": [
          "Misc"
        ]
      }
    },
    "/rs/{credential}/{secret}/QQConnectRequest": {
      "post": {
        "description": "Allows a QQ access token to be used as an authentication mechanism.\r\nOnce authenticated the platform can determine the current players details from the QQ platform and store them within GameSparks.\r\nIf the QQ user is already linked to a player, the current session will switch to the linked player.\r\nIf the current player has previously created an account using either DeviceAuthenticationRequest or RegistrationRequest AND the QQ user is not already registered with the game, the QQ user will be linked to the current player.\r\nIf the current player has not authenticated and the QQ user is not known, a new player will be created using the QQ details and the session will be authenticated against the new player.\r\nIf the QQ user is already known, the session will switch to being the previously created user.",
        "parameters": [
          {
            "description": "The short code of the credential used for the request",
            "in": "path",
            "name": "credential",
            "required": true,
            "type": "string"
          },
          {
            "description": "The secret for the credential used for the request",
            "in": "path",
            "name": "secret",
            "required": true,
            "type": "string"
          },
          {
            "description": "JSON representation of the request",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/QQConnectRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/AuthenticationResponse"
            }
          },
          "403": {
            "description": "API key, credential type or secret not valid"
          }
        },
        "tags": [
          "Authentication"
        ]
      }
    },
    "/rs/{credential}/{secret}/RegistrationRequest": {
      "post": {
        "description": "Allows a new player to be created using a username, password display name.",
        "parameters": [
          {
            "description": "The short code of the credential used for the request",
            "in": "path",
            "name": "credential",
            "required": true,
            "type": "string"
          },
          {
            "description": "The secret for the credential used for the request",
            "in": "path",
            "name": "secret",
            "required": true,
            "type": "string"
          },
          {
            "description": "JSON representation of the request",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/RegistrationRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/RegistrationResponse"
            }
          },
          "403": {
            "description": "API key, credential type or secret not valid"
          }
        },
        "tags": [
          "Authentication"
        ]
      }
    },
    "/rs/{credential}/{secret}/RevokePurchaseGoodsRequest": {
      "post": {
        "description": "Revokes the purchase of a good. The items aquired will be removed from remaining items of the player.",
        "parameters": [
          {
            "description": "The short code of the credential used for the request",
            "in": "path",
            "name": "credential",
            "required": true,
            "type": "string"
          },
          {
            "description": "The secret for the credential used for the request",
            "in": "path",
            "name": "secret",
            "required": true,
            "type": "string"
          },
          {
            "description": "JSON representation of the request",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/RevokePurchaseGoodsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/RevokePurchaseGoodsResponse"
            }
          },
          "403": {
            "description": "API key, credential type or secret not valid"
          }
        },
        "tags": [
          "Admin"
        ]
      }
    },
    "/rs/{credential}/{secret}/ScheduleBulkJobAdminRequest": {
      "post": {
        "description": "Schedules a bulk job to be run against multiple players.",
        "parameters": [
          {
            "description": "The short code of the credential used for the request",
            "in": "path",
            "name": "credential",
            "required": true,
            "type": "string"
          },
          {
            "description": "The secret for the credential used for the request",
            "in": "path",
            "name": "secret",
            "required": true,
            "type": "string"
          },
          {
            "description": "JSON representation of the request",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ScheduleBulkJobAdminRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ScheduleBulkJobAdminResponse"
            }
          },
          "403": {
            "description": "API key, credential type or secret not valid"
          }
        },
        "tags": [
          "Admin"
        ]
      }
    },
    "/rs/{credential}/{secret}/SendFriendMessageRequest": {
      "post": {
        "description": "Sends a message to one or more game friend(s). A game friend is someone in the players social network who also plays the game.",
        "parameters": [
          {
            "description": "The short code of the credential used for the request",
            "in": "path",
            "name": "credential",
            "required": true,
            "type": "string"
          },
          {
            "description": "The secret for the credential used for the request",
            "in": "path",
            "name": "secret",
            "required": true,
            "type": "string"
          },
          {
            "description": "JSON representation of the request",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SendFriendMessageRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/SendFriendMessageResponse"
            }
          },
          "403": {
            "description": "API key, credential type or secret not valid"
          }
        },
        "tags": [
          "Player"
        ]
      }
    },
    "/rs/{credential}/{secret}/SendTeamChatMessageRequest": {
      "post": {
        "description": "Send a message to all the players who are member of the given team",
        "parameters": [
          {
            "description": "The short code of the credential used for the request",
            "in": "path",
            "name": "credential",
            "required": true,
            "type": "string"
          },
          {
            "description": "The secret for the credential used for the request",
            "in": "path",
            "name": "secret",
            "required": true,
            "type": "string"
          },
          {
            "description": "JSON representation of the request",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SendTeamChatMessageRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/SendTeamChatMessageResponse"
            }
          },
          "403": {
            "description": "API key, credential type or secret not valid"
          }
        },
        "tags": [
          "Teams"
        ]
      }
    },
    "/rs/{credential}/{secret}/SocialDisconnectRequest": {
      "post": {
        "description": "Allows a player's internal profile to be disconnected from an external system to which it is linked.  Any friends linked as result of this connection will be removed.",
        "parameters": [
          {
            "description": "The short code of the credential used for the request",
            "in": "path",
            "name": "credential",
            "required": true,
            "type": "string"
          },
          {
            "description": "The secret for the credential used for the request",
            "in": "path",
            "name": "secret",
            "required": true,
            "type": "string"
          },
          {
            "description": "JSON representation of the request",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SocialDisconnectRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/SocialDisconnectResponse"
            }
          },
          "403": {
            "description": "API key, credential type or secret not valid"
          }
        },
        "tags": [
          "Player"
        ]
      }
    },
    "/rs/{credential}/{secret}/SocialLeaderboardDataRequest": {
      "post": {
        "description": "Returns leaderboard data that only contains entries of players that are game friends with the current player.\r\nThe GameSparks platform will attempt to return players both ahead and behind the current player, where data is available.\r\nThe entry count defines how many player should be returned both ahead and behind. The numer of results may vary if there are not enough friends either ahead or behind.",
        "parameters": [
          {
            "description": "The short code of the credential used for the request",
            "in": "path",
            "name": "credential",
            "required": true,
            "type": "string"
          },
          {
            "description": "The secret for the credential used for the request",
            "in": "path",
            "name": "secret",
            "required": true,
            "type": "string"
          },
          {
            "description": "JSON representation of the request",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SocialLeaderboardDataRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/LeaderboardDataResponse"
            }
          },
          "403": {
            "description": "API key, credential type or secret not valid"
          }
        },
        "tags": [
          "Leaderboards"
        ]
      }
    },
    "/rs/{credential}/{secret}/SocialStatusRequest": {
      "post": {
        "description": "Returns detials of the current social connections of this player. Each connection .",
        "parameters": [
          {
            "description": "The short code of the credential used for the request",
            "in": "path",
            "name": "credential",
            "required": true,
            "type": "string"
          },
          {
            "description": "The secret for the credential used for the request",
            "in": "path",
            "name": "secret",
            "required": true,
            "type": "string"
          },
          {
            "description": "JSON representation of the request",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SocialStatusRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/SocialStatusResponse"
            }
          },
          "403": {
            "description": "API key, credential type or secret not valid"
          }
        },
        "tags": [
          "Misc"
        ]
      }
    },
    "/rs/{credential}/{secret}/SteamBuyGoodsRequest": {
      "post": {
        "description": "Processes a 'orderid' from a Steam.\r\nThe GameSparks platform will validate the 'orderid' with Steam and process the response. The 'orderid' from the response will be recorded and the request will be rejected, if the 'orderid' has previously been processed, this prevents replay attacks.\r\nOnce verified, the players account will be credited with the Virtual Good, or Virtual Currency the purchase contains. The virtual good will be looked up by matching the 'itemid' in the response with the 'Steam Product ID' configured against the virtual good.",
        "parameters": [
          {
            "description": "The short code of the credential used for the request",
            "in": "path",
            "name": "credential",
            "required": true,
            "type": "string"
          },
          {
            "description": "The secret for the credential used for the request",
            "in": "path",
            "name": "secret",
            "required": true,
            "type": "string"
          },
          {
            "description": "JSON representation of the request",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SteamBuyGoodsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/BuyVirtualGoodResponse"
            }
          },
          "403": {
            "description": "API key, credential type or secret not valid"
          }
        },
        "tags": [
          "Store"
        ]
      }
    },
    "/rs/{credential}/{secret}/SteamConnectRequest": {
      "post": {
        "description": "Allows a Steam sessionTicket to be used as an authentication mechanism.\r\nOnce authenticated the platform can determine the current players details from the Steam platform and store them within GameSparks.\r\nGameSparks will determine the player's friends and whether any of them are currently registered with the game.\r\nIf the Steam user is already linked to a player, the current session will switch to the linked player.\r\nIf the current player has previously created an account using either DeviceAuthentictionRequest or RegistrationRequest AND the Steam user is not already registered with the game, the Steam user will be linked to the current player.\r\nIf the current player has not authenticated and the Steam user is not known, a new player will be created using the Steam details and the session will be authenticated against the new player.\r\nIf the Steam user is already known, the session will switch to being the previously created user.",
        "parameters": [
          {
            "description": "The short code of the credential used for the request",
            "in": "path",
            "name": "credential",
            "required": true,
            "type": "string"
          },
          {
            "description": "The secret for the credential used for the request",
            "in": "path",
            "name": "secret",
            "required": true,
            "type": "string"
          },
          {
            "description": "JSON representation of the request",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SteamConnectRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/AuthenticationResponse"
            }
          },
          "403": {
            "description": "API key, credential type or secret not valid"
          }
        },
        "tags": [
          "Authentication"
        ]
      }
    },
    "/rs/{credential}/{secret}/TwitchConnectRequest": {
      "post": {
        "description": "Allows a Twitch account to be used as an authentication mechanism.\r\nOnce authenticated the platform can determine the current players details from the Twitch platform and store them within GameSparks.\r\nIf the Twitch user is already linked to a player, the current session will switch to the linked player.\r\nIf the current player has previously created an account using either DeviceAuthentictionRequest or RegistrationRequest AND the Twitch user is not already registered with the game, the Twitch user will be linked to the current player.\r\nIf the current player has not authenticated and the Twitch user is not known, a new player will be created using the Twitch details and the session will be authenticated against the new player.\r\nIf the Twitch user is already known, the session will switch to being the previously created user.",
        "parameters": [
          {
            "description": "The short code of the credential used for the request",
            "in": "path",
            "name": "credential",
            "required": true,
            "type": "string"
          },
          {
            "description": "The secret for the credential used for the request",
            "in": "path",
            "name": "secret",
            "required": true,
            "type": "string"
          },
          {
            "description": "JSON representation of the request",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/TwitchConnectRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/AuthenticationResponse"
            }
          },
          "403": {
            "description": "API key, credential type or secret not valid"
          }
        },
        "tags": [
          "Authentication"
        ]
      }
    },
    "/rs/{credential}/{secret}/TwitterConnectRequest": {
      "post": {
        "description": "Allows a Twitter account to be used as an authentication mechanism.\r\nOnce authenticated the platform can determine the current players details from the Twitter platform and store them within GameSparks.\r\nGameSparks will determine the player's friends and whether any of them are currently registered with the game.\r\nIf the Twitter user is already linked to a player, the current session will switch to the linked player.\r\nIf the current player has previously created an account using either DeviceAuthentictionRequest or RegistrationRequest AND the Twitter user is not already registered with the game, the Twitter user will be linked to the current player.\r\nIf the current player has not authenticated and the Twitter user is not known, a new player will be created using the Twitter details and the session will be authenticated against the new player.\r\nIf the Twitter user is already known, the session will switch to being the previously created user.",
        "parameters": [
          {
            "description": "The short code of the credential used for the request",
            "in": "path",
            "name": "credential",
            "required": true,
            "type": "string"
          },
          {
            "description": "The secret for the credential used for the request",
            "in": "path",
            "name": "secret",
            "required": true,
            "type": "string"
          },
          {
            "description": "JSON representation of the request",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/TwitterConnectRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/AuthenticationResponse"
            }
          },
          "403": {
            "description": "API key, credential type or secret not valid"
          }
        },
        "tags": [
          "Authentication"
        ]
      }
    },
    "/rs/{credential}/{secret}/UpdateMessageRequest": {
      "post": {
        "description": "Allows a message status to be updated.",
        "parameters": [
          {
            "description": "The short code of the credential used for the request",
            "in": "path",
            "name": "credential",
            "required": true,
            "type": "string"
          },
          {
            "description": "The secret for the credential used for the request",
            "in": "path",
            "name": "secret",
            "required": true,
            "type": "string"
          },
          {
            "description": "JSON representation of the request",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/UpdateMessageRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdateMessageResponse"
            }
          },
          "403": {
            "description": "API key, credential type or secret not valid"
          }
        },
        "tags": [
          "Player"
        ]
      }
    },
    "/rs/{credential}/{secret}/ViberConnectRequest": {
      "post": {
        "description": "Allows a Viber account to be used as an authentication mechanism.\r\nOnce authenticated the platform can determine the current players details from the Viber platform and store them within GameSparks.\r\nA successful authentication will also register the player to receive Viber push notifications.\r\nGameSparks will determine the player's friends and whether any of them are currently registered with the game.\r\nIf the Viber user is already linked to a player, the current session will switch to the linked player.\r\nIf the current player has previously created an account using either DeviceAuthentictionRequest or RegistrationRequest AND the Viber user is not already registered with the game, the Viber user will be linked to the current player.\r\nIf the current player has not authenticated and the Viber user is not known, a new player will be created using the Viber details and the session will be authenticated against the new player.\r\nIf the Viber user is already known, the session will switch to being the previously created user.",
        "parameters": [
          {
            "description": "The short code of the credential used for the request",
            "in": "path",
            "name": "credential",
            "required": true,
            "type": "string"
          },
          {
            "description": "The secret for the credential used for the request",
            "in": "path",
            "name": "secret",
            "required": true,
            "type": "string"
          },
          {
            "description": "JSON representation of the request",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ViberConnectRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/AuthenticationResponse"
            }
          },
          "403": {
            "description": "API key, credential type or secret not valid"
          }
        },
        "tags": [
          "Authentication"
        ]
      }
    },
    "/rs/{credential}/{secret}/WeChatConnectRequest": {
      "post": {
        "description": "Allows a WeChat access token to be used as an authentication mechanism.\r\nOnce authenticated the platform can determine the current players details from the WeChat platform and store them within GameSparks.\r\nIf the WeChat user is already linked to a player, the current session will switch to the linked player.\r\nIf the current player has previously created an account using either DeviceAuthenticationRequest or RegistrationRequest AND the WeChat user is not already registered with the game, the WeChat user will be linked to the current player.\r\nIf the current player has not authenticated and the WeChat user is not known, a new player will be created using the WeChat details and the session will be authenticated against the new player.\r\nIf the WeChat user is already known, the session will switch to being the previously created user.",
        "parameters": [
          {
            "description": "The short code of the credential used for the request",
            "in": "path",
            "name": "credential",
            "required": true,
            "type": "string"
          },
          {
            "description": "The secret for the credential used for the request",
            "in": "path",
            "name": "secret",
            "required": true,
            "type": "string"
          },
          {
            "description": "JSON representation of the request",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/WeChatConnectRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/AuthenticationResponse"
            }
          },
          "403": {
            "description": "API key, credential type or secret not valid"
          }
        },
        "tags": [
          "Authentication"
        ]
      }
    },
    "/rs/{credential}/{secret}/WindowsBuyGoodsRequest": {
      "post": {
        "description": "Processes a transaction receipt from a windows store purchase.\r\nThe GameSparks platform will validate the receipt using the signature embedded in the xml. The Id in the xml will be recorded and the request will be rejected if the Id has previously been processed, this prevents replay attacks.\r\nOnce verified, the players account will be credited with the Virtual Good, or Virtual Currency the purchase contains. The virtual good will be looked up by matching the productId in the xml with the 'WP8 Product ID' configured against the virtual good.",
        "parameters": [
          {
            "description": "The short code of the credential used for the request",
            "in": "path",
            "name": "credential",
            "required": true,
            "type": "string"
          },
          {
            "description": "The secret for the credential used for the request",
            "in": "path",
            "name": "secret",
            "required": true,
            "type": "string"
          },
          {
            "description": "JSON representation of the request",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/WindowsBuyGoodsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/BuyVirtualGoodResponse"
            }
          },
          "403": {
            "description": "API key, credential type or secret not valid"
          }
        },
        "tags": [
          "Store"
        ]
      }
    },
    "/rs/{credential}/{secret}/WithdrawChallengeRequest": {
      "post": {
        "description": "Withdraws a challenge previously issued by the current player.\r\nThis can only be done while the challenge is in the ISSUED state. Once it's been accepted the challenge can not be withdrawn.",
        "parameters": [
          {
            "description": "The short code of the credential used for the request",
            "in": "path",
            "name": "credential",
            "required": true,
            "type": "string"
          },
          {
            "description": "The secret for the credential used for the request",
            "in": "path",
            "name": "secret",
            "required": true,
            "type": "string"
          },
          {
            "description": "JSON representation of the request",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/WithdrawChallengeRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/WithdrawChallengeResponse"
            }
          },
          "403": {
            "description": "API key, credential type or secret not valid"
          }
        },
        "tags": [
          "Multiplayer"
        ]
      }
    },
    "/rs/{credential}/{secret}/XBOXLiveConnectRequest": {
      "post": {
        "description": "Allows an Xbox Live Shared Token String to be used as an authentication mechanism.\r\nOnce authenticated the platform can determine the current players details from the Xbox Live and store them within GameSparks.\r\nGameSparks will determine the player's friends and whether any of them are currently registered with the game.\r\nIf the Xbox user is already linked to a player, the current session will switch to the linked player.\r\nIf the current player has previously created an account using either DeviceAuthentictionRequest or RegistrationRequest AND the Xbox user is not already registered with the game, the Xbox user will be linked to the current player.\r\nIf the current player has not authenticated and the Xbox user is not known, a new player will be created using the Xbox details and the session will be authenticated against the new player.\r\nIf the Xbox user is already known, the session will switch to being the previously created user.",
        "parameters": [
          {
            "description": "The short code of the credential used for the request",
            "in": "path",
            "name": "credential",
            "required": true,
            "type": "string"
          },
          {
            "description": "The secret for the credential used for the request",
            "in": "path",
            "name": "secret",
            "required": true,
            "type": "string"
          },
          {
            "description": "JSON representation of the request",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/XBOXLiveConnectRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/AuthenticationResponse"
            }
          },
          "403": {
            "description": "API key, credential type or secret not valid"
          }
        },
        "tags": [
          "Authentication"
        ]
      }
    },
    "/rs/{credential}/{secret}/XboxOneConnectRequest": {
      "post": {
        "description": "Allows an Xbox One XSTS token to be used as an authentication mechanism.\r\nOnce authenticated the platform can determine the current players details from Xbox Live and store them within GameSparks.\r\nIf the Xbox One user is already linked to a player, the current session will switch to the linked player.\r\nIf the current player has previously created an account using either DeviceAuthentictionRequest or RegistrationRequest AND the Xbox One user is not already registered with the game, the Xbox One user will be linked to the current player.\r\nIf the current player has not authenticated and the Xbox One user is not known, a new player will be created using the Xbox Live details and the session will be authenticated against the new player.\r\nIf the Xbox One user is already known, the session will switch to being the previously created user.",
        "parameters": [
          {
            "description": "The short code of the credential used for the request",
            "in": "path",
            "name": "credential",
            "required": true,
            "type": "string"
          },
          {
            "description": "The secret for the credential used for the request",
            "in": "path",
            "name": "secret",
            "required": true,
            "type": "string"
          },
          {
            "description": "JSON representation of the request",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/XboxOneConnectRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/AuthenticationResponse"
            }
          },
          "403": {
            "description": "API key, credential type or secret not valid"
          }
        },
        "tags": [
          "Authentication"
        ]
      }
    },
    "/rs/{credential}/{secret}/messages": {
      "post": {
        "description": "Retrieves all unseen messages",
        "parameters": [
          {
            "description": "The short code of the credential used for the request",
            "in": "path",
            "name": "credential",
            "required": true,
            "type": "string"
          },
          {
            "description": "The secret for the credential used for the request",
            "in": "path",
            "name": "secret",
            "required": true,
            "type": "string"
          },
          {
            "description": "The maximum number of messages to return (default 100, max 1000)",
            "in": "query",
            "name": "count",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "403": {
            "description": "API key, credential type or secret not valid"
          }
        },
        "tags": [
          "Messages"
        ]
      }
    }
  },
  "definitions": {
    "AcceptChallengeRequest": {
      "properties": {
        "@class": {
          "default": ".AcceptChallengeRequest",
          "description": "The request type",
          "title": "@class",
          "type": "string"
        },
        "challengeInstanceId": {
          "description": "The ID of the challenge",
          "title": "challengeInstanceId",
          "type": "string"
        },
        "message": {
          "description": "An optional message to send with the challenge",
          "title": "message",
          "type": "string"
        },
        "playerId": {
          "description": "The player to run this request as",
          "title": "playerId",
          "type": "string"
        },
        "requestId": {
          "description": "The SDK adds a requestId to all requests, this is used to match responses from the websocket",
          "title": "requestId",
          "type": "string"
        }
      }
    },
    "AcceptChallengeResponse": {
      "properties": {
        "challengeInstanceId": {
          "description": "The ID of the challenge",
          "title": "challengeInstanceId",
          "type": "string"
        },
        "requestId": {
          "description": "The ID of the corresponding Request",
          "title": "requestId",
          "type": "string"
        },
        "scriptData": {
          "$ref": "#/definitions/ScriptData",
          "description": "A JSON Map of any data added either to the Request or the Response by your Cloud Code",
          "title": "scriptData"
        }
      }
    },
    "AccountDetailsRequest": {
      "properties": {
        "@class": {
          "default": ".AccountDetailsRequest",
          "description": "The request type",
          "title": "@class",
          "type": "string"
        },
        "playerId": {
          "description": "The player to run this request as",
          "title": "playerId",
          "type": "string"
        },
        "requestId": {
          "description": "The SDK adds a requestId to all requests, this is used to match responses from the websocket",
          "title": "requestId",
          "type": "string"
        }
      }
    },
    "AccountDetailsResponse": {
      "properties": {
        "achievements": {
          "description": "A JSON object containing the player's achievments",
          "items": {
            "type": "string"
          },
          "title": "achievements",
          "type": "array"
        },
        "currencies": {
          "description": "A JSON object containing the player's currency balances",
          "title": "currencies",
          "type": "object"
        },
        "currency1": {
          "description": "The amount of type 1 currency that the player holds",
          "format": "int64",
          "title": "currency1",
          "type": "integer"
        },
        "currency2": {
          "description": "The amount of type 2 currency that the player holds",
          "format": "int64",
          "title": "currency2",
          "type": "integer"
        },
        "currency3": {
          "description": "The amount of type 3 currency that the player holds",
          "format": "int64",
          "title": "currency3",
          "type": "integer"
        },
        "currency4": {
          "description": "The amount of type 4 currency that the player holds",
          "format": "int64",
          "title": "currency4",
          "type": "integer"
        },
        "currency5": {
          "description": "The amount of type 5 currency that the player holds",
          "format": "int64",
          "title": "currency5",
          "type": "integer"
        },
        "currency6": {
          "description": "The amount of type 6 currency that the player holds",
          "format": "int64",
          "title": "currency6",
          "type": "integer"
        },
        "displayName": {
          "description": "The player's display name",
          "title": "displayName",
          "type": "string"
        },
        "externalIds": {
          "description": "A JSON object containing the player's external account details",
          "title": "externalIds",
          "type": "object"
        },
        "location": {
          "$ref": "#/definitions/Location",
          "description": "A JSON object containing the player's location",
          "title": "location"
        },
        "requestId": {
          "description": "The ID of the corresponding Request",
          "title": "requestId",
          "type": "string"
        },
        "reservedCurrencies": {
          "description": "A JSON object containing the player's currency balances",
          "title": "reservedCurrencies",
          "type": "object"
        },
        "reservedCurrency1": {
          "description": "The amount of type 1 currency that the player holds which is currently reserved",
          "title": "reservedCurrency1",
          "type": "object"
        },
        "reservedCurrency2": {
          "description": "The amount of type 2 currency that the player holds which is currently reserved",
          "title": "reservedCurrency2",
          "type": "object"
        },
        "reservedCurrency3": {
          "description": "The amount of type 3 currency that the player holds which is currently reserved",
          "title": "reservedCurrency3",
          "type": "object"
        },
        "reservedCurrency4": {
          "description": "The amount of type 4 currency that the player holds which is currently reserved",
          "title": "reservedCurrency4",
          "type": "object"
        },
        "reservedCurrency5": {
          "description": "The amount of type 5 currency that the player holds which is currently reserved",
          "title": "reservedCurrency5",
          "type": "object"
        },
        "reservedCurrency6": {
          "description": "The amount of type 6 currency that the player holds which is currently reserved",
          "title": "reservedCurrency6",
          "type": "object"
        },
        "userId": {
          "description": "The player's id",
          "title": "userId",
          "type": "string"
        },
        "virtualGoods": {
          "description": "A JSON object containing the virtual goods that the player owns",
          "title": "virtualGoods",
          "type": "object"
        }
      }
    },
    "Achievement": {
      "properties": {
        "description": {
          "description": "The desciption of the Achievement",
          "title": "description",
          "type": "string"
        },
        "earned": {
          "description": "Whether to current player has earned the achievement",
          "title": "earned",
          "type": "boolean"
        },
        "name": {
          "description": "The name of the Achievement",
          "title": "name",
          "type": "string"
        },
        "propertySet": {
          "description": "The custom property set configured on this Achievement",
          "title": "propertySet",
          "type": "object"
        },
        "shortCode": {
          "description": "The shortCode of the Achievement",
          "title": "shortCode",
          "type": "string"
        }
      }
    },
    "AmazonBuyGoodsRequest": {
      "properties": {
        "@class": {
          "default": ".AmazonBuyGoodsRequest",
          "description": "The request type",
          "title": "@class",
          "type": "string"
        },
        "amazonUserId": {
          "description": "The userId obtained from the UserData within a PurchaseResponse",
          "title": "amazonUserId",
          "type": "string"
        },
        "currencyCode": {
          "description": "The ISO 4217 currency code representing the real-world currency used for this transaction.",
          "title": "currencyCode",
          "type": "string"
        },
        "playerId": {
          "description": "The player to run this request as",
          "title": "playerId",
          "type": "string"
        },
        "receiptId": {
          "description": "The receiptId obtained from the Receipt within a PurchaseResponse",
          "title": "receiptId",
          "type": "string"
        },
        "requestId": {
          "description": "The SDK adds a requestId to all requests, this is used to match responses from the websocket",
          "title": "requestId",
          "type": "string"
        },
        "subUnitPrice": {
          "description": "The price of this purchase",
          "format": "double",
          "title": "subUnitPrice",
          "type": "number"
        },
        "uniqueTransactionByPlayer": {
          "description": "If set to true, the transactionId from this receipt will not be globally valdidated, this will mean replays between players are possible.\r\nIt will only validate the transactionId has not been used by this player before.",
          "title": "uniqueTransactionByPlayer",
          "type": "boolean"
        }
      }
    },
    "AmazonConnectRequest": {
      "properties": {
        "@class": {
          "default": ".AmazonConnectRequest",
          "description": "The request type",
          "title": "@class",
          "type": "string"
        },
        "accessToken": {
          "description": "The access token is used by the client to make authenticated requests on behalf of the end user.",
          "title": "accessToken",
          "type": "string"
        },
        "doNotCreateNewPlayer": {
          "description": "Indicates whether the server should return an error if a new player would have been registered, rather than creating the player.  Defaults to false.",
          "title": "doNotCreateNewPlayer",
          "type": "boolean"
        },
        "doNotLinkToCurrentPlayer": {
          "description": "Indicates that the server should not try to link the external profile with the current player.  If false, links the external profile to the currently signed in player.  If true, creates a new player and links the external profile to them.  Defaults to false.",
          "title": "doNotLinkToCurrentPlayer",
          "type": "boolean"
        },
        "errorOnSwitch": {
          "description": "Indicates whether the server should return an error if an account switch would have occurred, rather than switching automatically.  Defaults to false.",
          "title": "errorOnSwitch",
          "type": "boolean"
        },
        "requestId": {
          "description": "The SDK adds a requestId to all requests, this is used to match responses from the websocket",
          "title": "requestId",
          "type": "string"
        },
        "segments": {
          "description": "An optional segment configuration for this request.\r\nIf this request creates a new player on the gamesparks platform, the segments of the new player will match the values provided",
          "title": "segments",
          "type": "object"
        },
        "switchIfPossible": {
          "description": "Indicates that the server should switch to the supplied profile if it isalready associated to a player. Defaults to false.",
          "title": "switchIfPossible",
          "type": "boolean"
        },
        "syncDisplayName": {
          "description": "Indicates that the associated players displayName should be kept in syn with this profile when it's updated by the external provider.",
          "title": "syncDisplayName",
          "type": "boolean"
        }
      }
    },
    "AnalyticsRequest": {
      "properties": {
        "@class": {
          "default": ".AnalyticsRequest",
          "description": "The request type",
          "title": "@class",
          "type": "string"
        },
        "data": {
          "description": "Custom data payload",
          "title": "data",
          "type": "object"
        },
        "end": {
          "description": "Use the value true to indicate it's an end timer",
          "title": "end",
          "type": "boolean"
        },
        "key": {
          "description": "The key you want to track this analysis with.",
          "title": "key",
          "type": "string"
        },
        "requestId": {
          "description": "The SDK adds a requestId to all requests, this is used to match responses from the websocket",
          "title": "requestId",
          "type": "string"
        },
        "start": {
          "description": "Use the value true to indicate it's a start timer",
          "title": "start",
          "type": "boolean"
        }
      }
    },
    "AnalyticsResponse": {
      "properties": {
        "requestId": {
          "description": "The ID of the corresponding Request",
          "title": "requestId",
          "type": "string"
        },
        "scriptData": {
          "$ref": "#/definitions/ScriptData",
          "description": "A JSON Map of any data added either to the Request or the Response by your Cloud Code",
          "title": "scriptData"
        }
      }
    },
    "AroundMeLeaderboardRequest": {
      "properties": {
        "@class": {
          "default": ".AroundMeLeaderboardRequest",
          "description": "The request type",
          "title": "@class",
          "type": "string"
        },
        "challengeInstanceId": {
          "description": "The challenge instance to get the leaderboard data for",
          "title": "challengeInstanceId",
          "type": "string"
        },
        "customIdFilter": {
          "description": "An optional filter on the customIds.\r\nIf this request does not contain a custonIdFilter or if it is a partial filter, \r\nthe leaderboard entries around the highest score for the given constraints will be returned.",
          "title": "customIdFilter",
          "type": "object"
        },
        "dontErrorOnNotSocial": {
          "description": "The default behaviour on a social request is to error if the player has no friends (NOTSOCIAL).  Set this flag to suppress that error and return the player's leaderboard entry instead.",
          "title": "dontErrorOnNotSocial",
          "type": "boolean"
        },
        "entryCount": {
          "description": "The number of items to return in a page (default=50)",
          "format": "int64",
          "title": "entryCount",
          "type": "integer"
        },
        "friendIds": {
          "description": "A friend id or an array of friend ids to use instead of the player's social friends",
          "items": {
            "type": "string"
          },
          "title": "friendIds",
          "type": "array"
        },
        "includeFirst": {
          "description": "Number of entries to include from head of the list",
          "format": "int64",
          "title": "includeFirst",
          "type": "integer"
        },
        "includeLast": {
          "description": "Number of entries to include from tail of the list",
          "format": "int64",
          "title": "includeLast",
          "type": "integer"
        },
        "inverseSocial": {
          "description": "Returns the leaderboard excluding the player's social friends",
          "title": "inverseSocial",
          "type": "boolean"
        },
        "leaderboardShortCode": {
          "description": "The short code of the leaderboard",
          "title": "leaderboardShortCode",
          "type": "string"
        },
        "playerId": {
          "description": "The player to run this request as",
          "title": "playerId",
          "type": "string"
        },
        "requestId": {
          "description": "The SDK adds a requestId to all requests, this is used to match responses from the websocket",
          "title": "requestId",
          "type": "string"
        },
        "social": {
          "description": "If True returns a leaderboard of the player's social friends",
          "title": "social",
          "type": "boolean"
        },
        "teamIds": {
          "description": "The IDs of the teams you are interested in",
          "items": {
            "type": "string"
          },
          "title": "teamIds",
          "type": "array"
        },
        "teamTypes": {
          "description": "The type of team you are interested in",
          "items": {
            "type": "string"
          },
          "title": "teamTypes",
          "type": "array"
        }
      }
    },
    "AroundMeLeaderboardResponse": {
      "properties": {
        "challengeInstanceId": {
          "description": "The leaderboard's challenge id",
          "title": "challengeInstanceId",
          "type": "string"
        },
        "data": {
          "description": "The leaderboard data",
          "items": {
            "$ref": "#/definitions/LeaderboardData"
          },
          "title": "data",
          "type": "array"
        },
        "first": {
          "description": "The first item in the leaderboard data",
          "items": {
            "$ref": "#/definitions/LeaderboardData"
          },
          "title": "first",
          "type": "array"
        },
        "last": {
          "description": "The last item in the leaderboard data",
          "items": {
            "$ref": "#/definitions/LeaderboardData"
          },
          "title": "last",
          "type": "array"
        },
        "leaderboardShortCode": {
          "description": "The leaderboard short code",
          "title": "leaderboardShortCode",
          "type": "string"
        },
        "requestId": {
          "description": "The ID of the corresponding Request",
          "title": "requestId",
          "type": "string"
        },
        "scriptData": {
          "$ref": "#/definitions/ScriptData",
          "description": "A JSON Map of any data added either to the Request or the Response by your Cloud Code",
          "title": "scriptData"
        },
        "social": {
          "description": "True if the response contains a social leaderboard's data",
          "title": "social",
          "type": "boolean"
        }
      }
    },
    "AuthenticationRequest": {
      "properties": {
        "@class": {
          "default": ".AuthenticationRequest",
          "description": "The request type",
          "title": "@class",
          "type": "string"
        },
        "password": {
          "description": "The previously registered password",
          "title": "password",
          "type": "string"
        },
        "requestId": {
          "description": "The SDK adds a requestId to all requests, this is used to match responses from the websocket",
          "title": "requestId",
          "type": "string"
        },
        "userName": {
          "description": "The previously registered player name",
          "title": "userName",
          "type": "string"
        }
      }
    },
    "AuthenticationResponse": {
      "properties": {
        "authToken": {
          "description": "44b297a8-162a-4220-8c14-dad9a1946ad2",
          "title": "authToken",
          "type": "string"
        },
        "displayName": {
          "description": "The player's display name",
          "title": "displayName",
          "type": "string"
        },
        "newPlayer": {
          "description": "Indicates whether the player was created as part of this request",
          "title": "newPlayer",
          "type": "boolean"
        },
        "requestId": {
          "description": "The ID of the corresponding Request",
          "title": "requestId",
          "type": "string"
        },
        "scriptData": {
          "$ref": "#/definitions/ScriptData",
          "description": "A JSON Map of any data added either to the Request or the Response by your Cloud Code",
          "title": "scriptData"
        },
        "switchSummary": {
          "$ref": "#/definitions/Player",
          "description": "A summary of the player that would be switched to.  Only returned as part of an error response for a request where automatic switching is disabled.",
          "title": "switchSummary"
        },
        "userId": {
          "description": "The player's id",
          "title": "userId",
          "type": "string"
        }
      }
    },
    "BatchAdminRequest": {
      "properties": {
        "@class": {
          "default": ".BatchAdminRequest",
          "description": "The request type",
          "title": "@class",
          "type": "string"
        },
        "playerIds": {
          "description": "The players to run the request for.",
          "items": {
            "type": "string"
          },
          "title": "playerIds",
          "type": "array"
        },
        "request": {
          "description": "The request to be run for each player.",
          "title": "request",
          "type": "object"
        },
        "requestId": {
          "description": "The SDK adds a requestId to all requests, this is used to match responses from the websocket",
          "title": "requestId",
          "type": "string"
        }
      }
    },
    "BatchAdminResponse": {
      "properties": {
        "requestId": {
          "description": "The ID of the corresponding Request",
          "title": "requestId",
          "type": "string"
        },
        "responses": {
          "description": "A map of responses by player ID",
          "title": "responses",
          "type": "object"
        },
        "scriptData": {
          "$ref": "#/definitions/ScriptData",
          "description": "A JSON Map of any data added either to the Request or the Response by your Cloud Code",
          "title": "scriptData"
        }
      }
    },
    "Boughtitem": {
      "properties": {
        "quantity": {
          "description": "The quantity of the bought item",
          "format": "int64",
          "title": "quantity",
          "type": "integer"
        },
        "shortCode": {
          "description": "The short code of the bought item",
          "title": "shortCode",
          "type": "string"
        }
      }
    },
    "BulkJob": {
      "properties": {
        "actualCount": {
          "description": "The actual count of players affected by the bulk job (calculated when the job started to run)",
          "format": "int64",
          "title": "actualCount",
          "type": "integer"
        },
        "completed": {
          "description": "The time at which the bulk job completed execution",
          "example": "2016-03-09T17:30Z",
          "format": "date",
          "title": "completed",
          "type": "string"
        },
        "created": {
          "description": "The time at which the bulk job was created",
          "example": "2016-03-09T17:30Z",
          "format": "date",
          "title": "created",
          "type": "string"
        },
        "data": {
          "description": "Data to be passed into the Module or Script",
          "title": "data",
          "type": "object"
        },
        "doneCount": {
          "description": "The number of players processed by the bulk job so far",
          "format": "int64",
          "title": "doneCount",
          "type": "integer"
        },
        "errorCount": {
          "description": "The number of errors encountered whilst running the Module or Script for players",
          "format": "int64",
          "title": "errorCount",
          "type": "integer"
        },
        "estimatedCount": {
          "description": "The estimated count of players affected by the bulk job (estimated when the job was submitted)",
          "format": "int64",
          "title": "estimatedCount",
          "type": "integer"
        },
        "id": {
          "description": "The ID for the bulk job",
          "title": "id",
          "type": "string"
        },
        "moduleShortCode": {
          "description": "The Cloud Code Module to run for each player",
          "title": "moduleShortCode",
          "type": "string"
        },
        "playerQuery": {
          "description": "The query to identify players to perform the bulk job on",
          "title": "playerQuery",
          "type": "object"
        },
        "scheduledTime": {
          "description": "The time at which the job was scheduled to run",
          "example": "2016-03-09T17:30Z",
          "format": "date",
          "title": "scheduledTime",
          "type": "string"
        },
        "script": {
          "description": "The Cloud Code script to run for each player",
          "title": "script",
          "type": "string"
        },
        "started": {
          "description": "The time at which the bulk job started to execute",
          "example": "2016-03-09T17:30Z",
          "format": "date",
          "title": "started",
          "type": "string"
        },
        "state": {
          "description": "The current state of the bulk job",
          "title": "state",
          "type": "string"
        }
      }
    },
    "BundledGood": {
      "properties": {
        "qty": {
          "description": "The number of items bundled",
          "format": "int64",
          "title": "qty",
          "type": "integer"
        },
        "shortCode": {
          "description": "The shortCode of the bundled good",
          "title": "shortCode",
          "type": "string"
        }
      }
    },
    "BuyVirtualGoodResponse": {
      "properties": {
        "boughtItems": {
          "description": "A JSON object containing details of the bought items",
          "items": {
            "$ref": "#/definitions/Boughtitem"
          },
          "title": "boughtItems",
          "type": "array"
        },
        "currenciesAdded": {
          "description": "An object containing the short code and amount added for each currency",
          "title": "currenciesAdded",
          "type": "object"
        },
        "currency1Added": {
          "description": "How much currency type 1 was added",
          "format": "int64",
          "title": "currency1Added",
          "type": "integer"
        },
        "currency2Added": {
          "description": "How much currency type 2 was added",
          "format": "int64",
          "title": "currency2Added",
          "type": "integer"
        },
        "currency3Added": {
          "description": "How much currency type 3 was added",
          "format": "int64",
          "title": "currency3Added",
          "type": "integer"
        },
        "currency4Added": {
          "description": "How much currency type 4 was added",
          "format": "int64",
          "title": "currency4Added",
          "type": "integer"
        },
        "currency5Added": {
          "description": "How much currency type 5 was added",
          "format": "int64",
          "title": "currency5Added",
          "type": "integer"
        },
        "currency6Added": {
          "description": "How much currency type 6 was added",
          "format": "int64",
          "title": "currency6Added",
          "type": "integer"
        },
        "currencyConsumed": {
          "description": "For a buy with currency request, how much currency was used",
          "format": "int64",
          "title": "currencyConsumed",
          "type": "integer"
        },
        "currencyShortCode": {
          "description": "For a buy with currency request, the short code of the currency used",
          "title": "currencyShortCode",
          "type": "string"
        },
        "currencyType": {
          "description": "For a buy with currency request, which currency type was used",
          "format": "int64",
          "title": "currencyType",
          "type": "integer"
        },
        "invalidItems": {
          "description": "A list of invalid items for this purchase (if any). This field is populated only for store buys",
          "items": {
            "type": "string"
          },
          "title": "invalidItems",
          "type": "array"
        },
        "requestId": {
          "description": "The ID of the corresponding Request",
          "title": "requestId",
          "type": "string"
        },
        "scriptData": {
          "$ref": "#/definitions/ScriptData",
          "description": "A JSON Map of any data added either to the Request or the Response by your Cloud Code",
          "title": "scriptData"
        },
        "transactionIds": {
          "description": "The list of transactionIds, for this purchase, if they exist. This field is populated only for store buys",
          "items": {
            "type": "string"
          },
          "title": "transactionIds",
          "type": "array"
        }
      }
    },
    "BuyVirtualGoodsRequest": {
      "properties": {
        "@class": {
          "default": ".BuyVirtualGoodsRequest",
          "description": "The request type",
          "title": "@class",
          "type": "string"
        },
        "currencyShortCode": {
          "description": "The short code of the currency to use",
          "title": "currencyShortCode",
          "type": "string"
        },
        "currencyType": {
          "description": "Which virtual currency to use. (1 to 6)",
          "format": "int64",
          "title": "currencyType",
          "type": "integer"
        },
        "playerId": {
          "description": "The player to run this request as",
          "title": "playerId",
          "type": "string"
        },
        "quantity": {
          "description": "The number of items to purchase",
          "format": "int64",
          "title": "quantity",
          "type": "integer"
        },
        "requestId": {
          "description": "The SDK adds a requestId to all requests, this is used to match responses from the websocket",
          "title": "requestId",
          "type": "string"
        },
        "shortCode": {
          "description": "The short code of the virtual good to be purchased",
          "title": "shortCode",
          "type": "string"
        }
      }
    },
    "CancelBulkJobAdminRequest": {
      "properties": {
        "@class": {
          "default": ".CancelBulkJobAdminRequest",
          "description": "The request type",
          "title": "@class",
          "type": "string"
        },
        "bulkJobIds": {
          "description": "The IDs of existing bulk jobs to cancel",
          "items": {
            "type": "string"
          },
          "title": "bulkJobIds",
          "type": "array"
        },
        "requestId": {
          "description": "The SDK adds a requestId to all requests, this is used to match responses from the websocket",
          "title": "requestId",
          "type": "string"
        }
      }
    },
    "CancelBulkJobAdminResponse": {
      "properties": {
        "bulkJobs": {
          "description": "A list of JSON objects containing bulk jobs",
          "items": {
            "$ref": "#/definitions/BulkJob"
          },
          "title": "bulkJobs",
          "type": "array"
        },
        "requestId": {
          "description": "The ID of the corresponding Request",
          "title": "requestId",
          "type": "string"
        },
        "scriptData": {
          "$ref": "#/definitions/ScriptData",
          "description": "A JSON Map of any data added either to the Request or the Response by your Cloud Code",
          "title": "scriptData"
        }
      }
    },
    "Challenge": {
      "properties": {
        "accepted": {
          "description": "A list of PlayerDetail objects that represents the players that have accepted this challenge.",
          "items": {
            "$ref": "#/definitions/PlayerDetail"
          },
          "title": "accepted",
          "type": "array"
        },
        "challengeId": {
          "description": "A unique identifier for this challenge.",
          "title": "challengeId",
          "type": "string"
        },
        "challengeMessage": {
          "description": "The message included in the challenge by the challenging player who created the challenge.",
          "title": "challengeMessage",
          "type": "string"
        },
        "challengeName": {
          "description": "The name of the challenge that this message relates to.",
          "title": "challengeName",
          "type": "string"
        },
        "challenged": {
          "description": "A list of PlayerDetail objects that represents the players that were challenged in this challenge.",
          "items": {
            "$ref": "#/definitions/PlayerDetail"
          },
          "title": "challenged",
          "type": "array"
        },
        "challenger": {
          "$ref": "#/definitions/PlayerDetail",
          "description": "Details of the player who issued this challenge.",
          "title": "challenger"
        },
        "currency1Wager": {
          "description": "The amount of type 1 currency that has been wagered on this challenge.",
          "format": "int64",
          "title": "currency1Wager",
          "type": "integer"
        },
        "currency2Wager": {
          "description": "The amount of type 2 currency that has been wagered on this challenge.",
          "format": "int64",
          "title": "currency2Wager",
          "type": "integer"
        },
        "currency3Wager": {
          "description": "The amount of type 3 currency that has been wagered on this challenge.",
          "format": "int64",
          "title": "currency3Wager",
          "type": "integer"
        },
        "currency4Wager": {
          "description": "The amount of type 4 currency that has been wagered on this challenge.",
          "format": "int64",
          "title": "currency4Wager",
          "type": "integer"
        },
        "currency5Wager": {
          "description": "The amount of type 5 currency that has been wagered on this challenge.",
          "format": "int64",
          "title": "currency5Wager",
          "type": "integer"
        },
        "currency6Wager": {
          "description": "The amount of type 6 currency that has been wagered on this challenge.",
          "format": "int64",
          "title": "currency6Wager",
          "type": "integer"
        },
        "currencyWagers": {
          "description": "An object representing the currencies that have been wagered on this challenge.",
          "title": "currencyWagers",
          "type": "object"
        },
        "declined": {
          "description": "A list of PlayerDetail objects that represents the players that have declined this challenge.",
          "items": {
            "$ref": "#/definitions/PlayerDetail"
          },
          "title": "declined",
          "type": "array"
        },
        "endDate": {
          "description": "The date when the challenge ends.",
          "example": "2016-03-09T17:30Z",
          "format": "date",
          "title": "endDate",
          "type": "string"
        },
        "expiryDate": {
          "description": "The latest date that a player can accept the challenge.",
          "example": "2016-03-09T17:30Z",
          "format": "date",
          "title": "expiryDate",
          "type": "string"
        },
        "maxTurns": {
          "description": "The maximum number of turns that this challenge is configured for.",
          "format": "int64",
          "title": "maxTurns",
          "type": "integer"
        },
        "nextPlayer": {
          "description": "In a turn based challenge this fields contains the player's id whose turn it is next.",
          "title": "nextPlayer",
          "type": "string"
        },
        "scriptData": {
          "description": "ScriptData is arbitrary data that can be stored in a challenge instance by a Cloud Code script.",
          "items": {
            "$ref": "#/definitions/ScriptData"
          },
          "title": "scriptData",
          "type": "array"
        },
        "shortCode": {
          "description": "The challenge's short code.",
          "title": "shortCode",
          "type": "string"
        },
        "startDate": {
          "description": "The date when the challenge starts.",
          "example": "2016-03-09T17:30Z",
          "format": "date",
          "title": "startDate",
          "type": "string"
        },
        "state": {
          "description": "One of these possible state values: ISSUED, EXPIRED, ACCEPTED, DECLINED, COMPLETE, WITHDRAWN, RUNNING, WAITING, RECEIVED",
          "title": "state",
          "type": "string"
        },
        "turnCount": {
          "description": "A collection containing the number of turns taken by each player that has accepted the challenge.\r\nEach turn count is a Long keyed on a String that represents the player's id",
          "items": {
            "$ref": "#/definitions/PlayerTurnCount"
          },
          "title": "turnCount",
          "type": "array"
        }
      }
    },
    "ChallengeType": {
      "properties": {
        "challengeShortCode": {
          "description": "The shortCode for this challenge.",
          "title": "challengeShortCode",
          "type": "string"
        },
        "description": {
          "description": "The description of this challenge.",
          "title": "description",
          "type": "string"
        },
        "getleaderboardName": {
          "description": "The name of the leaderboard for this challenge.",
          "title": "getleaderboardName",
          "type": "string"
        },
        "name": {
          "description": "The name of this challenge.",
          "title": "name",
          "type": "string"
        },
        "tags": {
          "description": "The tags for this challenge.",
          "title": "tags",
          "type": "string"
        }
      }
    },
    "ChangeUserDetailsRequest": {
      "properties": {
        "@class": {
          "default": ".ChangeUserDetailsRequest",
          "description": "The request type",
          "title": "@class",
          "type": "string"
        },
        "displayName": {
          "description": "The new display name to set in the player data.",
          "title": "displayName",
          "type": "string"
        },
        "language": {
          "description": "The new language code to set in the player data.",
          "title": "language",
          "type": "string"
        },
        "newPassword": {
          "description": "The new password to set in the player data.",
          "title": "newPassword",
          "type": "string"
        },
        "oldPassword": {
          "description": "The player's existing password. If supplied it will be checked against the password stored in the player data. This allows you re-authenticate the player making the change.",
          "title": "oldPassword",
          "type": "string"
        },
        "playerId": {
          "description": "The player to run this request as",
          "title": "playerId",
          "type": "string"
        },
        "requestId": {
          "description": "The SDK adds a requestId to all requests, this is used to match responses from the websocket",
          "title": "requestId",
          "type": "string"
        },
        "userName": {
          "description": "The new userName with which this player will sign in.  If the player currently authenticates using device authentication this will upgrade their account and require them to use username and password authentication from now on.",
          "title": "userName",
          "type": "string"
        }
      }
    },
    "ChangeUserDetailsResponse": {
      "properties": {
        "requestId": {
          "description": "The ID of the corresponding Request",
          "title": "requestId",
          "type": "string"
        },
        "scriptData": {
          "$ref": "#/definitions/ScriptData",
          "description": "A JSON Map of any data added either to the Request or the Response by your Cloud Code",
          "title": "scriptData"
        }
      }
    },
    "ChatMessage": {
      "properties": {
        "fromId": {
          "description": "The id of the player who sent this message",
          "title": "fromId",
          "type": "string"
        },
        "id": {
          "description": "The id of this chat message",
          "title": "id",
          "type": "string"
        },
        "message": {
          "description": "The text sent in this message",
          "title": "message",
          "type": "string"
        },
        "when": {
          "description": "A date representing the time this message was sent",
          "example": "2016-03-09T17:30Z",
          "format": "date",
          "title": "when",
          "type": "string"
        },
        "who": {
          "description": "The displayName of the player who sent this message",
          "title": "who",
          "type": "string"
        }
      }
    },
    "ChatOnChallengeRequest": {
      "properties": {
        "@class": {
          "default": ".ChatOnChallengeRequest",
          "description": "The request type",
          "title": "@class",
          "type": "string"
        },
        "challengeInstanceId": {
          "description": "The ID of the challenge",
          "title": "challengeInstanceId",
          "type": "string"
        },
        "message": {
          "description": "An optional message to send with the challenge",
          "title": "message",
          "type": "string"
        },
        "playerId": {
          "description": "The player to run this request as",
          "title": "playerId",
          "type": "string"
        },
        "requestId": {
          "description": "The SDK adds a requestId to all requests, this is used to match responses from the websocket",
          "title": "requestId",
          "type": "string"
        }
      }
    },
    "ChatOnChallengeResponse": {
      "properties": {
        "challengeInstanceId": {
          "description": "The challenge instance id",
          "title": "challengeInstanceId",
          "type": "string"
        },
        "requestId": {
          "description": "The ID of the corresponding Request",
          "title": "requestId",
          "type": "string"
        },
        "scriptData": {
          "$ref": "#/definitions/ScriptData",
          "description": "A JSON Map of any data added either to the Request or the Response by your Cloud Code",
          "title": "scriptData"
        }
      }
    },
    "ConsumeVirtualGoodRequest": {
      "properties": {
        "@class": {
          "default": ".ConsumeVirtualGoodRequest",
          "description": "The request type",
          "title": "@class",
          "type": "string"
        },
        "playerId": {
          "description": "The player to run this request as",
          "title": "playerId",
          "type": "string"
        },
        "quantity": {
          "description": "The amount of virtual goods to be consumed",
          "format": "int64",
          "title": "quantity",
          "type": "integer"
        },
        "requestId": {
          "description": "The SDK adds a requestId to all requests, this is used to match responses from the websocket",
          "title": "requestId",
          "type": "string"
        },
        "shortCode": {
          "description": "The short code of the virtual good to be consumed",
          "title": "shortCode",
          "type": "string"
        }
      }
    },
    "ConsumeVirtualGoodResponse": {
      "properties": {
        "requestId": {
          "description": "The ID of the corresponding Request",
          "title": "requestId",
          "type": "string"
        },
        "scriptData": {
          "$ref": "#/definitions/ScriptData",
          "description": "A JSON Map of any data added either to the Request or the Response by your Cloud Code",
          "title": "scriptData"
        }
      }
    },
    "CreateChallengeRequest": {
      "properties": {
        "@class": {
          "default": ".CreateChallengeRequest",
          "description": "The request type",
          "title": "@class",
          "type": "string"
        },
        "accessType": {
          "description": "Who can join this challenge. Either PUBLIC, PRIVATE or FRIENDS",
          "title": "accessType",
          "type": "string"
        },
        "autoStartJoinedChallengeOnMaxPlayers": {
          "description": "Whether this challenge should automatically start when a new player joins and maxPlayers is reached",
          "title": "autoStartJoinedChallengeOnMaxPlayers",
          "type": "boolean"
        },
        "challengeMessage": {
          "description": "An optional message to include with the challenge",
          "title": "challengeMessage",
          "type": "string"
        },
        "challengeShortCode": {
          "description": "The short code of the challenge",
          "title": "challengeShortCode",
          "type": "string"
        },
        "currency1Wager": {
          "description": "The ammount of currency type 1 that the player is wagering on this challenge",
          "format": "int64",
          "title": "currency1Wager",
          "type": "integer"
        },
        "currency2Wager": {
          "description": "The amount of currency type 2 that the player is wagering on this challenge",
          "format": "int64",
          "title": "currency2Wager",
          "type": "integer"
        },
        "currency3Wager": {
          "description": "The amount of currency type 3 that the player is wagering on this challenge",
          "format": "int64",
          "title": "currency3Wager",
          "type": "integer"
        },
        "currency4Wager": {
          "description": "The amount of currency type 4 that the player is wagering on this challenge",
          "format": "int64",
          "title": "currency4Wager",
          "type": "integer"
        },
        "currency5Wager": {
          "description": "The amount of currency type 5 that the player is wagering on this challenge",
          "format": "int64",
          "title": "currency5Wager",
          "type": "integer"
        },
        "currency6Wager": {
          "description": "The amount of currency type 6 that the player is wagering on this challenge",
          "format": "int64",
          "title": "currency6Wager",
          "type": "integer"
        },
        "currencyWagers": {
          "description": "A JSON object containing the amounts of named currencies that the player is wagering on this challenge",
          "title": "currencyWagers",
          "type": "object"
        },
        "eligibilityCriteria": {
          "description": "Criteria for who can and cannot find and join this challenge (when the accessType is PUBLIC or FRIENDS).\r\nCurrently supports a field <i>segments</i> that contains segment type against single (where that segment value is required) or multiple (where one of the specified values is required) segment values.\r\nFor each segment type a player must have one of the specified values in order to be considered eligible.",
          "title": "eligibilityCriteria",
          "type": "object"
        },
        "endTime": {
          "description": "The time at which this challenge will end. This is required when the challenge is not linked to an achievement",
          "example": "2016-03-09T17:30Z",
          "format": "date",
          "title": "endTime",
          "type": "string"
        },
        "expiryTime": {
          "description": "The latest time that players can join this challenge",
          "example": "2016-03-09T17:30Z",
          "format": "date",
          "title": "expiryTime",
          "type": "string"
        },
        "maxAttempts": {
          "description": "The maximum number of attempts ",
          "format": "int64",
          "title": "maxAttempts",
          "type": "integer"
        },
        "maxPlayers": {
          "description": "The maximum number of players that are allowed to join this challenge",
          "format": "int64",
          "title": "maxPlayers",
          "type": "integer"
        },
        "minPlayers": {
          "description": "The minimum number of players that are allowed to join this challenge",
          "format": "int64",
          "title": "minPlayers",
          "type": "integer"
        },
        "playerId": {
          "description": "The player to run this request as",
          "title": "playerId",
          "type": "string"
        },
        "requestId": {
          "description": "The SDK adds a requestId to all requests, this is used to match responses from the websocket",
          "title": "requestId",
          "type": "string"
        },
        "silent": {
          "description": "If True  no messaging is triggered",
          "title": "silent",
          "type": "boolean"
        },
        "startTime": {
          "description": "The time at which this challenge will begin",
          "example": "2016-03-09T17:30Z",
          "format": "date",
          "title": "startTime",
          "type": "string"
        },
        "usersToChallenge": {
          "description": "A player id or an array of player ids who will recieve this challenge",
          "items": {
            "type": "string"
          },
          "title": "usersToChallenge",
          "type": "array"
        }
      }
    },
    "CreateChallengeResponse": {
      "properties": {
        "challengeInstanceId": {
          "description": "The challenge instance id",
          "title": "challengeInstanceId",
          "type": "string"
        },
        "requestId": {
          "description": "The ID of the corresponding Request",
          "title": "requestId",
          "type": "string"
        },
        "scriptData": {
          "$ref": "#/definitions/ScriptData",
          "description": "A JSON Map of any data added either to the Request or the Response by your Cloud Code",
          "title": "scriptData"
        }
      }
    },
    "CreateTeamRequest": {
      "properties": {
        "@class": {
          "default": ".CreateTeamRequest",
          "description": "The request type",
          "title": "@class",
          "type": "string"
        },
        "playerId": {
          "description": "The player to run this request as",
          "title": "playerId",
          "type": "string"
        },
        "requestId": {
          "description": "The SDK adds a requestId to all requests, this is used to match responses from the websocket",
          "title": "requestId",
          "type": "string"
        },
        "teamId": {
          "description": "An optional teamId to use",
          "title": "teamId",
          "type": "string"
        },
        "teamName": {
          "description": "A display name to use",
          "title": "teamName",
          "type": "string"
        },
        "teamType": {
          "description": "The type of team to be created",
          "title": "teamType",
          "type": "string"
        }
      }
    },
    "CreateTeamResponse": {
      "properties": {
        "members": {
          "description": "The team members",
          "items": {
            "$ref": "#/definitions/Player"
          },
          "title": "members",
          "type": "array"
        },
        "owner": {
          "$ref": "#/definitions/Player",
          "description": "A summary of the owner",
          "title": "owner"
        },
        "requestId": {
          "description": "The ID of the corresponding Request",
          "title": "requestId",
          "type": "string"
        },
        "scriptData": {
          "$ref": "#/definitions/ScriptData",
          "description": "A JSON Map of any data added either to the Request or the Response by your Cloud Code",
          "title": "scriptData"
        },
        "teamId": {
          "description": "The Id of the team",
          "title": "teamId",
          "type": "string"
        },
        "teamName": {
          "description": "The team name",
          "title": "teamName",
          "type": "string"
        },
        "teamType": {
          "description": "The team type",
          "title": "teamType",
          "type": "string"
        }
      }
    },
    "DeclineChallengeRequest": {
      "properties": {
        "@class": {
          "default": ".DeclineChallengeRequest",
          "description": "The request type",
          "title": "@class",
          "type": "string"
        },
        "challengeInstanceId": {
          "description": "The ID of the challenge",
          "title": "challengeInstanceId",
          "type": "string"
        },
        "message": {
          "description": "An optional message to send with the challenge",
          "title": "message",
          "type": "string"
        },
        "playerId": {
          "description": "The player to run this request as",
          "title": "playerId",
          "type": "string"
        },
        "requestId": {
          "description": "The SDK adds a requestId to all requests, this is used to match responses from the websocket",
          "title": "requestId",
          "type": "string"
        }
      }
    },
    "DeclineChallengeResponse": {
      "properties": {
        "challengeInstanceId": {
          "description": "The challenge instance id",
          "title": "challengeInstanceId",
          "type": "string"
        },
        "requestId": {
          "description": "The ID of the corresponding Request",
          "title": "requestId",
          "type": "string"
        },
        "scriptData": {
          "$ref": "#/definitions/ScriptData",
          "description": "A JSON Map of any data added either to the Request or the Response by your Cloud Code",
          "title": "scriptData"
        }
      }
    },
    "DeviceAuthenticationRequest": {
      "properties": {
        "@class": {
          "default": ".DeviceAuthenticationRequest",
          "description": "The request type",
          "title": "@class",
          "type": "string"
        },
        "deviceId": {
          "description": "A unique device identifier. Each platform has it's own method for getting a unique id",
          "title": "deviceId",
          "type": "string"
        },
        "deviceModel": {
          "description": "The device model",
          "title": "deviceModel",
          "type": "string"
        },
        "deviceName": {
          "description": "The device name",
          "title": "deviceName",
          "type": "string"
        },
        "deviceOS": {
          "description": "An indicator of the device platform, should be IOS, ANDROID, WP8 or W8",
          "title": "deviceOS",
          "type": "string"
        },
        "deviceType": {
          "description": "The device type",
          "title": "deviceType",
          "type": "string"
        },
        "displayName": {
          "description": "An optional displayname for the player",
          "title": "displayName",
          "type": "string"
        },
        "operatingSystem": {
          "description": "The device type",
          "title": "operatingSystem",
          "type": "string"
        },
        "requestId": {
          "description": "The SDK adds a requestId to all requests, this is used to match responses from the websocket",
          "title": "requestId",
          "type": "string"
        },
        "segments": {
          "description": "An optional segment configuration for this request.\r\nIf this request reates a new player on the gamesparks platform, the segments of the new player will match the values provided",
          "title": "segments",
          "type": "object"
        }
      }
    },
    "DismissMessageRequest": {
      "properties": {
        "@class": {
          "default": ".DismissMessageRequest",
          "description": "The request type",
          "title": "@class",
          "type": "string"
        },
        "messageId": {
          "description": "The messageId of the message to dismiss",
          "title": "messageId",
          "type": "string"
        },
        "playerId": {
          "description": "The player to run this request as",
          "title": "playerId",
          "type": "string"
        },
        "requestId": {
          "description": "The SDK adds a requestId to all requests, this is used to match responses from the websocket",
          "title": "requestId",
          "type": "string"
        }
      }
    },
    "DismissMessageResponse": {
      "properties": {
        "requestId": {
          "description": "The ID of the corresponding Request",
          "title": "requestId",
          "type": "string"
        },
        "scriptData": {
          "$ref": "#/definitions/ScriptData",
          "description": "A JSON Map of any data added either to the Request or the Response by your Cloud Code",
          "title": "scriptData"
        }
      }
    },
    "DismissMultipleMessagesRequest": {
      "properties": {
        "@class": {
          "default": ".DismissMultipleMessagesRequest",
          "description": "The request type",
          "title": "@class",
          "type": "string"
        },
        "messageIds": {
          "description": "The list of the messageIds to dismiss",
          "items": {
            "type": "string"
          },
          "title": "messageIds",
          "type": "array"
        },
        "playerId": {
          "description": "The player to run this request as",
          "title": "playerId",
          "type": "string"
        },
        "requestId": {
          "description": "The SDK adds a requestId to all requests, this is used to match responses from the websocket",
          "title": "requestId",
          "type": "string"
        }
      }
    },
    "DismissMultipleMessagesResponse": {
      "properties": {
        "failedDismissals": {
          "description": "A list of the messageId values that were not dismissed",
          "items": {
            "type": "string"
          },
          "title": "failedDismissals",
          "type": "array"
        },
        "messagesDismissed": {
          "description": "An integer describing how many messages were dismissed",
          "format": "int64",
          "title": "messagesDismissed",
          "type": "integer"
        },
        "requestId": {
          "description": "The ID of the corresponding Request",
          "title": "requestId",
          "type": "string"
        },
        "scriptData": {
          "$ref": "#/definitions/ScriptData",
          "description": "A JSON Map of any data added either to the Request or the Response by your Cloud Code",
          "title": "scriptData"
        }
      }
    },
    "DropTeamRequest": {
      "properties": {
        "@class": {
          "default": ".DropTeamRequest",
          "description": "The request type",
          "title": "@class",
          "type": "string"
        },
        "ownerId": {
          "description": "The team owner to find, used in combination with teamType. If not supplied the current players id will be used",
          "title": "ownerId",
          "type": "string"
        },
        "playerId": {
          "description": "The player to run this request as",
          "title": "playerId",
          "type": "string"
        },
        "requestId": {
          "description": "The SDK adds a requestId to all requests, this is used to match responses from the websocket",
          "title": "requestId",
          "type": "string"
        },
        "teamId": {
          "description": "The teamId to find (may be null if teamType supplied)",
          "title": "teamId",
          "type": "string"
        },
        "teamType": {
          "description": "The teamType to find, used in combination with the current player, or the player defined by ownerId",
          "title": "teamType",
          "type": "string"
        }
      }
    },
    "DropTeamResponse": {
      "properties": {
        "requestId": {
          "description": "The ID of the corresponding Request",
          "title": "requestId",
          "type": "string"
        },
        "scriptData": {
          "$ref": "#/definitions/ScriptData",
          "description": "A JSON Map of any data added either to the Request or the Response by your Cloud Code",
          "title": "scriptData"
        }
      }
    },
    "EndSessionRequest": {
      "properties": {
        "@class": {
          "default": ".EndSessionRequest",
          "description": "The request type",
          "title": "@class",
          "type": "string"
        },
        "playerId": {
          "description": "The player to run this request as",
          "title": "playerId",
          "type": "string"
        },
        "requestId": {
          "description": "The SDK adds a requestId to all requests, this is used to match responses from the websocket",
          "title": "requestId",
          "type": "string"
        }
      }
    },
    "EndSessionResponse": {
      "properties": {
        "requestId": {
          "description": "The ID of the corresponding Request",
          "title": "requestId",
          "type": "string"
        },
        "scriptData": {
          "$ref": "#/definitions/ScriptData",
          "description": "A JSON Map of any data added either to the Request or the Response by your Cloud Code",
          "title": "scriptData"
        },
        "sessionDuration": {
          "description": "The length of this session",
          "format": "int64",
          "title": "sessionDuration",
          "type": "integer"
        }
      }
    },
    "FacebookConnectRequest": {
      "properties": {
        "@class": {
          "default": ".FacebookConnectRequest",
          "description": "The request type",
          "title": "@class",
          "type": "string"
        },
        "accessToken": {
          "description": "The access token is used by the client to make authenticated requests on behalf of the end user.\r\nIt has a longer lifetime than the authorization code, typically on the order of minutes or hours.\r\nWhen the access token expires, attempts to use it will fail, and a new access token must be obtained via a refresh token.",
          "title": "accessToken",
          "type": "string"
        },
        "code": {
          "description": "An authorization code is a short-lived token representing the user's access grant, created by the authorization server and passed to the client application via the browser.\r\nThe client application sends the authorization code to the authorization server to obtain an access token and, optionally, a refresh token.",
          "title": "code",
          "type": "string"
        },
        "doNotCreateNewPlayer": {
          "description": "Indicates whether the server should return an error if a new player would have been registered, rather than creating the player.  Defaults to false.",
          "title": "doNotCreateNewPlayer",
          "type": "boolean"
        },
        "doNotLinkToCurrentPlayer": {
          "description": "Indicates that the server should not try to link the external profile with the current player.  If false, links the external profile to the currently signed in player.  If true, creates a new player and links the external profile to them.  Defaults to false.",
          "title": "doNotLinkToCurrentPlayer",
          "type": "boolean"
        },
        "errorOnSwitch": {
          "description": "Indicates whether the server should return an error if an account switch would have occurred, rather than switching automatically.  Defaults to false.",
          "title": "errorOnSwitch",
          "type": "boolean"
        },
        "requestId": {
          "description": "The SDK adds a requestId to all requests, this is used to match responses from the websocket",
          "title": "requestId",
          "type": "string"
        },
        "segments": {
          "description": "An optional segment configuration for this request.\r\nIf this request creates a new player on the gamesparks platform, the segments of the new player will match the values provided",
          "title": "segments",
          "type": "object"
        },
        "switchIfPossible": {
          "description": "Indicates that the server should switch to the supplied profile if it isalready associated to a player. Defaults to false.",
          "title": "switchIfPossible",
          "type": "boolean"
        },
        "syncDisplayName": {
          "description": "Indicates that the associated players displayName should be kept in syn with this profile when it's updated by the external provider.",
          "title": "syncDisplayName",
          "type": "boolean"
        }
      }
    },
    "FindChallengeRequest": {
      "properties": {
        "@class": {
          "default": ".FindChallengeRequest",
          "description": "The request type",
          "title": "@class",
          "type": "string"
        },
        "accessType": {
          "description": "The type of challenge to find, either PUBLIC or FRIENDS.  Defaults to FRIENDS",
          "title": "accessType",
          "type": "string"
        },
        "count": {
          "description": "The number of challenges to return (MAX=50)",
          "format": "int64",
          "title": "count",
          "type": "integer"
        },
        "eligibility": {
          "description": "Optional.  Allows the current player's eligibility to be overridden by what is provided here.",
          "title": "eligibility",
          "type": "object"
        },
        "offset": {
          "description": "The offset to start from when returning challenges (used for paging)",
          "format": "int64",
          "title": "offset",
          "type": "integer"
        },
        "playerId": {
          "description": "The player to run this request as",
          "title": "playerId",
          "type": "string"
        },
        "requestId": {
          "description": "The SDK adds a requestId to all requests, this is used to match responses from the websocket",
          "title": "requestId",
          "type": "string"
        },
        "shortCode": {
          "description": "Optional shortCodes to filter the results by challenge type",
          "items": {
            "type": "string"
          },
          "title": "shortCode",
          "type": "array"
        }
      }
    },
    "FindChallengeResponse": {
      "properties": {
        "challengeInstances": {
          "description": "A list of JSON objects representing the challenges.",
          "items": {
            "$ref": "#/definitions/Challenge"
          },
          "title": "challengeInstances",
          "type": "array"
        },
        "requestId": {
          "description": "The ID of the corresponding Request",
          "title": "requestId",
          "type": "string"
        },
        "scriptData": {
          "$ref": "#/definitions/ScriptData",
          "description": "A JSON Map of any data added either to the Request or the Response by your Cloud Code",
          "title": "scriptData"
        }
      }
    },
    "FindMatchRequest": {
      "properties": {
        "@class": {
          "default": ".FindMatchRequest",
          "description": "The request type",
          "title": "@class",
          "type": "string"
        },
        "action": {
          "description": "The action to take on the already in-flight request for this match. Currently supported actions are: 'cancel'",
          "title": "action",
          "type": "string"
        },
        "matchGroup": {
          "description": "Optional. Players will be grouped based on the distinct value passed in here, only players in the same group can be matched together",
          "title": "matchGroup",
          "type": "string"
        },
        "matchShortCode": {
          "description": "The shortCode of the match type this player is registering for",
          "title": "matchShortCode",
          "type": "string"
        },
        "playerId": {
          "description": "The player to run this request as",
          "title": "playerId",
          "type": "string"
        },
        "requestId": {
          "description": "The SDK adds a requestId to all requests, this is used to match responses from the websocket",
          "title": "requestId",
          "type": "string"
        },
        "skill": {
          "description": "The skill of the player looking for a match",
          "format": "int64",
          "title": "skill",
          "type": "integer"
        }
      }
    },
    "FindMatchResponse": {
      "properties": {
        "accessToken": {
          "description": "The accessToken used to authenticate this player for this match",
          "title": "accessToken",
          "type": "string"
        },
        "host": {
          "description": "The host to connect to for this match",
          "title": "host",
          "type": "string"
        },
        "matchData": {
          "description": "MatchData is arbitrary data that can be stored in a Match instance by a Cloud Code script.",
          "title": "matchData",
          "type": "object"
        },
        "matchId": {
          "description": "The id for this match instance",
          "title": "matchId",
          "type": "string"
        },
        "opponents": {
          "description": "The opponents this player has been matched against",
          "items": {
            "$ref": "#/definitions/Player"
          },
          "title": "opponents",
          "type": "array"
        },
        "peerId": {
          "description": "The peerId of this player within the match",
          "format": "int64",
          "title": "peerId",
          "type": "integer"
        },
        "playerId": {
          "description": "The id of the current player",
          "title": "playerId",
          "type": "string"
        },
        "port": {
          "description": "The port to connect to for this match",
          "format": "int64",
          "title": "port",
          "type": "integer"
        },
        "requestId": {
          "description": "The ID of the corresponding Request",
          "title": "requestId",
          "type": "string"
        },
        "scriptData": {
          "$ref": "#/definitions/ScriptData",
          "description": "A JSON Map of any data added either to the Request or the Response by your Cloud Code",
          "title": "scriptData"
        }
      }
    },
    "FindPendingMatchesRequest": {
      "properties": {
        "@class": {
          "default": ".FindPendingMatchesRequest",
          "description": "The request type",
          "title": "@class",
          "type": "string"
        },
        "matchGroup": {
          "description": "Optional. The matchGroup of the match this player previously registeredfor",
          "title": "matchGroup",
          "type": "string"
        },
        "matchShortCode": {
          "description": "The shortCode of the match this player previously registered for",
          "title": "matchShortCode",
          "type": "string"
        },
        "maxMatchesToFind": {
          "description": "Optional. The maximum number of pending matches to return (default=10)",
          "format": "int64",
          "title": "maxMatchesToFind",
          "type": "integer"
        },
        "playerId": {
          "description": "The player to run this request as",
          "title": "playerId",
          "type": "string"
        },
        "requestId": {
          "description": "The SDK adds a requestId to all requests, this is used to match responses from the websocket",
          "title": "requestId",
          "type": "string"
        }
      }
    },
    "FindPendingMatchesResponse": {
      "properties": {
        "pendingMatches": {
          "description": "A list of JSON objects containing pending matches",
          "items": {
            "$ref": "#/definitions/PendingMatch"
          },
          "title": "pendingMatches",
          "type": "array"
        },
        "requestId": {
          "description": "The ID of the corresponding Request",
          "title": "requestId",
          "type": "string"
        },
        "scriptData": {
          "$ref": "#/definitions/ScriptData",
          "description": "A JSON Map of any data added either to the Request or the Response by your Cloud Code",
          "title": "scriptData"
        }
      }
    },
    "GameCenterConnectRequest": {
      "properties": {
        "@class": {
          "default": ".GameCenterConnectRequest",
          "description": "The request type",
          "title": "@class",
          "type": "string"
        },
        "displayName": {
          "description": "The display of the current player from GameCenter. This will be used as the displayName of the gamesparks player if created (or syncDisplayname is true)",
          "title": "displayName",
          "type": "string"
        },
        "doNotCreateNewPlayer": {
          "description": "Indicates whether the server should return an error if a new player would have been registered, rather than creating the player.  Defaults to false.",
          "title": "doNotCreateNewPlayer",
          "type": "boolean"
        },
        "doNotLinkToCurrentPlayer": {
          "description": "Indicates that the server should not try to link the external profile with the current player.  If false, links the external profile to the currently signed in player.  If true, creates a new player and links the external profile to them.  Defaults to false.",
          "title": "doNotLinkToCurrentPlayer",
          "type": "boolean"
        },
        "errorOnSwitch": {
          "description": "Indicates whether the server should return an error if an account switch would have occurred, rather than switching automatically.  Defaults to false.",
          "title": "errorOnSwitch",
          "type": "boolean"
        },
        "externalPlayerId": {
          "description": "The game center id of the current player. This value obtained be obtained from GKLocalPlayer playerID",
          "title": "externalPlayerId",
          "type": "string"
        },
        "publicKeyUrl": {
          "description": "The url from where we will download the public key. This value should be obtained from generateIdentityVerificationSignatureWithCompletionHandler. ",
          "title": "publicKeyUrl",
          "type": "string"
        },
        "requestId": {
          "description": "The SDK adds a requestId to all requests, this is used to match responses from the websocket",
          "title": "requestId",
          "type": "string"
        },
        "salt": {
          "description": "The salt is needed in order to prevent request forgery. This value should be obtained from generateIdentityVerificationSignatureWithCompletionHandler and should be base64 encoded using [salt base64Encoding]",
          "title": "salt",
          "type": "string"
        },
        "segments": {
          "description": "An optional segment configuration for this request.\r\nIf this request creates a new player on the gamesparks platform, the segments of the new player will match the values provided",
          "title": "segments",
          "type": "object"
        },
        "signature": {
          "description": "The signature is needed to validate that the request is genuine and that we can save the player. This value should be obtained from generateIdentityVerificationSignatureWithCompletionHandler and should be base64 encoded using [signature base64Encoding]",
          "title": "signature",
          "type": "string"
        },
        "switchIfPossible": {
          "description": "Indicates that the server should switch to the supplied profile if it isalready associated to a player. Defaults to false.",
          "title": "switchIfPossible",
          "type": "boolean"
        },
        "syncDisplayName": {
          "description": "Indicates that the associated players displayName should be kept in syn with this profile when it's updated by the external provider.",
          "title": "syncDisplayName",
          "type": "boolean"
        },
        "timestamp": {
          "description": "The timestamp is needed to validate the request signature. This value should be obtained from generateIdentityVerificationSignatureWithCompletionHandler",
          "format": "int64",
          "title": "timestamp",
          "type": "integer"
        }
      }
    },
    "GetChallengeRequest": {
      "properties": {
        "@class": {
          "default": ".GetChallengeRequest",
          "description": "The request type",
          "title": "@class",
          "type": "string"
        },
        "challengeInstanceId": {
          "description": "The ID of the challenge",
          "title": "challengeInstanceId",
          "type": "string"
        },
        "message": {
          "description": "An optional message to send with the challenge",
          "title": "message",
          "type": "string"
        },
        "playerId": {
          "description": "The player to run this request as",
          "title": "playerId",
          "type": "string"
        },
        "requestId": {
          "description": "The SDK adds a requestId to all requests, this is used to match responses from the websocket",
          "title": "requestId",
          "type": "string"
        }
      }
    },
    "GetChallengeResponse": {
      "properties": {
        "challenge": {
          "$ref": "#/definitions/Challenge",
          "description": "A JSON object representing the challenge.",
          "title": "challenge"
        },
        "requestId": {
          "description": "The ID of the corresponding Request",
          "title": "requestId",
          "type": "string"
        },
        "scriptData": {
          "$ref": "#/definitions/ScriptData",
          "description": "A JSON Map of any data added either to the Request or the Response by your Cloud Code",
          "title": "scriptData"
        }
      }
    },
    "GetDownloadableRequest": {
      "properties": {
        "@class": {
          "default": ".GetDownloadableRequest",
          "description": "The request type",
          "title": "@class",
          "type": "string"
        },
        "playerId": {
          "description": "The player to run this request as",
          "title": "playerId",
          "type": "string"
        },
        "requestId": {
          "description": "The SDK adds a requestId to all requests, this is used to match responses from the websocket",
          "title": "requestId",
          "type": "string"
        },
        "shortCode": {
          "description": "The short code of the Downloadable item",
          "title": "shortCode",
          "type": "string"
        }
      }
    },
    "GetDownloadableResponse": {
      "properties": {
        "lastModified": {
          "description": "The date when the downloadable item was last modified",
          "example": "2016-03-09T17:30Z",
          "format": "date",
          "title": "lastModified",
          "type": "string"
        },
        "requestId": {
          "description": "The ID of the corresponding Request",
          "title": "requestId",
          "type": "string"
        },
        "scriptData": {
          "$ref": "#/definitions/ScriptData",
          "description": "A JSON Map of any data added either to the Request or the Response by your Cloud Code",
          "title": "scriptData"
        },
        "shortCode": {
          "description": "The short code of the item",
          "title": "shortCode",
          "type": "string"
        },
        "size": {
          "description": "The size of the item in bytes",
          "format": "int64",
          "title": "size",
          "type": "integer"
        },
        "url": {
          "description": "The download URL",
          "title": "url",
          "type": "string"
        }
      }
    },
    "GetLeaderboardEntriesRequest": {
      "properties": {
        "@class": {
          "default": ".GetLeaderboardEntriesRequest",
          "description": "The request type",
          "title": "@class",
          "type": "string"
        },
        "challenges": {
          "description": "The challenge leaderboards to return entries for",
          "items": {
            "type": "string"
          },
          "title": "challenges",
          "type": "array"
        },
        "inverseSocial": {
          "description": "Returns the leaderboard excluding the player's social friends",
          "title": "inverseSocial",
          "type": "boolean"
        },
        "leaderboards": {
          "description": "The list of leaderboards shortcodes",
          "items": {
            "type": "string"
          },
          "title": "leaderboards",
          "type": "array"
        },
        "player": {
          "description": "The player id. Leave out to use the current player id",
          "title": "player",
          "type": "string"
        },
        "playerId": {
          "description": "The player to run this request as",
          "title": "playerId",
          "type": "string"
        },
        "requestId": {
          "description": "The SDK adds a requestId to all requests, this is used to match responses from the websocket",
          "title": "requestId",
          "type": "string"
        },
        "social": {
          "description": "Set to true to include the player's game friends",
          "title": "social",
          "type": "boolean"
        },
        "teamTypes": {
          "description": "The types of team to apply this request to",
          "items": {
            "type": "string"
          },
          "title": "teamTypes",
          "type": "array"
        }
      }
    },
    "GetLeaderboardEntriesResponse": {
      "properties": {
        "requestId": {
          "description": "The ID of the corresponding Request",
          "title": "requestId",
          "type": "string"
        },
        "scriptData": {
          "$ref": "#/definitions/ScriptData",
          "description": "A JSON Map of any data added either to the Request or the Response by your Cloud Code",
          "title": "scriptData"
        }
      }
    },
    "GetMessageRequest": {
      "properties": {
        "@class": {
          "default": ".GetMessageRequest",
          "description": "The request type",
          "title": "@class",
          "type": "string"
        },
        "messageId": {
          "description": "The messageId of the message retreive",
          "title": "messageId",
          "type": "string"
        },
        "playerId": {
          "description": "The player to run this request as",
          "title": "playerId",
          "type": "string"
        },
        "requestId": {
          "description": "The SDK adds a requestId to all requests, this is used to match responses from the websocket",
          "title": "requestId",
          "type": "string"
        }
      }
    },
    "GetMessageResponse": {
      "properties": {
        "message": {
          "description": "The message data",
          "title": "message",
          "type": "object"
        },
        "requestId": {
          "description": "The ID of the corresponding Request",
          "title": "requestId",
          "type": "string"
        },
        "scriptData": {
          "$ref": "#/definitions/ScriptData",
          "description": "A JSON Map of any data added either to the Request or the Response by your Cloud Code",
          "title": "scriptData"
        },
        "status": {
          "description": "The message status",
          "title": "status",
          "type": "string"
        }
      }
    },
    "GetMyTeamsRequest": {
      "properties": {
        "@class": {
          "default": ".GetMyTeamsRequest",
          "description": "The request type",
          "title": "@class",
          "type": "string"
        },
        "ownedOnly": {
          "description": "Set to true to only get teams owned by the player",
          "title": "ownedOnly",
          "type": "boolean"
        },
        "playerId": {
          "description": "The player to run this request as",
          "title": "playerId",
          "type": "string"
        },
        "requestId": {
          "description": "The SDK adds a requestId to all requests, this is used to match responses from the websocket",
          "title": "requestId",
          "type": "string"
        },
        "teamTypes": {
          "description": "The type of teams to get",
          "items": {
            "type": "string"
          },
          "title": "teamTypes",
          "type": "array"
        }
      }
    },
    "GetMyTeamsResponse": {
      "properties": {
        "requestId": {
          "description": "The ID of the corresponding Request",
          "title": "requestId",
          "type": "string"
        },
        "scriptData": {
          "$ref": "#/definitions/ScriptData",
          "description": "A JSON Map of any data added either to the Request or the Response by your Cloud Code",
          "title": "scriptData"
        },
        "teams": {
          "description": "The team data",
          "items": {
            "$ref": "#/definitions/Team"
          },
          "title": "teams",
          "type": "array"
        }
      }
    },
    "GetPropertyRequest": {
      "properties": {
        "@class": {
          "default": ".GetPropertyRequest",
          "description": "The request type",
          "title": "@class",
          "type": "string"
        },
        "playerId": {
          "description": "The player to run this request as",
          "title": "playerId",
          "type": "string"
        },
        "propertyShortCode": {
          "description": "The shortCode of the property to return.",
          "title": "propertyShortCode",
          "type": "string"
        },
        "requestId": {
          "description": "The SDK adds a requestId to all requests, this is used to match responses from the websocket",
          "title": "requestId",
          "type": "string"
        }
      }
    },
    "GetPropertyResponse": {
      "properties": {
        "property": {
          "description": "The property value",
          "title": "property",
          "type": "object"
        },
        "requestId": {
          "description": "The ID of the corresponding Request",
          "title": "requestId",
          "type": "string"
        },
        "scriptData": {
          "$ref": "#/definitions/ScriptData",
          "description": "A JSON Map of any data added either to the Request or the Response by your Cloud Code",
          "title": "scriptData"
        }
      }
    },
    "GetPropertySetRequest": {
      "properties": {
        "@class": {
          "default": ".GetPropertySetRequest",
          "description": "The request type",
          "title": "@class",
          "type": "string"
        },
        "playerId": {
          "description": "The player to run this request as",
          "title": "playerId",
          "type": "string"
        },
        "propertySetShortCode": {
          "description": "The shortCode of the property set to return.",
          "title": "propertySetShortCode",
          "type": "string"
        },
        "requestId": {
          "description": "The SDK adds a requestId to all requests, this is used to match responses from the websocket",
          "title": "requestId",
          "type": "string"
        }
      }
    },
    "GetPropertySetResponse": {
      "properties": {
        "propertySet": {
          "description": "The property set",
          "title": "propertySet",
          "type": "object"
        },
        "requestId": {
          "description": "The ID of the corresponding Request",
          "title": "requestId",
          "type": "string"
        },
        "scriptData": {
          "$ref": "#/definitions/ScriptData",
          "description": "A JSON Map of any data added either to the Request or the Response by your Cloud Code",
          "title": "scriptData"
        }
      }
    },
    "GetTeamRequest": {
      "properties": {
        "@class": {
          "default": ".GetTeamRequest",
          "description": "The request type",
          "title": "@class",
          "type": "string"
        },
        "ownerId": {
          "description": "The team owner to find, used in combination with teamType. If not supplied the current players id will be used",
          "title": "ownerId",
          "type": "string"
        },
        "playerId": {
          "description": "The player to run this request as",
          "title": "playerId",
          "type": "string"
        },
        "requestId": {
          "description": "The SDK adds a requestId to all requests, this is used to match responses from the websocket",
          "title": "requestId",
          "type": "string"
        },
        "teamId": {
          "description": "The teamId to find (may be null if teamType supplied)",
          "title": "teamId",
          "type": "string"
        },
        "teamType": {
          "description": "The teamType to find, used in combination with the current player, or the player defined by ownerId",
          "title": "teamType",
          "type": "string"
        }
      }
    },
    "GetTeamResponse": {
      "properties": {
        "members": {
          "description": "The team members",
          "items": {
            "$ref": "#/definitions/Player"
          },
          "title": "members",
          "type": "array"
        },
        "owner": {
          "$ref": "#/definitions/Player",
          "description": "A summary of the owner",
          "title": "owner"
        },
        "requestId": {
          "description": "The ID of the corresponding Request",
          "title": "requestId",
          "type": "string"
        },
        "scriptData": {
          "$ref": "#/definitions/ScriptData",
          "description": "A JSON Map of any data added either to the Request or the Response by your Cloud Code",
          "title": "scriptData"
        },
        "teamId": {
          "description": "The Id of the team",
          "title": "teamId",
          "type": "string"
        },
        "teamName": {
          "description": "The team name",
          "title": "teamName",
          "type": "string"
        },
        "teamType": {
          "description": "The team type",
          "title": "teamType",
          "type": "string"
        },
        "teams": {
          "description": "A JSON array of teams.",
          "items": {
            "$ref": "#/definitions/Team"
          },
          "title": "teams",
          "type": "array"
        }
      }
    },
    "GetUploadUrlRequest": {
      "properties": {
        "@class": {
          "default": ".GetUploadUrlRequest",
          "description": "The request type",
          "title": "@class",
          "type": "string"
        },
        "playerId": {
          "description": "The player to run this request as",
          "title": "playerId",
          "type": "string"
        },
        "requestId": {
          "description": "The SDK adds a requestId to all requests, this is used to match responses from the websocket",
          "title": "requestId",
          "type": "string"
        },
        "uploadData": {
          "description": "Optional meta data which is stored against the player's uploaded content",
          "items": {
            "type": "object"
          },
          "title": "uploadData",
          "type": "array"
        }
      }
    },
    "GetUploadUrlResponse": {
      "properties": {
        "requestId": {
          "description": "The ID of the corresponding Request",
          "title": "requestId",
          "type": "string"
        },
        "scriptData": {
          "$ref": "#/definitions/ScriptData",
          "description": "A JSON Map of any data added either to the Request or the Response by your Cloud Code",
          "title": "scriptData"
        },
        "url": {
          "description": "The time sensitive upload URL",
          "title": "url",
          "type": "string"
        }
      }
    },
    "GetUploadedRequest": {
      "properties": {
        "@class": {
          "default": ".GetUploadedRequest",
          "description": "The request type",
          "title": "@class",
          "type": "string"
        },
        "playerId": {
          "description": "The player to run this request as",
          "title": "playerId",
          "type": "string"
        },
        "requestId": {
          "description": "The SDK adds a requestId to all requests, this is used to match responses from the websocket",
          "title": "requestId",
          "type": "string"
        },
        "uploadId": {
          "description": "The system generated id of the uploaded item",
          "title": "uploadId",
          "type": "string"
        }
      }
    },
    "GetUploadedResponse": {
      "properties": {
        "requestId": {
          "description": "The ID of the corresponding Request",
          "title": "requestId",
          "type": "string"
        },
        "scriptData": {
          "$ref": "#/definitions/ScriptData",
          "description": "A JSON Map of any data added either to the Request or the Response by your Cloud Code",
          "title": "scriptData"
        },
        "size": {
          "description": "The size of the file in bytes",
          "format": "int64",
          "title": "size",
          "type": "integer"
        },
        "url": {
          "description": "A time sensitive URL to a piece of content",
          "title": "url",
          "type": "string"
        }
      }
    },
    "GooglePlayBuyGoodsRequest": {
      "properties": {
        "@class": {
          "default": ".GooglePlayBuyGoodsRequest",
          "description": "The request type",
          "title": "@class",
          "type": "string"
        },
        "currencyCode": {
          "description": "The ISO 4217 currency code representing the real-world currency used for this transaction.",
          "title": "currencyCode",
          "type": "string"
        },
        "playerId": {
          "description": "The player to run this request as",
          "title": "playerId",
          "type": "string"
        },
        "requestId": {
          "description": "The SDK adds a requestId to all requests, this is used to match responses from the websocket",
          "title": "requestId",
          "type": "string"
        },
        "signature": {
          "description": "The value obtained from data.getStringExtra(\"INAPP_DATA_SIGNATURE\");",
          "title": "signature",
          "type": "string"
        },
        "signedData": {
          "description": "The value obtained from data.getStringExtra(\"INAPP_PURCHASE_DATA\")",
          "title": "signedData",
          "type": "string"
        },
        "subUnitPrice": {
          "description": "The price of this purchase",
          "format": "double",
          "title": "subUnitPrice",
          "type": "number"
        },
        "uniqueTransactionByPlayer": {
          "description": "If set to true, the transactionId from this receipt will not be globally valdidated, this will mean replays between players are possible.\r\nIt will only validate the transactionId has not been used by this player before.",
          "title": "uniqueTransactionByPlayer",
          "type": "boolean"
        }
      }
    },
    "GooglePlayConnectRequest": {
      "properties": {
        "@class": {
          "default": ".GooglePlayConnectRequest",
          "description": "The request type",
          "title": "@class",
          "type": "string"
        },
        "accessToken": {
          "description": "The access token is used when using the service id and certificate.",
          "title": "accessToken",
          "type": "string"
        },
        "code": {
          "description": "The access code is used by the client to make authenticated requests on behalf of the end user. Requires clientId and clientsecret to be set",
          "title": "code",
          "type": "string"
        },
        "displayName": {
          "description": "The display of the current player from Google Play. This will be used as the displayName of the gamesparks player if created (or syncDisplayname is true)",
          "title": "displayName",
          "type": "string"
        },
        "doNotCreateNewPlayer": {
          "description": "Indicates whether the server should return an error if a new player would have been registered, rather than creating the player.  Defaults to false.",
          "title": "doNotCreateNewPlayer",
          "type": "boolean"
        },
        "doNotLinkToCurrentPlayer": {
          "description": "Indicates that the server should not try to link the external profile with the current player.  If false, links the external profile to the currently signed in player.  If true, creates a new player and links the external profile to them.  Defaults to false.",
          "title": "doNotLinkToCurrentPlayer",
          "type": "boolean"
        },
        "errorOnSwitch": {
          "description": "Indicates whether the server should return an error if an account switch would have occurred, rather than switching automatically.  Defaults to false.",
          "title": "errorOnSwitch",
          "type": "boolean"
        },
        "googlePlusScope": {
          "description": "Did you request the plus.login scope when you got the access code or authorisation token from Google? If this is true, we will fetch the user's google+ account and friends",
          "title": "googlePlusScope",
          "type": "boolean"
        },
        "profileScope": {
          "description": "Did you request the profile scope when you got the access code or authorisation token from Google? If this is true, we will fetch the user info by calling https://www.googleapis.com/oauth2/v1/userinfo?alt=json ",
          "title": "profileScope",
          "type": "boolean"
        },
        "redirectUri": {
          "description": "Only required when the access code has been granted using an explicit redirectUri, for example when using the mechanism described in https://developers.google.com/+/web/signin/server-side-flow",
          "title": "redirectUri",
          "type": "string"
        },
        "requestId": {
          "description": "The SDK adds a requestId to all requests, this is used to match responses from the websocket",
          "title": "requestId",
          "type": "string"
        },
        "segments": {
          "description": "An optional segment configuration for this request.\r\nIf this request creates a new player on the gamesparks platform, the segments of the new player will match the values provided",
          "title": "segments",
          "type": "object"
        },
        "switchIfPossible": {
          "description": "Indicates that the server should switch to the supplied profile if it isalready associated to a player. Defaults to false.",
          "title": "switchIfPossible",
          "type": "boolean"
        },
        "syncDisplayName": {
          "description": "Indicates that the associated players displayName should be kept in syn with this profile when it's updated by the external provider.",
          "title": "syncDisplayName",
          "type": "boolean"
        }
      }
    },
    "GooglePlusConnectRequest": {
      "properties": {
        "@class": {
          "default": ".GooglePlusConnectRequest",
          "description": "The request type",
          "title": "@class",
          "type": "string"
        },
        "accessToken": {
          "description": "The access token is used when using the service id and certificate.",
          "title": "accessToken",
          "type": "string"
        },
        "code": {
          "description": "The access code is used by the client to make authenticated requests on behalf of the end user. Requires clientId and clientsecret to be set",
          "title": "code",
          "type": "string"
        },
        "doNotCreateNewPlayer": {
          "description": "Indicates whether the server should return an error if a new player would have been registered, rather than creating the player.  Defaults to false.",
          "title": "doNotCreateNewPlayer",
          "type": "boolean"
        },
        "doNotLinkToCurrentPlayer": {
          "description": "Indicates that the server should not try to link the external profile with the current player.  If false, links the external profile to the currently signed in player.  If true, creates a new player and links the external profile to them.  Defaults to false.",
          "title": "doNotLinkToCurrentPlayer",
          "type": "boolean"
        },
        "errorOnSwitch": {
          "description": "Indicates whether the server should return an error if an account switch would have occurred, rather than switching automatically.  Defaults to false.",
          "title": "errorOnSwitch",
          "type": "boolean"
        },
        "redirectUri": {
          "description": "Only required when the access code has been granted using an explicit redirectUri, for example when using the mechanism described in https://developers.google.com/+/web/signin/server-side-flow",
          "title": "redirectUri",
          "type": "string"
        },
        "requestId": {
          "description": "The SDK adds a requestId to all requests, this is used to match responses from the websocket",
          "title": "requestId",
          "type": "string"
        },
        "segments": {
          "description": "An optional segment configuration for this request.\r\nIf this request creates a new player on the gamesparks platform, the segments of the new player will match the values provided",
          "title": "segments",
          "type": "object"
        },
        "switchIfPossible": {
          "description": "Indicates that the server should switch to the supplied profile if it isalready associated to a player. Defaults to false.",
          "title": "switchIfPossible",
          "type": "boolean"
        },
        "syncDisplayName": {
          "description": "Indicates that the associated players displayName should be kept in syn with this profile when it's updated by the external provider.",
          "title": "syncDisplayName",
          "type": "boolean"
        }
      }
    },
    "IOSBuyGoodsRequest": {
      "properties": {
        "@class": {
          "default": ".IOSBuyGoodsRequest",
          "description": "The request type",
          "title": "@class",
          "type": "string"
        },
        "currencyCode": {
          "description": "The ISO 4217 currency code representing the real-world currency used for this transaction.",
          "title": "currencyCode",
          "type": "string"
        },
        "playerId": {
          "description": "The player to run this request as",
          "title": "playerId",
          "type": "string"
        },
        "receipt": {
          "description": "The receipt obtained from SKPaymentTransaction. transactionReceipt",
          "title": "receipt",
          "type": "string"
        },
        "requestId": {
          "description": "The SDK adds a requestId to all requests, this is used to match responses from the websocket",
          "title": "requestId",
          "type": "string"
        },
        "sandbox": {
          "description": "Should the sandbox account be used",
          "title": "sandbox",
          "type": "boolean"
        },
        "subUnitPrice": {
          "description": "The price of this purchase",
          "format": "double",
          "title": "subUnitPrice",
          "type": "number"
        },
        "uniqueTransactionByPlayer": {
          "description": "If set to true, the transactionId from this receipt will not be globally valdidated, this will mean replays between players are possible.\r\nIt will only validate the transactionId has not been used by this player before.",
          "title": "uniqueTransactionByPlayer",
          "type": "boolean"
        }
      }
    },
    "InvitableFriend": {
      "properties": {
        "displayName": {
          "description": "The display name of the External Friend",
          "title": "displayName",
          "type": "string"
        },
        "id": {
          "description": "The ID of the External Friend",
          "title": "id",
          "type": "string"
        },
        "profilePic": {
          "description": "The profile picture URL of the External Friend",
          "title": "profilePic",
          "type": "string"
        }
      }
    },
    "JoinChallengeRequest": {
      "properties": {
        "@class": {
          "default": ".JoinChallengeRequest",
          "description": "The request type",
          "title": "@class",
          "type": "string"
        },
        "challengeInstanceId": {
          "description": "The ID of the challenge",
          "title": "challengeInstanceId",
          "type": "string"
        },
        "eligibility": {
          "description": "Optional.  Allows the current player's eligibility to be overridden by what is provided here.",
          "title": "eligibility",
          "type": "object"
        },
        "message": {
          "description": "An optional message to send with the challenge",
          "title": "message",
          "type": "string"
        },
        "playerId": {
          "description": "The player to run this request as",
          "title": "playerId",
          "type": "string"
        },
        "requestId": {
          "description": "The SDK adds a requestId to all requests, this is used to match responses from the websocket",
          "title": "requestId",
          "type": "string"
        }
      }
    },
    "JoinChallengeResponse": {
      "properties": {
        "joined": {
          "description": "Whether the player successfully joined the challenge",
          "title": "joined",
          "type": "boolean"
        },
        "requestId": {
          "description": "The ID of the corresponding Request",
          "title": "requestId",
          "type": "string"
        },
        "scriptData": {
          "$ref": "#/definitions/ScriptData",
          "description": "A JSON Map of any data added either to the Request or the Response by your Cloud Code",
          "title": "scriptData"
        }
      }
    },
    "JoinPendingMatchRequest": {
      "properties": {
        "@class": {
          "default": ".JoinPendingMatchRequest",
          "description": "The request type",
          "title": "@class",
          "type": "string"
        },
        "matchGroup": {
          "description": "Optional. The matchGroup of the match this player previously registeredfor",
          "title": "matchGroup",
          "type": "string"
        },
        "matchShortCode": {
          "description": "The shortCode of the match this player previously registered for",
          "title": "matchShortCode",
          "type": "string"
        },
        "pendingMatchId": {
          "description": "The pending match ID to join",
          "title": "pendingMatchId",
          "type": "string"
        },
        "playerId": {
          "description": "The player to run this request as",
          "title": "playerId",
          "type": "string"
        },
        "requestId": {
          "description": "The SDK adds a requestId to all requests, this is used to match responses from the websocket",
          "title": "requestId",
          "type": "string"
        }
      }
    },
    "JoinPendingMatchResponse": {
      "properties": {
        "pendingMatch": {
          "$ref": "#/definitions/PendingMatch",
          "description": "A JSON object containing the new pending match",
          "title": "pendingMatch"
        },
        "requestId": {
          "description": "The ID of the corresponding Request",
          "title": "requestId",
          "type": "string"
        },
        "scriptData": {
          "$ref": "#/definitions/ScriptData",
          "description": "A JSON Map of any data added either to the Request or the Response by your Cloud Code",
          "title": "scriptData"
        }
      }
    },
    "JoinTeamRequest": {
      "properties": {
        "@class": {
          "default": ".JoinTeamRequest",
          "description": "The request type",
          "title": "@class",
          "type": "string"
        },
        "ownerId": {
          "description": "The team owner to find, used in combination with teamType. If not supplied the current players id will be used",
          "title": "ownerId",
          "type": "string"
        },
        "playerId": {
          "description": "The player to run this request as",
          "title": "playerId",
          "type": "string"
        },
        "requestId": {
          "description": "The SDK adds a requestId to all requests, this is used to match responses from the websocket",
          "title": "requestId",
          "type": "string"
        },
        "teamId": {
          "description": "The teamId to find (may be null if teamType supplied)",
          "title": "teamId",
          "type": "string"
        },
        "teamType": {
          "description": "The teamType to find, used in combination with the current player, or the player defined by ownerId",
          "title": "teamType",
          "type": "string"
        }
      }
    },
    "JoinTeamResponse": {
      "properties": {
        "members": {
          "description": "The team members",
          "items": {
            "$ref": "#/definitions/Player"
          },
          "title": "members",
          "type": "array"
        },
        "owner": {
          "$ref": "#/definitions/Player",
          "description": "A summary of the owner",
          "title": "owner"
        },
        "requestId": {
          "description": "The ID of the corresponding Request",
          "title": "requestId",
          "type": "string"
        },
        "scriptData": {
          "$ref": "#/definitions/ScriptData",
          "description": "A JSON Map of any data added either to the Request or the Response by your Cloud Code",
          "title": "scriptData"
        },
        "teamId": {
          "description": "The Id of the team",
          "title": "teamId",
          "type": "string"
        },
        "teamName": {
          "description": "The team name",
          "title": "teamName",
          "type": "string"
        },
        "teamType": {
          "description": "The team type",
          "title": "teamType",
          "type": "string"
        }
      }
    },
    "KongregateConnectRequest": {
      "properties": {
        "@class": {
          "default": ".KongregateConnectRequest",
          "description": "The request type",
          "title": "@class",
          "type": "string"
        },
        "doNotCreateNewPlayer": {
          "description": "Indicates whether the server should return an error if a new player would have been registered, rather than creating the player.  Defaults to false.",
          "title": "doNotCreateNewPlayer",
          "type": "boolean"
        },
        "doNotLinkToCurrentPlayer": {
          "description": "Indicates that the server should not try to link the external profile with the current player.  If false, links the external profile to the currently signed in player.  If true, creates a new player and links the external profile to them.  Defaults to false.",
          "title": "doNotLinkToCurrentPlayer",
          "type": "boolean"
        },
        "errorOnSwitch": {
          "description": "Indicates whether the server should return an error if an account switch would have occurred, rather than switching automatically.  Defaults to false.",
          "title": "errorOnSwitch",
          "type": "boolean"
        },
        "gameAuthToken": {
          "description": "The gameAuthToken, together with the userID are used by the client to make authenticated requests on behalf of the end user.",
          "title": "gameAuthToken",
          "type": "string"
        },
        "requestId": {
          "description": "The SDK adds a requestId to all requests, this is used to match responses from the websocket",
          "title": "requestId",
          "type": "string"
        },
        "segments": {
          "description": "An optional segment configuration for this request.\r\nIf this request creates a new player on the gamesparks platform, the segments of the new player will match the values provided",
          "title": "segments",
          "type": "object"
        },
        "switchIfPossible": {
          "description": "Indicates that the server should switch to the supplied profile if it isalready associated to a player. Defaults to false.",
          "title": "switchIfPossible",
          "type": "boolean"
        },
        "syncDisplayName": {
          "description": "Indicates that the associated players displayName should be kept in syn with this profile when it's updated by the external provider.",
          "title": "syncDisplayName",
          "type": "boolean"
        },
        "userId": {
          "description": "The userID, together with the gameAuthToken are used by the client to make authenticated requests on behalf of the end user.",
          "title": "userId",
          "type": "string"
        }
      }
    },
    "Leaderboard": {
      "properties": {
        "description": {
          "description": "The leaderboard's description.",
          "title": "description",
          "type": "string"
        },
        "name": {
          "description": "The leaderboard's name.",
          "title": "name",
          "type": "string"
        },
        "propertySet": {
          "description": "The custom property set configured on this Leaderboard",
          "title": "propertySet",
          "type": "object"
        },
        "shortCode": {
          "description": "The leaderboard's short code.",
          "title": "shortCode",
          "type": "string"
        }
      }
    },
    "LeaderboardData": {
      "properties": {
        "city": {
          "description": "The city where the player was located when they logged this leaderboard entry.",
          "title": "city",
          "type": "string"
        },
        "country": {
          "description": "The country code where the player was located when they logged this leaderboard entry.",
          "title": "country",
          "type": "string"
        },
        "externalIds": {
          "description": "The players rank.",
          "title": "externalIds",
          "type": "object"
        },
        "rank": {
          "description": "The players rank.",
          "format": "int64",
          "title": "rank",
          "type": "integer"
        },
        "userId": {
          "description": "The unique player id for this leaderboard entry.",
          "title": "userId",
          "type": "string"
        },
        "userName": {
          "description": "The players display name.",
          "title": "userName",
          "type": "string"
        },
        "when": {
          "description": "The date when this leaderboard entry was created.",
          "title": "when",
          "type": "string"
        }
      }
    },
    "LeaderboardDataRequest": {
      "properties": {
        "@class": {
          "default": ".LeaderboardDataRequest",
          "description": "The request type",
          "title": "@class",
          "type": "string"
        },
        "challengeInstanceId": {
          "description": "The challenge instance to get the leaderboard data for",
          "title": "challengeInstanceId",
          "type": "string"
        },
        "dontErrorOnNotSocial": {
          "description": "The default behaviour on a social request is to error if the player has no friends (NOTSOCIAL).  Set this flag to suppress that error and return the player's leaderboard entry instead.",
          "title": "dontErrorOnNotSocial",
          "type": "boolean"
        },
        "entryCount": {
          "description": "The number of items to return in a page (default=50)",
          "format": "int64",
          "title": "entryCount",
          "type": "integer"
        },
        "friendIds": {
          "description": "A friend id or an array of friend ids to use instead of the player's social friends",
          "items": {
            "type": "string"
          },
          "title": "friendIds",
          "type": "array"
        },
        "includeFirst": {
          "description": "Number of entries to include from head of the list",
          "format": "int64",
          "title": "includeFirst",
          "type": "integer"
        },
        "includeLast": {
          "description": "Number of entries to include from tail of the list",
          "format": "int64",
          "title": "includeLast",
          "type": "integer"
        },
        "inverseSocial": {
          "description": "Returns the leaderboard excluding the player's social friends",
          "title": "inverseSocial",
          "type": "boolean"
        },
        "leaderboardShortCode": {
          "description": "The short code of the leaderboard",
          "title": "leaderboardShortCode",
          "type": "string"
        },
        "offset": {
          "description": "The offset into the set of leaderboards returned",
          "format": "int64",
          "title": "offset",
          "type": "integer"
        },
        "playerId": {
          "description": "The player to run this request as",
          "title": "playerId",
          "type": "string"
        },
        "requestId": {
          "description": "The SDK adds a requestId to all requests, this is used to match responses from the websocket",
          "title": "requestId",
          "type": "string"
        },
        "social": {
          "description": "If True returns a leaderboard of the player's social friends",
          "title": "social",
          "type": "boolean"
        },
        "teamIds": {
          "description": "The IDs of the teams you are interested in",
          "items": {
            "type": "string"
          },
          "title": "teamIds",
          "type": "array"
        },
        "teamTypes": {
          "description": "The type of team you are interested in",
          "items": {
            "type": "string"
          },
          "title": "teamTypes",
          "type": "array"
        }
      }
    },
    "LeaderboardDataResponse": {
      "properties": {
        "challengeInstanceId": {
          "description": "The leaderboard's challenge id",
          "title": "challengeInstanceId",
          "type": "string"
        },
        "data": {
          "description": "The leaderboard data",
          "items": {
            "$ref": "#/definitions/LeaderboardData"
          },
          "title": "data",
          "type": "array"
        },
        "first": {
          "description": "The first item in the leaderboard data",
          "items": {
            "$ref": "#/definitions/LeaderboardData"
          },
          "title": "first",
          "type": "array"
        },
        "last": {
          "description": "The last item in the leaderboard data",
          "items": {
            "$ref": "#/definitions/LeaderboardData"
          },
          "title": "last",
          "type": "array"
        },
        "leaderboardShortCode": {
          "description": "The leaderboard short code",
          "title": "leaderboardShortCode",
          "type": "string"
        },
        "requestId": {
          "description": "The ID of the corresponding Request",
          "title": "requestId",
          "type": "string"
        },
        "scriptData": {
          "$ref": "#/definitions/ScriptData",
          "description": "A JSON Map of any data added either to the Request or the Response by your Cloud Code",
          "title": "scriptData"
        }
      }
    },
    "LeaderboardsEntriesRequest": {
      "properties": {
        "@class": {
          "default": ".LeaderboardsEntriesRequest",
          "description": "The request type",
          "title": "@class",
          "type": "string"
        },
        "challenges": {
          "description": "The challenge leaderboards to return entries for",
          "items": {
            "type": "string"
          },
          "title": "challenges",
          "type": "array"
        },
        "inverseSocial": {
          "description": "Returns the leaderboard excluding the player's social friends",
          "title": "inverseSocial",
          "type": "boolean"
        },
        "leaderboards": {
          "description": "The list of leaderboards shortcodes",
          "items": {
            "type": "string"
          },
          "title": "leaderboards",
          "type": "array"
        },
        "player": {
          "description": "The player id. Leave out to use the current player id",
          "title": "player",
          "type": "string"
        },
        "playerId": {
          "description": "The player to run this request as",
          "title": "playerId",
          "type": "string"
        },
        "requestId": {
          "description": "The SDK adds a requestId to all requests, this is used to match responses from the websocket",
          "title": "requestId",
          "type": "string"
        },
        "social": {
          "description": "Set to true to include the player's game friends",
          "title": "social",
          "type": "boolean"
        },
        "teamTypes": {
          "description": "The types of team to apply this request to",
          "items": {
            "type": "string"
          },
          "title": "teamTypes",
          "type": "array"
        }
      }
    },
    "LeaderboardsEntriesResponse": {
      "properties": {
        "requestId": {
          "description": "The ID of the corresponding Request",
          "title": "requestId",
          "type": "string"
        },
        "scriptData": {
          "$ref": "#/definitions/ScriptData",
          "description": "A JSON Map of any data added either to the Request or the Response by your Cloud Code",
          "title": "scriptData"
        }
      }
    },
    "LeaveTeamRequest": {
      "properties": {
        "@class": {
          "default": ".LeaveTeamRequest",
          "description": "The request type",
          "title": "@class",
          "type": "string"
        },
        "ownerId": {
          "description": "The team owner to find, used in combination with teamType. If not supplied the current players id will be used",
          "title": "ownerId",
          "type": "string"
        },
        "playerId": {
          "description": "The player to run this request as",
          "title": "playerId",
          "type": "string"
        },
        "requestId": {
          "description": "The SDK adds a requestId to all requests, this is used to match responses from the websocket",
          "title": "requestId",
          "type": "string"
        },
        "teamId": {
          "description": "The teamId to find (may be null if teamType supplied)",
          "title": "teamId",
          "type": "string"
        },
        "teamType": {
          "description": "The teamType to find, used in combination with the current player, or the player defined by ownerId",
          "title": "teamType",
          "type": "string"
        }
      }
    },
    "LeaveTeamResponse": {
      "properties": {
        "members": {
          "description": "The team members",
          "items": {
            "$ref": "#/definitions/Player"
          },
          "title": "members",
          "type": "array"
        },
        "owner": {
          "$ref": "#/definitions/Player",
          "description": "A summary of the owner",
          "title": "owner"
        },
        "requestId": {
          "description": "The ID of the corresponding Request",
          "title": "requestId",
          "type": "string"
        },
        "scriptData": {
          "$ref": "#/definitions/ScriptData",
          "description": "A JSON Map of any data added either to the Request or the Response by your Cloud Code",
          "title": "scriptData"
        },
        "teamId": {
          "description": "The Id of the team",
          "title": "teamId",
          "type": "string"
        },
        "teamName": {
          "description": "The team name",
          "title": "teamName",
          "type": "string"
        },
        "teamType": {
          "description": "The team type",
          "title": "teamType",
          "type": "string"
        }
      }
    },
    "ListAchievementsRequest": {
      "properties": {
        "@class": {
          "default": ".ListAchievementsRequest",
          "description": "The request type",
          "title": "@class",
          "type": "string"
        },
        "playerId": {
          "description": "The player to run this request as",
          "title": "playerId",
          "type": "string"
        },
        "requestId": {
          "description": "The SDK adds a requestId to all requests, this is used to match responses from the websocket",
          "title": "requestId",
          "type": "string"
        }
      }
    },
    "ListAchievementsResponse": {
      "properties": {
        "achievements": {
          "description": "A list of JSON achievment objects",
          "items": {
            "$ref": "#/definitions/Achievement"
          },
          "title": "achievements",
          "type": "array"
        },
        "requestId": {
          "description": "The ID of the corresponding Request",
          "title": "requestId",
          "type": "string"
        },
        "scriptData": {
          "$ref": "#/definitions/ScriptData",
          "description": "A JSON Map of any data added either to the Request or the Response by your Cloud Code",
          "title": "scriptData"
        }
      }
    },
    "ListBulkJobsAdminRequest": {
      "properties": {
        "@class": {
          "default": ".ListBulkJobsAdminRequest",
          "description": "The request type",
          "title": "@class",
          "type": "string"
        },
        "bulkJobIds": {
          "description": "The IDs of existing bulk jobs to get details for",
          "items": {
            "type": "string"
          },
          "title": "bulkJobIds",
          "type": "array"
        },
        "requestId": {
          "description": "The SDK adds a requestId to all requests, this is used to match responses from the websocket",
          "title": "requestId",
          "type": "string"
        }
      }
    },
    "ListBulkJobsAdminResponse": {
      "properties": {
        "bulkJobs": {
          "description": "A list of JSON objects containing bulk jobs",
          "items": {
            "$ref": "#/definitions/BulkJob"
          },
          "title": "bulkJobs",
          "type": "array"
        },
        "requestId": {
          "description": "The ID of the corresponding Request",
          "title": "requestId",
          "type": "string"
        },
        "scriptData": {
          "$ref": "#/definitions/ScriptData",
          "description": "A JSON Map of any data added either to the Request or the Response by your Cloud Code",
          "title": "scriptData"
        }
      }
    },
    "ListChallengeRequest": {
      "properties": {
        "@class": {
          "default": ".ListChallengeRequest",
          "description": "The request type",
          "title": "@class",
          "type": "string"
        },
        "entryCount": {
          "description": "The number of items to return in a page (default=50)",
          "format": "int64",
          "title": "entryCount",
          "type": "integer"
        },
        "offset": {
          "description": "The offset (page number) to start from (default=0)",
          "format": "int64",
          "title": "offset",
          "type": "integer"
        },
        "playerId": {
          "description": "The player to run this request as",
          "title": "playerId",
          "type": "string"
        },
        "requestId": {
          "description": "The SDK adds a requestId to all requests, this is used to match responses from the websocket",
          "title": "requestId",
          "type": "string"
        },
        "shortCode": {
          "description": "The type of challenge to return",
          "title": "shortCode",
          "type": "string"
        },
        "state": {
          "description": "The state of the challenged to be returned",
          "title": "state",
          "type": "string"
        },
        "states": {
          "description": "The states of the challenges to be returned",
          "items": {
            "type": "string"
          },
          "title": "states",
          "type": "array"
        }
      }
    },
    "ListChallengeResponse": {
      "properties": {
        "challengeInstances": {
          "description": "A list of JSON objects representing the challenges.",
          "items": {
            "$ref": "#/definitions/Challenge"
          },
          "title": "challengeInstances",
          "type": "array"
        },
        "requestId": {
          "description": "The ID of the corresponding Request",
          "title": "requestId",
          "type": "string"
        },
        "scriptData": {
          "$ref": "#/definitions/ScriptData",
          "description": "A JSON Map of any data added either to the Request or the Response by your Cloud Code",
          "title": "scriptData"
        }
      }
    },
    "ListChallengeTypeRequest": {
      "properties": {
        "@class": {
          "default": ".ListChallengeTypeRequest",
          "description": "The request type",
          "title": "@class",
          "type": "string"
        },
        "playerId": {
          "description": "The player to run this request as",
          "title": "playerId",
          "type": "string"
        },
        "requestId": {
          "description": "The SDK adds a requestId to all requests, this is used to match responses from the websocket",
          "title": "requestId",
          "type": "string"
        }
      }
    },
    "ListChallengeTypeResponse": {
      "properties": {
        "challengeTemplates": {
          "description": "A list of JSON objects containing the challenge templates for the game",
          "items": {
            "$ref": "#/definitions/ChallengeType"
          },
          "title": "challengeTemplates",
          "type": "array"
        },
        "requestId": {
          "description": "The ID of the corresponding Request",
          "title": "requestId",
          "type": "string"
        },
        "scriptData": {
          "$ref": "#/definitions/ScriptData",
          "description": "A JSON Map of any data added either to the Request or the Response by your Cloud Code",
          "title": "scriptData"
        }
      }
    },
    "ListGameFriendsRequest": {
      "properties": {
        "@class": {
          "default": ".ListGameFriendsRequest",
          "description": "The request type",
          "title": "@class",
          "type": "string"
        },
        "playerId": {
          "description": "The player to run this request as",
          "title": "playerId",
          "type": "string"
        },
        "requestId": {
          "description": "The SDK adds a requestId to all requests, this is used to match responses from the websocket",
          "title": "requestId",
          "type": "string"
        }
      }
    },
    "ListGameFriendsResponse": {
      "properties": {
        "friends": {
          "description": "A list of JSON objects containing game friend data",
          "items": {
            "$ref": "#/definitions/Player"
          },
          "title": "friends",
          "type": "array"
        },
        "requestId": {
          "description": "The ID of the corresponding Request",
          "title": "requestId",
          "type": "string"
        },
        "scriptData": {
          "$ref": "#/definitions/ScriptData",
          "description": "A JSON Map of any data added either to the Request or the Response by your Cloud Code",
          "title": "scriptData"
        }
      }
    },
    "ListInviteFriendsRequest": {
      "properties": {
        "@class": {
          "default": ".ListInviteFriendsRequest",
          "description": "The request type",
          "title": "@class",
          "type": "string"
        },
        "playerId": {
          "description": "The player to run this request as",
          "title": "playerId",
          "type": "string"
        },
        "requestId": {
          "description": "The SDK adds a requestId to all requests, this is used to match responses from the websocket",
          "title": "requestId",
          "type": "string"
        }
      }
    },
    "ListInviteFriendsResponse": {
      "properties": {
        "friends": {
          "description": "A list of JSON objects containing game friend data",
          "items": {
            "$ref": "#/definitions/InvitableFriend"
          },
          "title": "friends",
          "type": "array"
        },
        "requestId": {
          "description": "The ID of the corresponding Request",
          "title": "requestId",
          "type": "string"
        },
        "scriptData": {
          "$ref": "#/definitions/ScriptData",
          "description": "A JSON Map of any data added either to the Request or the Response by your Cloud Code",
          "title": "scriptData"
        }
      }
    },
    "ListLeaderboardsRequest": {
      "properties": {
        "@class": {
          "default": ".ListLeaderboardsRequest",
          "description": "The request type",
          "title": "@class",
          "type": "string"
        },
        "playerId": {
          "description": "The player to run this request as",
          "title": "playerId",
          "type": "string"
        },
        "requestId": {
          "description": "The SDK adds a requestId to all requests, this is used to match responses from the websocket",
          "title": "requestId",
          "type": "string"
        }
      }
    },
    "ListLeaderboardsResponse": {
      "properties": {
        "leaderboards": {
          "description": "A list of JSON object containing leaderboard meta data",
          "items": {
            "$ref": "#/definitions/Leaderboard"
          },
          "title": "leaderboards",
          "type": "array"
        },
        "requestId": {
          "description": "The ID of the corresponding Request",
          "title": "requestId",
          "type": "string"
        },
        "scriptData": {
          "$ref": "#/definitions/ScriptData",
          "description": "A JSON Map of any data added either to the Request or the Response by your Cloud Code",
          "title": "scriptData"
        }
      }
    },
    "ListMessageDetailRequest": {
      "properties": {
        "@class": {
          "default": ".ListMessageDetailRequest",
          "description": "The request type",
          "title": "@class",
          "type": "string"
        },
        "entryCount": {
          "description": "The number of items to return in a page (default=50)",
          "format": "int64",
          "title": "entryCount",
          "type": "integer"
        },
        "include": {
          "description": "An optional filter that limits the message types returned",
          "title": "include",
          "type": "string"
        },
        "offset": {
          "description": "The offset (page number) to start from (default=0)",
          "format": "int64",
          "title": "offset",
          "type": "integer"
        },
        "playerId": {
          "description": "The player to run this request as",
          "title": "playerId",
          "type": "string"
        },
        "requestId": {
          "description": "The SDK adds a requestId to all requests, this is used to match responses from the websocket",
          "title": "requestId",
          "type": "string"
        },
        "status": {
          "description": "The status of messages to be retrieved. If omitted, messages of all statuses will be retrieved",
          "title": "status",
          "type": "string"
        }
      }
    },
    "ListMessageDetailResponse": {
      "properties": {
        "messageList": {
          "description": "A list of JSON objects containing player messages",
          "items": {
            "$ref": "#/definitions/PlayerMessage"
          },
          "title": "messageList",
          "type": "array"
        },
        "requestId": {
          "description": "The ID of the corresponding Request",
          "title": "requestId",
          "type": "string"
        },
        "scriptData": {
          "$ref": "#/definitions/ScriptData",
          "description": "A JSON Map of any data added either to the Request or the Response by your Cloud Code",
          "title": "scriptData"
        }
      }
    },
    "ListMessageRequest": {
      "properties": {
        "@class": {
          "default": ".ListMessageRequest",
          "description": "The request type",
          "title": "@class",
          "type": "string"
        },
        "entryCount": {
          "description": "The number of items to return in a page (default=50)",
          "format": "int64",
          "title": "entryCount",
          "type": "integer"
        },
        "include": {
          "description": "An optional filter that limits the message types returned",
          "title": "include",
          "type": "string"
        },
        "offset": {
          "description": "The offset (page number) to start from (default=0)",
          "format": "int64",
          "title": "offset",
          "type": "integer"
        },
        "playerId": {
          "description": "The player to run this request as",
          "title": "playerId",
          "type": "string"
        },
        "requestId": {
          "description": "The SDK adds a requestId to all requests, this is used to match responses from the websocket",
          "title": "requestId",
          "type": "string"
        }
      }
    },
    "ListMessageResponse": {
      "properties": {
        "messageList": {
          "description": "A list of JSON objects containing player messages",
          "items": {
            "type": "object"
          },
          "title": "messageList",
          "type": "array"
        },
        "requestId": {
          "description": "The ID of the corresponding Request",
          "title": "requestId",
          "type": "string"
        },
        "scriptData": {
          "$ref": "#/definitions/ScriptData",
          "description": "A JSON Map of any data added either to the Request or the Response by your Cloud Code",
          "title": "scriptData"
        }
      }
    },
    "ListMessageSummaryRequest": {
      "properties": {
        "@class": {
          "default": ".ListMessageSummaryRequest",
          "description": "The request type",
          "title": "@class",
          "type": "string"
        },
        "entryCount": {
          "description": "The number of items to return in a page (default=50)",
          "format": "int64",
          "title": "entryCount",
          "type": "integer"
        },
        "offset": {
          "description": "The offset (page number) to start from (default=0)",
          "format": "int64",
          "title": "offset",
          "type": "integer"
        },
        "playerId": {
          "description": "The player to run this request as",
          "title": "playerId",
          "type": "string"
        },
        "requestId": {
          "description": "The SDK adds a requestId to all requests, this is used to match responses from the websocket",
          "title": "requestId",
          "type": "string"
        }
      }
    },
    "ListMessageSummaryResponse": {
      "properties": {
        "messageList": {
          "description": "A list of JSON objects containing player message summaries",
          "items": {
            "type": "object"
          },
          "title": "messageList",
          "type": "array"
        },
        "requestId": {
          "description": "The ID of the corresponding Request",
          "title": "requestId",
          "type": "string"
        },
        "scriptData": {
          "$ref": "#/definitions/ScriptData",
          "description": "A JSON Map of any data added either to the Request or the Response by your Cloud Code",
          "title": "scriptData"
        }
      }
    },
    "ListTeamChatRequest": {
      "properties": {
        "@class": {
          "default": ".ListTeamChatRequest",
          "description": "The request type",
          "title": "@class",
          "type": "string"
        },
        "entryCount": {
          "description": "The number of messages to return (default=50)",
          "format": "int64",
          "title": "entryCount",
          "type": "integer"
        },
        "offset": {
          "description": "The offset (nth message) to start from (default=0)",
          "format": "int64",
          "title": "offset",
          "type": "integer"
        },
        "ownerId": {
          "description": "The team owner to find, used in combination with teamType. If not supplied the current players id will be used",
          "title": "ownerId",
          "type": "string"
        },
        "playerId": {
          "description": "The player to run this request as",
          "title": "playerId",
          "type": "string"
        },
        "requestId": {
          "description": "The SDK adds a requestId to all requests, this is used to match responses from the websocket",
          "title": "requestId",
          "type": "string"
        },
        "teamId": {
          "description": "The teamId to find (may be null if teamType supplied)",
          "title": "teamId",
          "type": "string"
        },
        "teamType": {
          "description": "The teamType to find, used in combination with the current player, or the player defined by ownerId",
          "title": "teamType",
          "type": "string"
        }
      }
    },
    "ListTeamChatResponse": {
      "properties": {
        "messages": {
          "description": "The collection of team chat messages",
          "items": {
            "$ref": "#/definitions/ChatMessage"
          },
          "title": "messages",
          "type": "array"
        },
        "requestId": {
          "description": "The ID of the corresponding Request",
          "title": "requestId",
          "type": "string"
        },
        "scriptData": {
          "$ref": "#/definitions/ScriptData",
          "description": "A JSON Map of any data added either to the Request or the Response by your Cloud Code",
          "title": "scriptData"
        }
      }
    },
    "ListTeamsRequest": {
      "properties": {
        "@class": {
          "default": ".ListTeamsRequest",
          "description": "The request type",
          "title": "@class",
          "type": "string"
        },
        "entryCount": {
          "description": "The number of teams to return in a page (default=50)",
          "format": "int64",
          "title": "entryCount",
          "type": "integer"
        },
        "offset": {
          "description": "The offset (page number) to start from (default=0)",
          "format": "int64",
          "title": "offset",
          "type": "integer"
        },
        "playerId": {
          "description": "The player to run this request as",
          "title": "playerId",
          "type": "string"
        },
        "requestId": {
          "description": "The SDK adds a requestId to all requests, this is used to match responses from the websocket",
          "title": "requestId",
          "type": "string"
        },
        "teamNameFilter": {
          "description": "An optional filter to return teams with a matching name",
          "title": "teamNameFilter",
          "type": "string"
        },
        "teamTypeFilter": {
          "description": "An optional filter to return teams of a particular type",
          "title": "teamTypeFilter",
          "type": "string"
        }
      }
    },
    "ListTeamsResponse": {
      "properties": {
        "requestId": {
          "description": "The ID of the corresponding Request",
          "title": "requestId",
          "type": "string"
        },
        "scriptData": {
          "$ref": "#/definitions/ScriptData",
          "description": "A JSON Map of any data added either to the Request or the Response by your Cloud Code",
          "title": "scriptData"
        },
        "teams": {
          "description": "A list of JSON objects containing team information",
          "items": {
            "$ref": "#/definitions/Team"
          },
          "title": "teams",
          "type": "array"
        }
      }
    },
    "ListTransactionsRequest": {
      "properties": {
        "@class": {
          "default": ".ListTransactionsRequest",
          "description": "The request type",
          "title": "@class",
          "type": "string"
        },
        "dateFrom": {
          "description": "Optional date constraint to list transactions from",
          "example": "2016-03-09T17:30Z",
          "format": "date",
          "title": "dateFrom",
          "type": "string"
        },
        "dateTo": {
          "description": "Optional date constraint to list transactions to",
          "example": "2016-03-09T17:30Z",
          "format": "date",
          "title": "dateTo",
          "type": "string"
        },
        "entryCount": {
          "description": "The number of items to return in a page (default=50)",
          "format": "int64",
          "title": "entryCount",
          "type": "integer"
        },
        "include": {
          "description": "An optional filter that limits the transaction types returned",
          "title": "include",
          "type": "string"
        },
        "offset": {
          "description": "The offset (page number) to start from (default=0)",
          "format": "int64",
          "title": "offset",
          "type": "integer"
        },
        "playerId": {
          "description": "The player to run this request as",
          "title": "playerId",
          "type": "string"
        },
        "requestId": {
          "description": "The SDK adds a requestId to all requests, this is used to match responses from the websocket",
          "title": "requestId",
          "type": "string"
        }
      }
    },
    "ListTransactionsResponse": {
      "properties": {
        "requestId": {
          "description": "The ID of the corresponding Request",
          "title": "requestId",
          "type": "string"
        },
        "scriptData": {
          "$ref": "#/definitions/ScriptData",
          "description": "A JSON Map of any data added either to the Request or the Response by your Cloud Code",
          "title": "scriptData"
        },
        "transactionList": {
          "description": "A list of JSON objects containing player transactions",
          "items": {
            "$ref": "#/definitions/PlayerTransaction"
          },
          "title": "transactionList",
          "type": "array"
        }
      }
    },
    "ListVirtualGoodsRequest": {
      "properties": {
        "@class": {
          "default": ".ListVirtualGoodsRequest",
          "description": "The request type",
          "title": "@class",
          "type": "string"
        },
        "includeDisabled": {
          "description": "If true, the returned list will include disabled VirtualVoods",
          "title": "includeDisabled",
          "type": "boolean"
        },
        "playerId": {
          "description": "The player to run this request as",
          "title": "playerId",
          "type": "string"
        },
        "requestId": {
          "description": "The SDK adds a requestId to all requests, this is used to match responses from the websocket",
          "title": "requestId",
          "type": "string"
        },
        "tags": {
          "description": "A filter to only include goods with the given tags. Each good must have all the provided tags.",
          "items": {
            "type": "string"
          },
          "title": "tags",
          "type": "array"
        }
      }
    },
    "ListVirtualGoodsResponse": {
      "properties": {
        "requestId": {
          "description": "The ID of the corresponding Request",
          "title": "requestId",
          "type": "string"
        },
        "scriptData": {
          "$ref": "#/definitions/ScriptData",
          "description": "A JSON Map of any data added either to the Request or the Response by your Cloud Code",
          "title": "scriptData"
        },
        "virtualGoods": {
          "description": "A list of JSON objects containing virtual goods data",
          "items": {
            "$ref": "#/definitions/VirtualGood"
          },
          "title": "virtualGoods",
          "type": "array"
        }
      }
    },
    "Location": {
      "properties": {
        "city": {
          "description": "The city",
          "title": "city",
          "type": "string"
        },
        "country": {
          "description": "The country",
          "title": "country",
          "type": "string"
        },
        "latitide": {
          "description": "The latitude",
          "format": "double",
          "title": "latitide",
          "type": "number"
        },
        "longditute": {
          "description": "The longditute",
          "format": "double",
          "title": "longditute",
          "type": "number"
        }
      }
    },
    "LogChallengeEventRequest": {
      "properties": {
        "@class": {
          "default": ".LogChallengeEventRequest",
          "description": "The request type",
          "title": "@class",
          "type": "string"
        },
        "challengeInstanceId": {
          "description": "The ID challenge instance to target",
          "title": "challengeInstanceId",
          "type": "string"
        },
        "eventKey": {
          "description": "The short code of the event to trigger",
          "title": "eventKey",
          "type": "string"
        },
        "playerId": {
          "description": "The player to run this request as",
          "title": "playerId",
          "type": "string"
        },
        "requestId": {
          "description": "The SDK adds a requestId to all requests, this is used to match responses from the websocket",
          "title": "requestId",
          "type": "string"
        }
      }
    },
    "LogChallengeEventResponse": {
      "properties": {
        "requestId": {
          "description": "The ID of the corresponding Request",
          "title": "requestId",
          "type": "string"
        },
        "scriptData": {
          "$ref": "#/definitions/ScriptData",
          "description": "A JSON Map of any data added either to the Request or the Response by your Cloud Code",
          "title": "scriptData"
        }
      }
    },
    "LogEventRequest": {
      "properties": {
        "@class": {
          "default": ".LogEventRequest",
          "description": "The request type",
          "title": "@class",
          "type": "string"
        },
        "eventKey": {
          "description": "The short code of the event to trigger",
          "title": "eventKey",
          "type": "string"
        },
        "playerId": {
          "description": "The player to run this request as",
          "title": "playerId",
          "type": "string"
        },
        "requestId": {
          "description": "The SDK adds a requestId to all requests, this is used to match responses from the websocket",
          "title": "requestId",
          "type": "string"
        }
      }
    },
    "LogEventResponse": {
      "properties": {
        "requestId": {
          "description": "The ID of the corresponding Request",
          "title": "requestId",
          "type": "string"
        },
        "scriptData": {
          "$ref": "#/definitions/ScriptData",
          "description": "A JSON Map of any data added either to the Request or the Response by your Cloud Code",
          "title": "scriptData"
        }
      }
    },
    "MatchDetailsRequest": {
      "properties": {
        "@class": {
          "default": ".MatchDetailsRequest",
          "description": "The request type",
          "title": "@class",
          "type": "string"
        },
        "matchId": {
          "description": "The matchId to find the details of",
          "title": "matchId",
          "type": "string"
        },
        "playerId": {
          "description": "The player to run this request as",
          "title": "playerId",
          "type": "string"
        },
        "realtimeEnabled": {
          "description": "Adds realtime server details if the match has been created using Cloud Code and it has not been realtime enabled",
          "title": "realtimeEnabled",
          "type": "boolean"
        },
        "requestId": {
          "description": "The SDK adds a requestId to all requests, this is used to match responses from the websocket",
          "title": "requestId",
          "type": "string"
        }
      }
    },
    "MatchDetailsResponse": {
      "properties": {
        "accessToken": {
          "description": "The accessToken used to authenticate this player for this match",
          "title": "accessToken",
          "type": "string"
        },
        "host": {
          "description": "The host to connect to for this match",
          "title": "host",
          "type": "string"
        },
        "matchData": {
          "description": "MatchData is arbitrary data that can be stored in a Match instance by a Cloud Code script.",
          "title": "matchData",
          "type": "object"
        },
        "matchId": {
          "description": "The id for this match instance",
          "title": "matchId",
          "type": "string"
        },
        "opponents": {
          "description": "The opponents this player has been matched against",
          "items": {
            "$ref": "#/definitions/Player"
          },
          "title": "opponents",
          "type": "array"
        },
        "peerId": {
          "description": "The peerId of this player within the match",
          "format": "int64",
          "title": "peerId",
          "type": "integer"
        },
        "playerId": {
          "description": "The id of the current player",
          "title": "playerId",
          "type": "string"
        },
        "port": {
          "description": "The port to connect to for this match",
          "format": "int64",
          "title": "port",
          "type": "integer"
        },
        "requestId": {
          "description": "The ID of the corresponding Request",
          "title": "requestId",
          "type": "string"
        },
        "scriptData": {
          "$ref": "#/definitions/ScriptData",
          "description": "A JSON Map of any data added either to the Request or the Response by your Cloud Code",
          "title": "scriptData"
        }
      }
    },
    "MatchedPlayer": {
      "properties": {
        "location": {
          "description": "The Location of the player",
          "title": "location",
          "type": "object"
        },
        "participantData": {
          "description": "A JSON Map of any data that was associated to this user",
          "title": "participantData",
          "type": "object"
        },
        "playerId": {
          "description": "The ID for player",
          "title": "playerId",
          "type": "string"
        },
        "skill": {
          "description": "The skill of the player in this match",
          "format": "double",
          "title": "skill",
          "type": "number"
        }
      }
    },
    "MatchmakingRequest": {
      "properties": {
        "@class": {
          "default": ".MatchmakingRequest",
          "description": "The request type",
          "title": "@class",
          "type": "string"
        },
        "action": {
          "description": "The action to take on the already in-flight request for this match. Currently supported actions are: 'cancel'",
          "title": "action",
          "type": "string"
        },
        "customQuery": {
          "description": "The query that will be applied to the PendingMatch collection",
          "title": "customQuery",
          "type": "object"
        },
        "matchData": {
          "description": "A JSON Map of any data that will be associated to the pending match",
          "title": "matchData",
          "type": "object"
        },
        "matchGroup": {
          "description": "Optional. Players will be grouped based on the distinct value passed in here, only players in the same group can be matched together",
          "title": "matchGroup",
          "type": "string"
        },
        "matchShortCode": {
          "description": "The shortCode of the match type this player is registering for",
          "title": "matchShortCode",
          "type": "string"
        },
        "participantData": {
          "description": "A JSON Map of any data that will be associated to this user in a pending match",
          "title": "participantData",
          "type": "object"
        },
        "playerId": {
          "description": "The player to run this request as",
          "title": "playerId",
          "type": "string"
        },
        "requestId": {
          "description": "The SDK adds a requestId to all requests, this is used to match responses from the websocket",
          "title": "requestId",
          "type": "string"
        },
        "skill": {
          "description": "The skill of the player looking for a match",
          "format": "int64",
          "title": "skill",
          "type": "integer"
        }
      }
    },
    "MatchmakingResponse": {
      "properties": {
        "requestId": {
          "description": "The ID of the corresponding Request",
          "title": "requestId",
          "type": "string"
        },
        "scriptData": {
          "$ref": "#/definitions/ScriptData",
          "description": "A JSON Map of any data added either to the Request or the Response by your Cloud Code",
          "title": "scriptData"
        }
      }
    },
    "NXConnectRequest": {
      "properties": {
        "@class": {
          "default": ".NXConnectRequest",
          "description": "The request type",
          "title": "@class",
          "type": "string"
        },
        "accountPerLoginId": {
          "description": "Whether to create one GameSparks player per console login ID",
          "title": "accountPerLoginId",
          "type": "boolean"
        },
        "displayName": {
          "description": "The display name of the current player from NX. This will be used as the displayName of the gamesparks player if created (or syncDisplayname is true)",
          "title": "displayName",
          "type": "string"
        },
        "doNotCreateNewPlayer": {
          "description": "Indicates whether the server should return an error if a new player would have been registered, rather than creating the player.  Defaults to false.",
          "title": "doNotCreateNewPlayer",
          "type": "boolean"
        },
        "doNotLinkToCurrentPlayer": {
          "description": "Indicates that the server should not try to link the external profile with the current player.  If false, links the external profile to the currently signed in player.  If true, creates a new player and links the external profile to them.  Defaults to false.",
          "title": "doNotLinkToCurrentPlayer",
          "type": "boolean"
        },
        "errorOnSwitch": {
          "description": "Indicates whether the server should return an error if an account switch would have occurred, rather than switching automatically.  Defaults to false.",
          "title": "errorOnSwitch",
          "type": "boolean"
        },
        "nsaIdToken": {
          "description": "The NSA ID token obtained from Nintendo",
          "title": "nsaIdToken",
          "type": "string"
        },
        "requestId": {
          "description": "The SDK adds a requestId to all requests, this is used to match responses from the websocket",
          "title": "requestId",
          "type": "string"
        },
        "segments": {
          "description": "An optional segment configuration for this request.\r\nIf this request creates a new player on the gamesparks platform, the segments of the new player will match the values provided",
          "title": "segments",
          "type": "object"
        },
        "switchIfPossible": {
          "description": "Indicates that the server should switch to the supplied profile if it isalready associated to a player. Defaults to false.",
          "title": "switchIfPossible",
          "type": "boolean"
        },
        "syncDisplayName": {
          "description": "Indicates that the associated players displayName should be kept in syn with this profile when it's updated by the external provider.",
          "title": "syncDisplayName",
          "type": "boolean"
        }
      }
    },
    "PSNAccountConnectRequest": {
      "properties": {
        "@class": {
          "default": ".PSNAccountConnectRequest",
          "description": "The request type",
          "title": "@class",
          "type": "string"
        },
        "authorizationCode": {
          "description": "The authorization code obtained from PSN, as described here https://ps4.scedev.net/resources/documents/SDK/latest/NpAuth-Reference/0008.html",
          "title": "authorizationCode",
          "type": "string"
        },
        "doNotCreateNewPlayer": {
          "description": "Indicates whether the server should return an error if a new player would have been registered, rather than creating the player.  Defaults to false.",
          "title": "doNotCreateNewPlayer",
          "type": "boolean"
        },
        "doNotLinkToCurrentPlayer": {
          "description": "Indicates that the server should not try to link the external profile with the current player.  If false, links the external profile to the currently signed in player.  If true, creates a new player and links the external profile to them.  Defaults to false.",
          "title": "doNotLinkToCurrentPlayer",
          "type": "boolean"
        },
        "errorOnSwitch": {
          "description": "Indicates whether the server should return an error if an account switch would have occurred, rather than switching automatically.  Defaults to false.",
          "title": "errorOnSwitch",
          "type": "boolean"
        },
        "redirectUri": {
          "description": "When using the authorization code obtained from PlayStation®4/PlayStation®Vita/PlayStation®3, this is not required.\r\nWhen using the authorization code obtained with the PC authentication gateway, set the URI issued from the Developer Network website.",
          "title": "redirectUri",
          "type": "string"
        },
        "requestId": {
          "description": "The SDK adds a requestId to all requests, this is used to match responses from the websocket",
          "title": "requestId",
          "type": "string"
        },
        "segments": {
          "description": "An optional segment configuration for this request.\r\nIf this request creates a new player on the gamesparks platform, the segments of the new player will match the values provided",
          "title": "segments",
          "type": "object"
        },
        "switchIfPossible": {
          "description": "Indicates that the server should switch to the supplied profile if it isalready associated to a player. Defaults to false.",
          "title": "switchIfPossible",
          "type": "boolean"
        },
        "syncDisplayName": {
          "description": "Indicates that the associated players displayName should be kept in syn with this profile when it's updated by the external provider.",
          "title": "syncDisplayName",
          "type": "boolean"
        }
      }
    },
    "PSNConnectRequest": {
      "properties": {
        "@class": {
          "default": ".PSNConnectRequest",
          "description": "The request type",
          "title": "@class",
          "type": "string"
        },
        "authorizationCode": {
          "description": "The authorization code obtained from PSN, as described here https://ps4.scedev.net/resources/documents/SDK/latest/NpAuth-Reference/0008.html",
          "title": "authorizationCode",
          "type": "string"
        },
        "doNotCreateNewPlayer": {
          "description": "Indicates whether the server should return an error if a new player would have been registered, rather than creating the player.  Defaults to false.",
          "title": "doNotCreateNewPlayer",
          "type": "boolean"
        },
        "doNotLinkToCurrentPlayer": {
          "description": "Indicates that the server should not try to link the external profile with the current player.  If false, links the external profile to the currently signed in player.  If true, creates a new player and links the external profile to them.  Defaults to false.",
          "title": "doNotLinkToCurrentPlayer",
          "type": "boolean"
        },
        "errorOnSwitch": {
          "description": "Indicates whether the server should return an error if an account switch would have occurred, rather than switching automatically.  Defaults to false.",
          "title": "errorOnSwitch",
          "type": "boolean"
        },
        "redirectUri": {
          "description": "When using the authorization code obtained from PlayStation®4/PlayStation®Vita/PlayStation®3, this is not required.\r\nWhen using the authorization code obtained with the PC authentication gateway, set the URI issued from the Developer Network website.",
          "title": "redirectUri",
          "type": "string"
        },
        "requestId": {
          "description": "The SDK adds a requestId to all requests, this is used to match responses from the websocket",
          "title": "requestId",
          "type": "string"
        },
        "segments": {
          "description": "An optional segment configuration for this request.\r\nIf this request creates a new player on the gamesparks platform, the segments of the new player will match the values provided",
          "title": "segments",
          "type": "object"
        },
        "switchIfPossible": {
          "description": "Indicates that the server should switch to the supplied profile if it isalready associated to a player. Defaults to false.",
          "title": "switchIfPossible",
          "type": "boolean"
        },
        "syncDisplayName": {
          "description": "Indicates that the associated players displayName should be kept in syn with this profile when it's updated by the external provider.",
          "title": "syncDisplayName",
          "type": "boolean"
        }
      }
    },
    "PendingMatch": {
      "properties": {
        "id": {
          "description": "The ID for the pending match",
          "title": "id",
          "type": "string"
        },
        "matchData": {
          "description": "A JSON Map of the matchData associated to this pending match",
          "title": "matchData",
          "type": "object"
        },
        "matchGroup": {
          "description": "The match group for the pending match",
          "title": "matchGroup",
          "type": "string"
        },
        "matchShortCode": {
          "description": "The match shortCode for the pending match",
          "title": "matchShortCode",
          "type": "string"
        },
        "matchedPlayers": {
          "description": "The players already part of this pending match",
          "items": {
            "$ref": "#/definitions/MatchedPlayer"
          },
          "title": "matchedPlayers",
          "type": "array"
        },
        "skill": {
          "description": "The average skill of players in this pending match",
          "format": "double",
          "title": "skill",
          "type": "number"
        }
      }
    },
    "Player": {
      "properties": {
        "achievements": {
          "description": "The achievements of the Player",
          "items": {
            "type": "string"
          },
          "title": "achievements",
          "type": "array"
        },
        "displayName": {
          "description": "The display name of the Player",
          "title": "displayName",
          "type": "string"
        },
        "externalIds": {
          "description": "The external Id's of the Player",
          "title": "externalIds",
          "type": "object"
        },
        "id": {
          "description": "The Id of the Player",
          "title": "id",
          "type": "string"
        },
        "online": {
          "description": "The online status of the Player",
          "title": "online",
          "type": "boolean"
        },
        "scriptData": {
          "description": "The script data of the Player",
          "title": "scriptData",
          "type": "object"
        },
        "virtualGoods": {
          "description": "The virtual goods of the Player",
          "items": {
            "type": "string"
          },
          "title": "virtualGoods",
          "type": "array"
        }
      }
    },
    "PlayerDetail": {
      "properties": {
        "externalIds": {
          "description": "A player's external identifiers",
          "title": "externalIds",
          "type": "object"
        },
        "id": {
          "description": "A player's id",
          "title": "id",
          "type": "string"
        },
        "name": {
          "description": "A player's name",
          "title": "name",
          "type": "string"
        }
      }
    },
    "PlayerMessage": {
      "properties": {
        "id": {
          "description": "The id of the message",
          "title": "id",
          "type": "string"
        },
        "message": {
          "description": "The message content",
          "title": "message",
          "type": "object"
        },
        "seen": {
          "description": "Whether the message has been delivered to the client",
          "title": "seen",
          "type": "boolean"
        },
        "status": {
          "description": "The status of the message",
          "title": "status",
          "type": "string"
        },
        "when": {
          "description": "The date of the message",
          "example": "2016-03-09T17:30Z",
          "format": "date",
          "title": "when",
          "type": "string"
        }
      }
    },
    "PlayerTransaction": {
      "properties": {
        "items": {
          "description": "The items (currency or virtual goods) involved in this transaction",
          "items": {
            "$ref": "#/definitions/PlayerTransactionItem"
          },
          "title": "items",
          "type": "array"
        },
        "originalRequestId": {
          "description": "The original request ID for this transaction",
          "title": "originalRequestId",
          "type": "string"
        },
        "playerId": {
          "description": "The player ID",
          "title": "playerId",
          "type": "string"
        },
        "reason": {
          "description": "The reason for the transaction",
          "title": "reason",
          "type": "string"
        },
        "revokeDate": {
          "description": "Gets the date when this transaction was revoked, if applicable",
          "example": "2016-03-09T17:30Z",
          "format": "date",
          "title": "revokeDate",
          "type": "string"
        },
        "revoked": {
          "description": "Is true if the transaction was revoked",
          "title": "revoked",
          "type": "boolean"
        },
        "script": {
          "description": "The specific script in which this transaction occurred",
          "title": "script",
          "type": "string"
        },
        "scriptType": {
          "description": "The script type in which this transaction occurred (e.g. event)",
          "title": "scriptType",
          "type": "string"
        },
        "transactionId": {
          "description": "The transaction ID of this purchase, if applicable",
          "title": "transactionId",
          "type": "string"
        },
        "when": {
          "description": "The date of the transaction",
          "example": "2016-03-09T17:30Z",
          "format": "date",
          "title": "when",
          "type": "string"
        }
      }
    },
    "PlayerTransactionItem": {
      "properties": {
        "amount": {
          "description": "The amount of this item given to the player in the transaction",
          "format": "int64",
          "title": "amount",
          "type": "integer"
        },
        "newValue": {
          "description": "The quantity the player possesses after the transaction completed",
          "format": "int64",
          "title": "newValue",
          "type": "integer"
        },
        "type": {
          "description": "The type of item",
          "title": "type",
          "type": "string"
        }
      }
    },
    "PlayerTurnCount": {
      "properties": {
        "count": {
          "description": "The number of turns that the player has taken so far during this challenge.",
          "title": "count",
          "type": "string"
        },
        "playerId": {
          "description": "The unique player id.",
          "title": "playerId",
          "type": "string"
        }
      }
    },
    "PsnBuyGoodsRequest": {
      "properties": {
        "@class": {
          "default": ".PsnBuyGoodsRequest",
          "description": "The request type",
          "title": "@class",
          "type": "string"
        },
        "authorizationCode": {
          "description": "The authorization code obtained from PSN, as described here https://ps4.scedev.net/resources/documents/SDK/latest/NpAuth-Reference/0008.html",
          "title": "authorizationCode",
          "type": "string"
        },
        "currencyCode": {
          "description": "The ISO 4217 currency code representing the real-world currency used for this transaction.",
          "title": "currencyCode",
          "type": "string"
        },
        "entitlementLabel": {
          "description": "Specify the entitlement label of the entitlement to update. (Not an entitlement ID).",
          "title": "entitlementLabel",
          "type": "string"
        },
        "playerId": {
          "description": "The player to run this request as",
          "title": "playerId",
          "type": "string"
        },
        "redirectUri": {
          "description": "When using the authorization code obtained from PlayStation®4/PlayStation®Vita/PlayStation®3, this is not required.\r\nWhen using the authorization code obtained with the PC authentication gateway, set the URI issued from the Developer Network website.",
          "title": "redirectUri",
          "type": "string"
        },
        "requestId": {
          "description": "The SDK adds a requestId to all requests, this is used to match responses from the websocket",
          "title": "requestId",
          "type": "string"
        },
        "subUnitPrice": {
          "description": "The price of this purchase",
          "format": "double",
          "title": "subUnitPrice",
          "type": "number"
        },
        "uniqueTransactionByPlayer": {
          "description": "If set to true, the transactionId from this receipt will not be globally valdidated, this will mean replays between players are possible.\r\nIt will only validate the transactionId has not been used by this player before.",
          "title": "uniqueTransactionByPlayer",
          "type": "boolean"
        },
        "useCount": {
          "description": "Optional - specify the quantity of the entitlement to use. Default = 1",
          "format": "int64",
          "title": "useCount",
          "type": "integer"
        }
      }
    },
    "PushRegistrationRequest": {
      "properties": {
        "@class": {
          "default": ".PushRegistrationRequest",
          "description": "The request type",
          "title": "@class",
          "type": "string"
        },
        "deviceOS": {
          "description": "The type of id, valid values are ios, android, fcm, wp8, w8, kindle or viber",
          "title": "deviceOS",
          "type": "string"
        },
        "playerId": {
          "description": "The player to run this request as",
          "title": "playerId",
          "type": "string"
        },
        "pushId": {
          "description": "The push notification identifier for the device",
          "title": "pushId",
          "type": "string"
        },
        "requestId": {
          "description": "The SDK adds a requestId to all requests, this is used to match responses from the websocket",
          "title": "requestId",
          "type": "string"
        }
      }
    },
    "PushRegistrationResponse": {
      "properties": {
        "registrationId": {
          "description": "An identifier for the successful registration.  Clients should store this value to be used in the event the player no longer wants to receive push notifications to this device.",
          "title": "registrationId",
          "type": "string"
        },
        "requestId": {
          "description": "The ID of the corresponding Request",
          "title": "requestId",
          "type": "string"
        },
        "scriptData": {
          "$ref": "#/definitions/ScriptData",
          "description": "A JSON Map of any data added either to the Request or the Response by your Cloud Code",
          "title": "scriptData"
        }
      }
    },
    "QQConnectRequest": {
      "properties": {
        "@class": {
          "default": ".QQConnectRequest",
          "description": "The request type",
          "title": "@class",
          "type": "string"
        },
        "accessToken": {
          "description": "The access token is used by the client to make authenticated requests on behalf of the end user.\r\nWhen the access token expires, attempts to use it will fail, and a new access token must be obtained using the refresh token.",
          "title": "accessToken",
          "type": "string"
        },
        "doNotCreateNewPlayer": {
          "description": "Indicates whether the server should return an error if a new player would have been registered, rather than creating the player.  Defaults to false.",
          "title": "doNotCreateNewPlayer",
          "type": "boolean"
        },
        "doNotLinkToCurrentPlayer": {
          "description": "Indicates that the server should not try to link the external profile with the current player.  If false, links the external profile to the currently signed in player.  If true, creates a new player and links the external profile to them.  Defaults to false.",
          "title": "doNotLinkToCurrentPlayer",
          "type": "boolean"
        },
        "errorOnSwitch": {
          "description": "Indicates whether the server should return an error if an account switch would have occurred, rather than switching automatically.  Defaults to false.",
          "title": "errorOnSwitch",
          "type": "boolean"
        },
        "requestId": {
          "description": "The SDK adds a requestId to all requests, this is used to match responses from the websocket",
          "title": "requestId",
          "type": "string"
        },
        "segments": {
          "description": "An optional segment configuration for this request.\r\nIf this request creates a new player on the gamesparks platform, the segments of the new player will match the values provided",
          "title": "segments",
          "type": "object"
        },
        "switchIfPossible": {
          "description": "Indicates that the server should switch to the supplied profile if it isalready associated to a player. Defaults to false.",
          "title": "switchIfPossible",
          "type": "boolean"
        },
        "syncDisplayName": {
          "description": "Indicates that the associated players displayName should be kept in syn with this profile when it's updated by the external provider.",
          "title": "syncDisplayName",
          "type": "boolean"
        }
      }
    },
    "RegistrationRequest": {
      "properties": {
        "@class": {
          "default": ".RegistrationRequest",
          "description": "The request type",
          "title": "@class",
          "type": "string"
        },
        "displayName": {
          "description": "A display name to use",
          "title": "displayName",
          "type": "string"
        },
        "password": {
          "description": "The previously registered password",
          "title": "password",
          "type": "string"
        },
        "requestId": {
          "description": "The SDK adds a requestId to all requests, this is used to match responses from the websocket",
          "title": "requestId",
          "type": "string"
        },
        "segments": {
          "description": "An optional segment configuration for this request.\r\nIf this request creates a new player on the gamesparks platform, the segments of the new player will match the values provided",
          "title": "segments",
          "type": "object"
        },
        "userName": {
          "description": "The previously registered player name",
          "title": "userName",
          "type": "string"
        }
      }
    },
    "RegistrationResponse": {
      "properties": {
        "authToken": {
          "description": "44b297a8-162a-4220-8c14-dad9a1946ad2",
          "title": "authToken",
          "type": "string"
        },
        "displayName": {
          "description": "The player's display name",
          "title": "displayName",
          "type": "string"
        },
        "newPlayer": {
          "description": "Indicates whether the player was created as part of this request",
          "title": "newPlayer",
          "type": "boolean"
        },
        "requestId": {
          "description": "The ID of the corresponding Request",
          "title": "requestId",
          "type": "string"
        },
        "scriptData": {
          "$ref": "#/definitions/ScriptData",
          "description": "A JSON Map of any data added either to the Request or the Response by your Cloud Code",
          "title": "scriptData"
        },
        "switchSummary": {
          "$ref": "#/definitions/Player",
          "description": "A summary of the player that would be switched to.  Only returned as part of an error response for a request where automatic switching is disabled.",
          "title": "switchSummary"
        },
        "userId": {
          "description": "The player's id",
          "title": "userId",
          "type": "string"
        }
      }
    },
    "RevokePurchaseGoodsRequest": {
      "properties": {
        "@class": {
          "default": ".RevokePurchaseGoodsRequest",
          "description": "The request type",
          "title": "@class",
          "type": "string"
        },
        "playerId": {
          "description": "The playerId for which to revoke the transaction",
          "title": "playerId",
          "type": "string"
        },
        "requestId": {
          "description": "The SDK adds a requestId to all requests, this is used to match responses from the websocket",
          "title": "requestId",
          "type": "string"
        },
        "storeType": {
          "description": "The store type for which to revoke these transactions",
          "title": "storeType",
          "type": "string"
        },
        "transactionIds": {
          "description": "The list of transactionIds to revoke",
          "items": {
            "type": "string"
          },
          "title": "transactionIds",
          "type": "array"
        }
      }
    },
    "RevokePurchaseGoodsResponse": {
      "properties": {
        "requestId": {
          "description": "The ID of the corresponding Request",
          "title": "requestId",
          "type": "string"
        },
        "revokedGoods": {
          "description": "The map of revoked goods",
          "title": "revokedGoods",
          "type": "object"
        },
        "scriptData": {
          "$ref": "#/definitions/ScriptData",
          "description": "A JSON Map of any data added either to the Request or the Response by your Cloud Code",
          "title": "scriptData"
        }
      }
    },
    "ScheduleBulkJobAdminRequest": {
      "properties": {
        "@class": {
          "default": ".ScheduleBulkJobAdminRequest",
          "description": "The request type",
          "title": "@class",
          "type": "string"
        },
        "data": {
          "description": "Optional data to be passed into the script",
          "title": "data",
          "type": "object"
        },
        "moduleShortCode": {
          "description": "The short code of the cloud code module to be executed against each player",
          "title": "moduleShortCode",
          "type": "string"
        },
        "playerQuery": {
          "description": "The query to be run against the player collection to identify which players to execute the cloud code for",
          "title": "playerQuery",
          "type": "object"
        },
        "requestId": {
          "description": "The SDK adds a requestId to all requests, this is used to match responses from the websocket",
          "title": "requestId",
          "type": "string"
        },
        "scheduledTime": {
          "description": "An optional date and time for this job to be run",
          "example": "2016-03-09T17:30Z",
          "format": "date",
          "title": "scheduledTime",
          "type": "string"
        },
        "script": {
          "description": "The script to be executed against each player",
          "title": "script",
          "type": "string"
        }
      }
    },
    "ScheduleBulkJobAdminResponse": {
      "properties": {
        "estimatedCount": {
          "description": "The count of players who would be affected by this job if it ran at the time it was submitted",
          "format": "int64",
          "title": "estimatedCount",
          "type": "integer"
        },
        "jobId": {
          "description": "The unique job ID, used to identify this job in future requests",
          "title": "jobId",
          "type": "string"
        },
        "requestId": {
          "description": "The ID of the corresponding Request",
          "title": "requestId",
          "type": "string"
        },
        "scriptData": {
          "$ref": "#/definitions/ScriptData",
          "description": "A JSON Map of any data added either to the Request or the Response by your Cloud Code",
          "title": "scriptData"
        }
      }
    },
    "ScriptData": {
      "properties": {
        "myKey": {
          "description": "An arbitrary data key",
          "title": "myKey",
          "type": "string"
        },
        "myValue": {
          "description": "An arbitrary data value.",
          "title": "myValue",
          "type": "object"
        }
      }
    },
    "SendFriendMessageRequest": {
      "properties": {
        "@class": {
          "default": ".SendFriendMessageRequest",
          "description": "The request type",
          "title": "@class",
          "type": "string"
        },
        "friendIds": {
          "description": "One or more friend ID's. This can be supplied as a single string, or a JSON array",
          "items": {
            "type": "string"
          },
          "title": "friendIds",
          "type": "array"
        },
        "message": {
          "description": "The message to send",
          "title": "message",
          "type": "string"
        },
        "playerId": {
          "description": "The player to run this request as",
          "title": "playerId",
          "type": "string"
        },
        "requestId": {
          "description": "The SDK adds a requestId to all requests, this is used to match responses from the websocket",
          "title": "requestId",
          "type": "string"
        }
      }
    },
    "SendFriendMessageResponse": {
      "properties": {
        "requestId": {
          "description": "The ID of the corresponding Request",
          "title": "requestId",
          "type": "string"
        },
        "scriptData": {
          "$ref": "#/definitions/ScriptData",
          "description": "A JSON Map of any data added either to the Request or the Response by your Cloud Code",
          "title": "scriptData"
        }
      }
    },
    "SendTeamChatMessageRequest": {
      "properties": {
        "@class": {
          "default": ".SendTeamChatMessageRequest",
          "description": "The request type",
          "title": "@class",
          "type": "string"
        },
        "message": {
          "description": "The message to send",
          "title": "message",
          "type": "string"
        },
        "ownerId": {
          "description": "The team owner to find, used in combination with teamType. If not supplied the current players id will be used",
          "title": "ownerId",
          "type": "string"
        },
        "playerId": {
          "description": "The player to run this request as",
          "title": "playerId",
          "type": "string"
        },
        "requestId": {
          "description": "The SDK adds a requestId to all requests, this is used to match responses from the websocket",
          "title": "requestId",
          "type": "string"
        },
        "teamId": {
          "description": "The teamId to find (may be null if teamType supplied)",
          "title": "teamId",
          "type": "string"
        },
        "teamType": {
          "description": "The teamType to find, used in combination with the current player, or the player defined by ownerId",
          "title": "teamType",
          "type": "string"
        }
      }
    },
    "SendTeamChatMessageResponse": {
      "properties": {
        "requestId": {
          "description": "The ID of the corresponding Request",
          "title": "requestId",
          "type": "string"
        },
        "scriptData": {
          "$ref": "#/definitions/ScriptData",
          "description": "A JSON Map of any data added either to the Request or the Response by your Cloud Code",
          "title": "scriptData"
        }
      }
    },
    "SocialDisconnectRequest": {
      "properties": {
        "@class": {
          "default": ".SocialDisconnectRequest",
          "description": "The request type",
          "title": "@class",
          "type": "string"
        },
        "playerId": {
          "description": "The player to run this request as",
          "title": "playerId",
          "type": "string"
        },
        "requestId": {
          "description": "The SDK adds a requestId to all requests, this is used to match responses from the websocket",
          "title": "requestId",
          "type": "string"
        },
        "systemId": {
          "description": "The external system from which to disconnect this profile, supplied as a two letter ID. The options are: {FACEBOOK:FB, AMAZON:AM, GAME_CENTER:GC\r\nGOOGLE_PLAY:GY , GOOGLE_PLUS:GP, KONGREGATE:KO, PSN:PS, QQ:QQ, STEAM:ST, TWITCH:TC, TWITTER:TW, VIBER:VB, WECHAT:WC, XBOX:XB\r\nXBOXONE:X1, NINTENDO:NX}",
          "title": "systemId",
          "type": "string"
        }
      }
    },
    "SocialDisconnectResponse": {
      "properties": {
        "requestId": {
          "description": "The ID of the corresponding Request",
          "title": "requestId",
          "type": "string"
        },
        "scriptData": {
          "$ref": "#/definitions/ScriptData",
          "description": "A JSON Map of any data added either to the Request or the Response by your Cloud Code",
          "title": "scriptData"
        }
      }
    },
    "SocialLeaderboardDataRequest": {
      "properties": {
        "@class": {
          "default": ".SocialLeaderboardDataRequest",
          "description": "The request type",
          "title": "@class",
          "type": "string"
        },
        "challengeInstanceId": {
          "description": "The challenge instance to get the leaderboard data for",
          "title": "challengeInstanceId",
          "type": "string"
        },
        "dontErrorOnNotSocial": {
          "description": "The default behaviour on a social request is to error if the player has no friends (NOTSOCIAL).  Set this flag to suppress that error and return the player's leaderboard entry instead.",
          "title": "dontErrorOnNotSocial",
          "type": "boolean"
        },
        "entryCount": {
          "description": "The number of items to return in a page (default=50)",
          "format": "int64",
          "title": "entryCount",
          "type": "integer"
        },
        "friendIds": {
          "description": "A friend id or an array of friend ids to use instead of the player's social friends",
          "items": {
            "type": "string"
          },
          "title": "friendIds",
          "type": "array"
        },
        "includeFirst": {
          "description": "Number of entries to include from head of the list",
          "format": "int64",
          "title": "includeFirst",
          "type": "integer"
        },
        "includeLast": {
          "description": "Number of entries to include from tail of the list",
          "format": "int64",
          "title": "includeLast",
          "type": "integer"
        },
        "inverseSocial": {
          "description": "Returns the leaderboard excluding the player's social friends",
          "title": "inverseSocial",
          "type": "boolean"
        },
        "leaderboardShortCode": {
          "description": "The short code of the leaderboard",
          "title": "leaderboardShortCode",
          "type": "string"
        },
        "offset": {
          "description": "The offset into the set of leaderboards returned",
          "format": "int64",
          "title": "offset",
          "type": "integer"
        },
        "playerId": {
          "description": "The player to run this request as",
          "title": "playerId",
          "type": "string"
        },
        "requestId": {
          "description": "The SDK adds a requestId to all requests, this is used to match responses from the websocket",
          "title": "requestId",
          "type": "string"
        },
        "social": {
          "description": "If True returns a leaderboard of the player's social friends",
          "title": "social",
          "type": "boolean"
        },
        "teamIds": {
          "description": "The IDs of the teams you are interested in",
          "items": {
            "type": "string"
          },
          "title": "teamIds",
          "type": "array"
        },
        "teamTypes": {
          "description": "The type of team you are interested in",
          "items": {
            "type": "string"
          },
          "title": "teamTypes",
          "type": "array"
        }
      }
    },
    "SocialStatus": {
      "properties": {
        "active": {
          "description": "When the token is still active.",
          "title": "active",
          "type": "boolean"
        },
        "expires": {
          "description": "When the token expires (if available).",
          "example": "2016-03-09T17:30Z",
          "format": "date",
          "title": "expires",
          "type": "string"
        },
        "systemId": {
          "description": "The identifier of the external platform.",
          "title": "systemId",
          "type": "string"
        }
      }
    },
    "SocialStatusRequest": {
      "properties": {
        "@class": {
          "default": ".SocialStatusRequest",
          "description": "The request type",
          "title": "@class",
          "type": "string"
        },
        "playerId": {
          "description": "The player to run this request as",
          "title": "playerId",
          "type": "string"
        },
        "requestId": {
          "description": "The SDK adds a requestId to all requests, this is used to match responses from the websocket",
          "title": "requestId",
          "type": "string"
        }
      }
    },
    "SocialStatusResponse": {
      "properties": {
        "requestId": {
          "description": "The ID of the corresponding Request",
          "title": "requestId",
          "type": "string"
        },
        "scriptData": {
          "$ref": "#/definitions/ScriptData",
          "description": "A JSON Map of any data added either to the Request or the Response by your Cloud Code",
          "title": "scriptData"
        },
        "statuses": {
          "description": "A list of social statuses.",
          "items": {
            "$ref": "#/definitions/SocialStatus"
          },
          "title": "statuses",
          "type": "array"
        }
      }
    },
    "SteamBuyGoodsRequest": {
      "properties": {
        "@class": {
          "default": ".SteamBuyGoodsRequest",
          "description": "The request type",
          "title": "@class",
          "type": "string"
        },
        "currencyCode": {
          "description": "The ISO 4217 currency code representing the real-world currency used for this transaction.",
          "title": "currencyCode",
          "type": "string"
        },
        "orderId": {
          "description": "Unique 64-bit ID for order",
          "title": "orderId",
          "type": "string"
        },
        "playerId": {
          "description": "The player to run this request as",
          "title": "playerId",
          "type": "string"
        },
        "requestId": {
          "description": "The SDK adds a requestId to all requests, this is used to match responses from the websocket",
          "title": "requestId",
          "type": "string"
        },
        "subUnitPrice": {
          "description": "The price of this purchase",
          "format": "double",
          "title": "subUnitPrice",
          "type": "number"
        },
        "uniqueTransactionByPlayer": {
          "description": "If set to true, the transactionId from this receipt will not be globally valdidated, this will mean replays between players are possible.\r\nIt will only validate the transactionId has not been used by this player before.",
          "title": "uniqueTransactionByPlayer",
          "type": "boolean"
        }
      }
    },
    "SteamConnectRequest": {
      "properties": {
        "@class": {
          "default": ".SteamConnectRequest",
          "description": "The request type",
          "title": "@class",
          "type": "string"
        },
        "doNotCreateNewPlayer": {
          "description": "Indicates whether the server should return an error if a new player would have been registered, rather than creating the player.  Defaults to false.",
          "title": "doNotCreateNewPlayer",
          "type": "boolean"
        },
        "doNotLinkToCurrentPlayer": {
          "description": "Indicates that the server should not try to link the external profile with the current player.  If false, links the external profile to the currently signed in player.  If true, creates a new player and links the external profile to them.  Defaults to false.",
          "title": "doNotLinkToCurrentPlayer",
          "type": "boolean"
        },
        "errorOnSwitch": {
          "description": "Indicates whether the server should return an error if an account switch would have occurred, rather than switching automatically.  Defaults to false.",
          "title": "errorOnSwitch",
          "type": "boolean"
        },
        "requestId": {
          "description": "The SDK adds a requestId to all requests, this is used to match responses from the websocket",
          "title": "requestId",
          "type": "string"
        },
        "segments": {
          "description": "An optional segment configuration for this request.\r\nIf this request creates a new player on the gamesparks platform, the segments of the new player will match the values provided",
          "title": "segments",
          "type": "object"
        },
        "sessionTicket": {
          "description": "The hex encoded UTF-8 string representation of the ticket acquired calling the Steam SDKs GetAuthSessionTicket.",
          "title": "sessionTicket",
          "type": "string"
        },
        "switchIfPossible": {
          "description": "Indicates that the server should switch to the supplied profile if it isalready associated to a player. Defaults to false.",
          "title": "switchIfPossible",
          "type": "boolean"
        },
        "syncDisplayName": {
          "description": "Indicates that the associated players displayName should be kept in syn with this profile when it's updated by the external provider.",
          "title": "syncDisplayName",
          "type": "boolean"
        }
      }
    },
    "Team": {
      "properties": {
        "owner": {
          "$ref": "#/definitions/Player",
          "description": "A summary of the owner",
          "title": "owner"
        },
        "teamId": {
          "description": "The Id of the team",
          "title": "teamId",
          "type": "string"
        },
        "teamName": {
          "description": "The team name",
          "title": "teamName",
          "type": "string"
        },
        "teamType": {
          "description": "The team type",
          "title": "teamType",
          "type": "string"
        }
      }
    },
    "TwitchConnectRequest": {
      "properties": {
        "@class": {
          "default": ".TwitchConnectRequest",
          "description": "The request type",
          "title": "@class",
          "type": "string"
        },
        "accessToken": {
          "description": "The access token is used by the client to make authenticated requests on behalf of the end user.",
          "title": "accessToken",
          "type": "string"
        },
        "doNotCreateNewPlayer": {
          "description": "Indicates whether the server should return an error if a new player would have been registered, rather than creating the player.  Defaults to false.",
          "title": "doNotCreateNewPlayer",
          "type": "boolean"
        },
        "doNotLinkToCurrentPlayer": {
          "description": "Indicates that the server should not try to link the external profile with the current player.  If false, links the external profile to the currently signed in player.  If true, creates a new player and links the external profile to them.  Defaults to false.",
          "title": "doNotLinkToCurrentPlayer",
          "type": "boolean"
        },
        "errorOnSwitch": {
          "description": "Indicates whether the server should return an error if an account switch would have occurred, rather than switching automatically.  Defaults to false.",
          "title": "errorOnSwitch",
          "type": "boolean"
        },
        "requestId": {
          "description": "The SDK adds a requestId to all requests, this is used to match responses from the websocket",
          "title": "requestId",
          "type": "string"
        },
        "segments": {
          "description": "An optional segment configuration for this request.\r\nIf this request creates a new player on the gamesparks platform, the segments of the new player will match the values provided",
          "title": "segments",
          "type": "object"
        },
        "switchIfPossible": {
          "description": "Indicates that the server should switch to the supplied profile if it isalready associated to a player. Defaults to false.",
          "title": "switchIfPossible",
          "type": "boolean"
        },
        "syncDisplayName": {
          "description": "Indicates that the associated players displayName should be kept in syn with this profile when it's updated by the external provider.",
          "title": "syncDisplayName",
          "type": "boolean"
        }
      }
    },
    "TwitterConnectRequest": {
      "properties": {
        "@class": {
          "default": ".TwitterConnectRequest",
          "description": "The request type",
          "title": "@class",
          "type": "string"
        },
        "accessSecret": {
          "description": "The accessSecret is obtained at the same time as the accessToken, and is required to sign requests to Twitter's services that require the accessToken.",
          "title": "accessSecret",
          "type": "string"
        },
        "accessToken": {
          "description": "The accessToken represents a player's permission to share access to their account with your application.\r\nTo obtain an accessToken for the player see https://dev.twitter.com/docs/auth/obtaining-access-tokens.\r\nCurrently, Twitter accessTokens do not expire but they can be revoked by the player.",
          "title": "accessToken",
          "type": "string"
        },
        "doNotCreateNewPlayer": {
          "description": "Indicates whether the server should return an error if a new player would have been registered, rather than creating the player.  Defaults to false.",
          "title": "doNotCreateNewPlayer",
          "type": "boolean"
        },
        "doNotLinkToCurrentPlayer": {
          "description": "Indicates that the server should not try to link the external profile with the current player.  If false, links the external profile to the currently signed in player.  If true, creates a new player and links the external profile to them.  Defaults to false.",
          "title": "doNotLinkToCurrentPlayer",
          "type": "boolean"
        },
        "errorOnSwitch": {
          "description": "Indicates whether the server should return an error if an account switch would have occurred, rather than switching automatically.  Defaults to false.",
          "title": "errorOnSwitch",
          "type": "boolean"
        },
        "requestId": {
          "description": "The SDK adds a requestId to all requests, this is used to match responses from the websocket",
          "title": "requestId",
          "type": "string"
        },
        "segments": {
          "description": "An optional segment configuration for this request.\r\nIf this request creates a new player on the gamesparks platform, the segments of the new player will match the values provided",
          "title": "segments",
          "type": "object"
        },
        "switchIfPossible": {
          "description": "Indicates that the server should switch to the supplied profile if it isalready associated to a player. Defaults to false.",
          "title": "switchIfPossible",
          "type": "boolean"
        },
        "syncDisplayName": {
          "description": "Indicates that the associated players displayName should be kept in syn with this profile when it's updated by the external provider.",
          "title": "syncDisplayName",
          "type": "boolean"
        }
      }
    },
    "UpdateMessageRequest": {
      "properties": {
        "@class": {
          "default": ".UpdateMessageRequest",
          "description": "The request type",
          "title": "@class",
          "type": "string"
        },
        "messageId": {
          "description": "The messageId of the message to update",
          "title": "messageId",
          "type": "string"
        },
        "playerId": {
          "description": "The player to run this request as",
          "title": "playerId",
          "type": "string"
        },
        "requestId": {
          "description": "The SDK adds a requestId to all requests, this is used to match responses from the websocket",
          "title": "requestId",
          "type": "string"
        },
        "status": {
          "description": "The status to set on the message",
          "title": "status",
          "type": "string"
        }
      }
    },
    "UpdateMessageResponse": {
      "properties": {
        "requestId": {
          "description": "The ID of the corresponding Request",
          "title": "requestId",
          "type": "string"
        },
        "scriptData": {
          "$ref": "#/definitions/ScriptData",
          "description": "A JSON Map of any data added either to the Request or the Response by your Cloud Code",
          "title": "scriptData"
        }
      }
    },
    "ViberConnectRequest": {
      "properties": {
        "@class": {
          "default": ".ViberConnectRequest",
          "description": "The request type",
          "title": "@class",
          "type": "string"
        },
        "accessToken": {
          "description": "The accessToken represents a player's permission to share access to their account with your application.",
          "title": "accessToken",
          "type": "string"
        },
        "doNotCreateNewPlayer": {
          "description": "Indicates whether the server should return an error if a new player would have been registered, rather than creating the player.  Defaults to false.",
          "title": "doNotCreateNewPlayer",
          "type": "boolean"
        },
        "doNotLinkToCurrentPlayer": {
          "description": "Indicates that the server should not try to link the external profile with the current player.  If false, links the external profile to the currently signed in player.  If true, creates a new player and links the external profile to them.  Defaults to false.",
          "title": "doNotLinkToCurrentPlayer",
          "type": "boolean"
        },
        "doNotRegisterForPush": {
          "description": "Does not automatocally register this user for push notifications. Defaults to false.",
          "title": "doNotRegisterForPush",
          "type": "boolean"
        },
        "errorOnSwitch": {
          "description": "Indicates whether the server should return an error if an account switch would have occurred, rather than switching automatically.  Defaults to false.",
          "title": "errorOnSwitch",
          "type": "boolean"
        },
        "requestId": {
          "description": "The SDK adds a requestId to all requests, this is used to match responses from the websocket",
          "title": "requestId",
          "type": "string"
        },
        "segments": {
          "description": "An optional segment configuration for this request.\r\nIf this request creates a new player on the gamesparks platform, the segments of the new player will match the values provided",
          "title": "segments",
          "type": "object"
        },
        "switchIfPossible": {
          "description": "Indicates that the server should switch to the supplied profile if it isalready associated to a player. Defaults to false.",
          "title": "switchIfPossible",
          "type": "boolean"
        },
        "syncDisplayName": {
          "description": "Indicates that the associated players displayName should be kept in syn with this profile when it's updated by the external provider.",
          "title": "syncDisplayName",
          "type": "boolean"
        }
      }
    },
    "VirtualGood": {
      "properties": {
        "WP8StoreProductId": {
          "description": "The Windows Phone 8 productId of the item.",
          "title": "WP8StoreProductId",
          "type": "string"
        },
        "amazonStoreProductId": {
          "description": "The Amazon Store productId of the item.",
          "title": "amazonStoreProductId",
          "type": "string"
        },
        "baseCurrency1Cost": {
          "description": "The Base Currency1 cost of the Virtual Good, before segmentation",
          "format": "int64",
          "title": "baseCurrency1Cost",
          "type": "integer"
        },
        "baseCurrency2Cost": {
          "description": "The Base Currency2 cost of the Virtual Good, before segmentation",
          "format": "int64",
          "title": "baseCurrency2Cost",
          "type": "integer"
        },
        "baseCurrency3Cost": {
          "description": "The Base Currency3 cost of the Virtual Good, before segmentation",
          "format": "int64",
          "title": "baseCurrency3Cost",
          "type": "integer"
        },
        "baseCurrency4Cost": {
          "description": "The Base Currency4 cost of the Virtual Good, before segmentation",
          "format": "int64",
          "title": "baseCurrency4Cost",
          "type": "integer"
        },
        "baseCurrency5Cost": {
          "description": "The Base Currency5 cost of the Virtual Good, before segmentation",
          "format": "int64",
          "title": "baseCurrency5Cost",
          "type": "integer"
        },
        "baseCurrency6Cost": {
          "description": "The Base Currency6 cost of the Virtual Good, before segmentation",
          "format": "int64",
          "title": "baseCurrency6Cost",
          "type": "integer"
        },
        "baseCurrencyCosts": {
          "description": "The Base currency costs of the Virtual Good, before experiments",
          "title": "baseCurrencyCosts",
          "type": "object"
        },
        "bundledGoods": {
          "description": "Returns the bundle goods of the virtual good",
          "items": {
            "$ref": "#/definitions/BundledGood"
          },
          "title": "bundledGoods",
          "type": "array"
        },
        "currency1Cost": {
          "description": "The Currency1 cost of the Virtual Good",
          "format": "int64",
          "title": "currency1Cost",
          "type": "integer"
        },
        "currency2Cost": {
          "description": "The Currency2 cost of the Virtual Good",
          "format": "int64",
          "title": "currency2Cost",
          "type": "integer"
        },
        "currency3Cost": {
          "description": "The Currency3 cost of the Virtual Good",
          "format": "int64",
          "title": "currency3Cost",
          "type": "integer"
        },
        "currency4Cost": {
          "description": "The Currency4 cost of the Virtual Good",
          "format": "int64",
          "title": "currency4Cost",
          "type": "integer"
        },
        "currency5Cost": {
          "description": "The Currency5 cost of the Virtual Good",
          "format": "int64",
          "title": "currency5Cost",
          "type": "integer"
        },
        "currency6Cost": {
          "description": "The Currency6 cost of the Virtual Good",
          "format": "int64",
          "title": "currency6Cost",
          "type": "integer"
        },
        "currencyCosts": {
          "description": "The currency costs of the Virtual Good",
          "title": "currencyCosts",
          "type": "object"
        },
        "description": {
          "description": "The description of the Virtual Good",
          "title": "description",
          "type": "string"
        },
        "disabled": {
          "description": "Whether the item is disabled.",
          "title": "disabled",
          "type": "boolean"
        },
        "googlePlayProductId": {
          "description": "The google play productId of the item.",
          "title": "googlePlayProductId",
          "type": "string"
        },
        "iosAppStoreProductId": {
          "description": "The iOS AppStore productId of the item.",
          "title": "iosAppStoreProductId",
          "type": "string"
        },
        "maxQuantity": {
          "description": "The maximum number of the Virtual Good that can be owned at one time",
          "format": "int64",
          "title": "maxQuantity",
          "type": "integer"
        },
        "name": {
          "description": "The name of the Virtual Good",
          "title": "name",
          "type": "string"
        },
        "propertySet": {
          "description": "The custom property set configured on the item.",
          "title": "propertySet",
          "type": "object"
        },
        "psnStoreProductId": {
          "description": "The PSN Store productId of the item.",
          "title": "psnStoreProductId",
          "type": "string"
        },
        "segmentedCurrency1Cost": {
          "description": "The Segmented Currency1 cost of the Virtual Good, before experiments",
          "format": "int64",
          "title": "segmentedCurrency1Cost",
          "type": "integer"
        },
        "segmentedCurrency2Cost": {
          "description": "The Segmented Currency2 cost of the Virtual Good, before experiments",
          "format": "int64",
          "title": "segmentedCurrency2Cost",
          "type": "integer"
        },
        "segmentedCurrency3Cost": {
          "description": "The Segmented Currency3 cost of the Virtual Good, before experiments",
          "format": "int64",
          "title": "segmentedCurrency3Cost",
          "type": "integer"
        },
        "segmentedCurrency4Cost": {
          "description": "The Segmented Currency4 cost of the Virtual Good, before experiments",
          "format": "int64",
          "title": "segmentedCurrency4Cost",
          "type": "integer"
        },
        "segmentedCurrency5Cost": {
          "description": "The Segmented Currency5 cost of the Virtual Good, before experiments",
          "format": "int64",
          "title": "segmentedCurrency5Cost",
          "type": "integer"
        },
        "segmentedCurrency6Cost": {
          "description": "The Segmented Currency6 cost of the Virtual Good, before experiments",
          "format": "int64",
          "title": "segmentedCurrency6Cost",
          "type": "integer"
        },
        "segmentedCurrencyCosts": {
          "description": "The segmented currency costs of the Virtual Good, before experiments",
          "title": "segmentedCurrencyCosts",
          "type": "object"
        },
        "shortCode": {
          "description": "The short code of the Virtual Good",
          "title": "shortCode",
          "type": "string"
        },
        "steamStoreProductId": {
          "description": "The Steam Store productId of the item.",
          "title": "steamStoreProductId",
          "type": "string"
        },
        "tags": {
          "description": "The tags of the Virtual Good",
          "title": "tags",
          "type": "string"
        },
        "type": {
          "description": "The type of the virtual good, \"VGOOD\" or \"CURRENCY\"",
          "title": "type",
          "type": "string"
        },
        "w8StoreProductId": {
          "description": "The Windows 8 productId of the item.",
          "title": "w8StoreProductId",
          "type": "string"
        }
      }
    },
    "WeChatConnectRequest": {
      "properties": {
        "@class": {
          "default": ".WeChatConnectRequest",
          "description": "The request type",
          "title": "@class",
          "type": "string"
        },
        "accessToken": {
          "description": "The access token sould be obtained from WeChat\r\nIt is used by the client to make authenticated requests on behalf of the end user.",
          "title": "accessToken",
          "type": "string"
        },
        "doNotCreateNewPlayer": {
          "description": "Indicates whether the server should return an error if a new player would have been registered, rather than creating the player.  Defaults to false.",
          "title": "doNotCreateNewPlayer",
          "type": "boolean"
        },
        "doNotLinkToCurrentPlayer": {
          "description": "Indicates that the server should not try to link the external profile with the current player.  If false, links the external profile to the currently signed in player.  If true, creates a new player and links the external profile to them.  Defaults to false.",
          "title": "doNotLinkToCurrentPlayer",
          "type": "boolean"
        },
        "errorOnSwitch": {
          "description": "Indicates whether the server should return an error if an account switch would have occurred, rather than switching automatically.  Defaults to false.",
          "title": "errorOnSwitch",
          "type": "boolean"
        },
        "openId": {
          "description": "The open ID corresponding to the WeChat user",
          "title": "openId",
          "type": "string"
        },
        "requestId": {
          "description": "The SDK adds a requestId to all requests, this is used to match responses from the websocket",
          "title": "requestId",
          "type": "string"
        },
        "segments": {
          "description": "An optional segment configuration for this request.\r\nIf this request creates a new player on the gamesparks platform, the segments of the new player will match the values provided",
          "title": "segments",
          "type": "object"
        },
        "switchIfPossible": {
          "description": "Indicates that the server should switch to the supplied profile if it isalready associated to a player. Defaults to false.",
          "title": "switchIfPossible",
          "type": "boolean"
        },
        "syncDisplayName": {
          "description": "Indicates that the associated players displayName should be kept in syn with this profile when it's updated by the external provider.",
          "title": "syncDisplayName",
          "type": "boolean"
        }
      }
    },
    "WindowsBuyGoodsRequest": {
      "properties": {
        "@class": {
          "default": ".WindowsBuyGoodsRequest",
          "description": "The request type",
          "title": "@class",
          "type": "string"
        },
        "currencyCode": {
          "description": "The ISO 4217 currency code representing the real-world currency used for this transaction.",
          "title": "currencyCode",
          "type": "string"
        },
        "platform": {
          "description": "Allows you to specify the platform",
          "title": "platform",
          "type": "string"
        },
        "playerId": {
          "description": "The player to run this request as",
          "title": "playerId",
          "type": "string"
        },
        "receipt": {
          "description": "The xml reciept returned from the windows phone 8 store",
          "title": "receipt",
          "type": "string"
        },
        "requestId": {
          "description": "The SDK adds a requestId to all requests, this is used to match responses from the websocket",
          "title": "requestId",
          "type": "string"
        },
        "subUnitPrice": {
          "description": "The price of this purchase",
          "format": "double",
          "title": "subUnitPrice",
          "type": "number"
        },
        "uniqueTransactionByPlayer": {
          "description": "If set to true, the transactionId from this receipt will not be globally valdidated, this will mean replays between players are possible.\r\nIt will only validate the transactionId has not been used by this player before.",
          "title": "uniqueTransactionByPlayer",
          "type": "boolean"
        }
      }
    },
    "WithdrawChallengeRequest": {
      "properties": {
        "@class": {
          "default": ".WithdrawChallengeRequest",
          "description": "The request type",
          "title": "@class",
          "type": "string"
        },
        "challengeInstanceId": {
          "description": "The ID of the challenge",
          "title": "challengeInstanceId",
          "type": "string"
        },
        "message": {
          "description": "An optional message to send with the challenge",
          "title": "message",
          "type": "string"
        },
        "playerId": {
          "description": "The player to run this request as",
          "title": "playerId",
          "type": "string"
        },
        "requestId": {
          "description": "The SDK adds a requestId to all requests, this is used to match responses from the websocket",
          "title": "requestId",
          "type": "string"
        }
      }
    },
    "WithdrawChallengeResponse": {
      "properties": {
        "challengeInstanceId": {
          "description": "A challenge instance id",
          "title": "challengeInstanceId",
          "type": "string"
        },
        "requestId": {
          "description": "The ID of the corresponding Request",
          "title": "requestId",
          "type": "string"
        },
        "scriptData": {
          "$ref": "#/definitions/ScriptData",
          "description": "A JSON Map of any data added either to the Request or the Response by your Cloud Code",
          "title": "scriptData"
        }
      }
    },
    "XBOXLiveConnectRequest": {
      "properties": {
        "@class": {
          "default": ".XBOXLiveConnectRequest",
          "description": "The request type",
          "title": "@class",
          "type": "string"
        },
        "displayName": {
          "description": "The displayName to set for the player in GameSparks",
          "title": "displayName",
          "type": "string"
        },
        "doNotCreateNewPlayer": {
          "description": "Indicates whether the server should return an error if a new player would have been registered, rather than creating the player.  Defaults to false.",
          "title": "doNotCreateNewPlayer",
          "type": "boolean"
        },
        "doNotLinkToCurrentPlayer": {
          "description": "Indicates that the server should not try to link the external profile with the current player.  If false, links the external profile to the currently signed in player.  If true, creates a new player and links the external profile to them.  Defaults to false.",
          "title": "doNotLinkToCurrentPlayer",
          "type": "boolean"
        },
        "errorOnSwitch": {
          "description": "Indicates whether the server should return an error if an account switch would have occurred, rather than switching automatically.  Defaults to false.",
          "title": "errorOnSwitch",
          "type": "boolean"
        },
        "requestId": {
          "description": "The SDK adds a requestId to all requests, this is used to match responses from the websocket",
          "title": "requestId",
          "type": "string"
        },
        "segments": {
          "description": "An optional segment configuration for this request.\r\nIf this request creates a new player on the gamesparks platform, the segments of the new player will match the values provided",
          "title": "segments",
          "type": "object"
        },
        "stsTokenString": {
          "description": "The access token is used by the client to make authenticated requests on behalf of the end user.\r\nIt has a longer lifetime than the authorization code, typically on the order of minutes or hours.\r\nWhen the access token expires, attempts to use it will fail, and a new access token must be obtained via a refresh token.",
          "title": "stsTokenString",
          "type": "string"
        },
        "switchIfPossible": {
          "description": "Indicates that the server should switch to the supplied profile if it isalready associated to a player. Defaults to false.",
          "title": "switchIfPossible",
          "type": "boolean"
        },
        "syncDisplayName": {
          "description": "Indicates that the associated players displayName should be kept in syn with this profile when it's updated by the external provider.",
          "title": "syncDisplayName",
          "type": "boolean"
        }
      }
    },
    "XboxOneConnectRequest": {
      "properties": {
        "@class": {
          "default": ".XboxOneConnectRequest",
          "description": "The request type",
          "title": "@class",
          "type": "string"
        },
        "doNotCreateNewPlayer": {
          "description": "Indicates whether the server should return an error if a new player would have been registered, rather than creating the player.  Defaults to false.",
          "title": "doNotCreateNewPlayer",
          "type": "boolean"
        },
        "doNotLinkToCurrentPlayer": {
          "description": "Indicates that the server should not try to link the external profile with the current player.  If false, links the external profile to the currently signed in player.  If true, creates a new player and links the external profile to them.  Defaults to false.",
          "title": "doNotLinkToCurrentPlayer",
          "type": "boolean"
        },
        "errorOnSwitch": {
          "description": "Indicates whether the server should return an error if an account switch would have occurred, rather than switching automatically.  Defaults to false.",
          "title": "errorOnSwitch",
          "type": "boolean"
        },
        "requestId": {
          "description": "The SDK adds a requestId to all requests, this is used to match responses from the websocket",
          "title": "requestId",
          "type": "string"
        },
        "sandbox": {
          "description": "The Xbox Live sandbox to use. If not specified, the sandbox from the decoded token will be used.",
          "title": "sandbox",
          "type": "string"
        },
        "segments": {
          "description": "An optional segment configuration for this request.\r\nIf this request creates a new player on the gamesparks platform, the segments of the new player will match the values provided",
          "title": "segments",
          "type": "object"
        },
        "switchIfPossible": {
          "description": "Indicates that the server should switch to the supplied profile if it isalready associated to a player. Defaults to false.",
          "title": "switchIfPossible",
          "type": "boolean"
        },
        "syncDisplayName": {
          "description": "Indicates that the associated players displayName should be kept in syn with this profile when it's updated by the external provider.",
          "title": "syncDisplayName",
          "type": "boolean"
        },
        "token": {
          "description": "The Xbox One authentication token",
          "title": "token",
          "type": "string"
        }
      }
    }
  }
}
