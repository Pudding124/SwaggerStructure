{
  "swagger": "2.0",
  "schemes": [
    "https",
    "http"
  ],
  "host": "lambda.amazonaws.com",
  "basePath": "/",
  "x-hasEquivalentPaths": true,
  "info": {
    "contact": {
      "email": "mike.ralphson@gmail.com",
      "name": "Mike Ralphson",
      "url": "https://github.com/mermade/aws2openapi",
      "x-twitter": "PermittedSoc"
    },
    "description": "<fullname>AWS Lambda</fullname> <p> <b>Overview</b> </p> <p>This is the <i>AWS Lambda API Reference</i>. The AWS Lambda Developer Guide provides additional information. For the service overview, see <a href=\"http://docs.aws.amazon.com/lambda/latest/dg/welcome.html\">What is AWS Lambda</a>, and for information about how the service works, see <a href=\"http://docs.aws.amazon.com/lambda/latest/dg/lambda-introduction.html\">AWS Lambda: How it Works</a> in the <b>AWS Lambda Developer Guide</b>.</p>",
    "license": {
      "name": "Apache 2.0 License",
      "url": "http://www.apache.org/licenses/"
    },
    "termsOfService": "https://aws.amazon.com/service-terms/",
    "title": "AWS Lambda",
    "version": "2015-03-31",
    "x-apiClientRegistration": {
      "url": "https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct"
    },
    "x-apisguru-categories": [
      "cloud"
    ],
    "x-logo": {
      "backgroundColor": "#FFFFFF",
      "url": "https://api.apis.guru/v2/cache/logo/https_twitter.com_awscloud_profile_image.jpeg"
    },
    "x-origin": [
      {
        "contentType": "application/json",
        "converter": {
          "url": "https://github.com/mermade/aws2openapi",
          "version": "1.0.0"
        },
        "url": "https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/lambda-2015-03-31.normal.json",
        "x-apisguru-direct": true
      }
    ],
    "x-preferred": true,
    "x-providerName": "amazonaws.com",
    "x-release": "v4",
    "x-serviceName": "lambda"
  },
  "externalDocs": {
    "description": "Amazon Web Services documentation",
    "url": "https://aws.amazon.com/lambda/"
  },
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "securityDefinitions": {
    "hmac": {
      "description": "Amazon Signature authorization v4",
      "in": "header",
      "name": "Authorization",
      "type": "apiKey",
      "x-amazon-apigateway-authtype": "awsSigv4"
    }
  },
  "security": [
    {
      "hmac": []
    }
  ],
  "parameters": {
    "Action": {
      "in": "query",
      "name": "Action",
      "required": true,
      "type": "string"
    },
    "Version": {
      "in": "query",
      "name": "Version",
      "required": true,
      "type": "string"
    },
    "X-Amz-Algorithm": {
      "in": "header",
      "name": "X-Amz-Algorithm",
      "required": false,
      "type": "string"
    },
    "X-Amz-Content-Sha256": {
      "in": "header",
      "name": "X-Amz-Content-Sha256",
      "required": false,
      "type": "string"
    },
    "X-Amz-Credential": {
      "in": "header",
      "name": "X-Amz-Credential",
      "required": false,
      "type": "string"
    },
    "X-Amz-Date": {
      "in": "header",
      "name": "X-Amz-Date",
      "required": false,
      "type": "string"
    },
    "X-Amz-Security-Token": {
      "in": "header",
      "name": "X-Amz-Security-Token",
      "required": false,
      "type": "string"
    },
    "X-Amz-Signature": {
      "in": "header",
      "name": "X-Amz-Signature",
      "required": false,
      "type": "string"
    },
    "X-Amz-SignedHeaders": {
      "in": "header",
      "name": "X-Amz-SignedHeaders",
      "required": false,
      "type": "string"
    }
  },
  "paths": {
    "/2014-11-13/functions/{FunctionName}/invoke-async/": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "<important> <p>For asynchronous function invocation, use <a>Invoke</a>.</p> </important> <p>Submits an invocation request to AWS Lambda. Upon receiving the request, Lambda executes the specified function asynchronously. To see the logs generated by the Lambda function execution, see the CloudWatch Logs console.</p> <p>This operation requires permission for the <code>lambda:InvokeFunction</code> action.</p>",
        "operationId": "InvokeAsync",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InvokeAsyncRequest"
            }
          },
          {
            "in": "path",
            "name": "FunctionName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/InvokeAsyncResponse"
            }
          },
          "480": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "InvalidRequestContentException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestContentException"
            }
          },
          "483": {
            "description": "InvalidRuntimeException",
            "schema": {
              "$ref": "#/definitions/InvalidRuntimeException"
            }
          }
        }
      }
    },
    "/2015-03-31/event-source-mappings/": {
      "get": {
        "description": "Lists event source mappings. Specify an <code>EventSourceArn</code> to only show event source mappings for a single event source.",
        "operationId": "ListEventSourceMappings",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListEventSourceMappingsRequest"
            }
          },
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxItems",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "Marker",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListEventSourceMappingsResponse"
            }
          },
          "480": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "483": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "<p>Creates a mapping between an event source and an AWS Lambda function. Lambda reads items from the event source and triggers the function.</p> <p>For details about each event source type, see the following topics.</p> <ul> <li> <p> <a href=\"http://docs.aws.amazon.com/lambda/latest/dg/with-kinesis.html\">Using AWS Lambda with Amazon Kinesis</a> </p> </li> <li> <p> <a href=\"http://docs.aws.amazon.com/lambda/latest/dg/with-sqs.html\">Using AWS Lambda with Amazon SQS</a> </p> </li> <li> <p> <a href=\"http://docs.aws.amazon.com/lambda/latest/dg/with-ddb.html\">Using AWS Lambda with Amazon DynamoDB</a> </p> </li> </ul>",
        "operationId": "CreateEventSourceMapping",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateEventSourceMappingRequest"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/EventSourceMappingConfiguration"
            }
          },
          "480": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            }
          },
          "481": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "482": {
            "description": "ResourceConflictException",
            "schema": {
              "$ref": "#/definitions/ResourceConflictException"
            }
          },
          "483": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "484": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          }
        }
      }
    },
    "/2015-03-31/event-source-mappings/{UUID}": {
      "delete": {
        "description": "Deletes an event source mapping.",
        "operationId": "DeleteEventSourceMapping",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteEventSourceMappingRequest"
            }
          },
          {
            "in": "path",
            "name": "UUID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/EventSourceMappingConfiguration"
            }
          },
          "480": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "483": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "484": {
            "description": "ResourceInUseException",
            "schema": {
              "$ref": "#/definitions/ResourceInUseException"
            }
          }
        }
      },
      "get": {
        "description": "Returns details about an event source mapping.",
        "operationId": "GetEventSourceMapping",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetEventSourceMappingRequest"
            }
          },
          {
            "in": "path",
            "name": "UUID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/EventSourceMappingConfiguration"
            }
          },
          "480": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "483": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "put": {
        "description": "Updates an event source mapping. You can change the function that AWS Lambda invokes, or pause invocation and resume later from the same location.",
        "operationId": "UpdateEventSourceMapping",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateEventSourceMappingRequest"
            }
          },
          {
            "in": "path",
            "name": "UUID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/EventSourceMappingConfiguration"
            }
          },
          "480": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "483": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "484": {
            "description": "ResourceConflictException",
            "schema": {
              "$ref": "#/definitions/ResourceConflictException"
            }
          },
          "485": {
            "description": "ResourceInUseException",
            "schema": {
              "$ref": "#/definitions/ResourceInUseException"
            }
          }
        }
      }
    },
    "/2015-03-31/functions": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "<p>Creates a new Lambda function. The function configuration is created from the request parameters, and the code for the function is provided by a .zip file. The function name is case-sensitive.</p> <p>This operation requires permission for the <code>lambda:CreateFunction</code> action.</p>",
        "operationId": "CreateFunction",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateFunctionRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/FunctionConfiguration"
            }
          },
          "480": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            }
          },
          "481": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "482": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "483": {
            "description": "ResourceConflictException",
            "schema": {
              "$ref": "#/definitions/ResourceConflictException"
            }
          },
          "484": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "485": {
            "description": "CodeStorageExceededException",
            "schema": {
              "$ref": "#/definitions/CodeStorageExceededException"
            }
          }
        }
      }
    },
    "/2015-03-31/functions/": {
      "get": {
        "description": "<p>Returns a list of your Lambda functions. For each function, the response includes the function configuration information. You must use <a>GetFunction</a> to retrieve the code for your function.</p> <p>This operation requires permission for the <code>lambda:ListFunctions</code> action.</p> <p>If you are using the versioning feature, you can list all of your functions or only <code>$LATEST</code> versions. For information about the versioning feature, see <a href=\"http://docs.aws.amazon.com/lambda/latest/dg/versioning-aliases.html\">AWS Lambda Function Versioning and Aliases</a>. </p>",
        "operationId": "ListFunctions",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListFunctionsRequest"
            }
          },
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxItems",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "Marker",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListFunctionsResponse"
            }
          },
          "480": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            }
          },
          "481": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "482": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ]
    },
    "/2015-03-31/functions/{FunctionName}": {
      "delete": {
        "description": "<p>Deletes a Lambda function. To delete a specific function version, use the <code>Qualifier</code> parameter. Otherwise, all versions and aliases are deleted. Event source mappings are not deleted.</p> <p>This operation requires permission for the <code>lambda:DeleteFunction</code> action.</p>",
        "operationId": "DeleteFunction",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteFunctionRequest"
            }
          },
          {
            "in": "path",
            "name": "FunctionName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "480": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "483": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "484": {
            "description": "ResourceConflictException",
            "schema": {
              "$ref": "#/definitions/ResourceConflictException"
            }
          }
        }
      },
      "get": {
        "description": "<p>Returns the configuration information of the Lambda function and a presigned URL link to the .zip file you uploaded with <a>CreateFunction</a> so you can download the .zip file. Note that the URL is valid for up to 10 minutes. The configuration information is the same information you provided as parameters when uploading the function.</p> <p>Use the <code>Qualifier</code> parameter to retrieve a published version of the function. Otherwise, returns the unpublished version (<code>$LATEST</code>). For more information, see <a href=\"http://docs.aws.amazon.com/lambda/latest/dg/versioning-aliases.html\">AWS Lambda Function Versioning and Aliases</a>.</p> <p>This operation requires permission for the <code>lambda:GetFunction</code> action.</p>",
        "operationId": "GetFunction",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetFunctionRequest"
            }
          },
          {
            "in": "path",
            "name": "FunctionName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetFunctionResponse"
            }
          },
          "480": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "483": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ]
    },
    "/2015-03-31/functions/{FunctionName}/aliases": {
      "get": {
        "description": "<p>Returns list of aliases created for a Lambda function. For each alias, the response includes information such as the alias ARN, description, alias name, and the function version to which it points. For more information, see <a href=\"http://docs.aws.amazon.com/lambda/latest/dg/aliases-intro.html\">Introduction to AWS Lambda Aliases</a>.</p> <p>This requires permission for the lambda:ListAliases action.</p>",
        "operationId": "ListAliases",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListAliasesRequest"
            }
          },
          {
            "in": "path",
            "name": "FunctionName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListAliasesResponse"
            }
          },
          "480": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "483": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "<p>Creates an alias that points to the specified Lambda function version. For more information, see <a href=\"http://docs.aws.amazon.com/lambda/latest/dg/aliases-intro.html\">Introduction to AWS Lambda Aliases</a>.</p> <p>Alias names are unique for a given function. This requires permission for the lambda:CreateAlias action.</p>",
        "operationId": "CreateAlias",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateAliasRequest"
            }
          },
          {
            "in": "path",
            "name": "FunctionName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/AliasConfiguration"
            }
          },
          "480": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "ResourceConflictException",
            "schema": {
              "$ref": "#/definitions/ResourceConflictException"
            }
          },
          "483": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "484": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          }
        }
      }
    },
    "/2015-03-31/functions/{FunctionName}/aliases/{Name}": {
      "delete": {
        "description": "<p>Deletes the specified Lambda function alias. For more information, see <a href=\"http://docs.aws.amazon.com/lambda/latest/dg/aliases-intro.html\">Introduction to AWS Lambda Aliases</a>.</p> <p>This requires permission for the lambda:DeleteAlias action.</p>",
        "operationId": "DeleteAlias",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteAliasRequest"
            }
          },
          {
            "in": "path",
            "name": "FunctionName",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "480": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            }
          },
          "481": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "482": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          }
        }
      },
      "get": {
        "description": "<p>Returns the specified alias information such as the alias ARN, description, and function version it is pointing to. For more information, see <a href=\"http://docs.aws.amazon.com/lambda/latest/dg/aliases-intro.html\">Introduction to AWS Lambda Aliases</a>.</p> <p>This requires permission for the <code>lambda:GetAlias</code> action.</p>",
        "operationId": "GetAlias",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetAliasRequest"
            }
          },
          {
            "in": "path",
            "name": "FunctionName",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/AliasConfiguration"
            }
          },
          "480": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "483": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "put": {
        "description": "<p>Using this API you can update the function version to which the alias points and the alias description. For more information, see <a href=\"http://docs.aws.amazon.com/lambda/latest/dg/aliases-intro.html\">Introduction to AWS Lambda Aliases</a>.</p> <p>This requires permission for the lambda:UpdateAlias action.</p>",
        "operationId": "UpdateAlias",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateAliasRequest"
            }
          },
          {
            "in": "path",
            "name": "FunctionName",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/AliasConfiguration"
            }
          },
          "480": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "483": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "484": {
            "description": "PreconditionFailedException",
            "schema": {
              "$ref": "#/definitions/PreconditionFailedException"
            }
          }
        }
      }
    },
    "/2015-03-31/functions/{FunctionName}/code": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "put": {
        "description": "<p>Updates the code for the specified Lambda function. This operation must only be used on an existing Lambda function and cannot be used to update the function configuration.</p> <p>If you are using the versioning feature, note this API will always update the $LATEST version of your Lambda function. For information about the versioning feature, see <a href=\"http://docs.aws.amazon.com/lambda/latest/dg/versioning-aliases.html\">AWS Lambda Function Versioning and Aliases</a>. </p> <p>This operation requires permission for the <code>lambda:UpdateFunctionCode</code> action.</p>",
        "operationId": "UpdateFunctionCode",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateFunctionCodeRequest"
            }
          },
          {
            "in": "path",
            "name": "FunctionName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/FunctionConfiguration"
            }
          },
          "480": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "483": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "484": {
            "description": "CodeStorageExceededException",
            "schema": {
              "$ref": "#/definitions/CodeStorageExceededException"
            }
          },
          "485": {
            "description": "PreconditionFailedException",
            "schema": {
              "$ref": "#/definitions/PreconditionFailedException"
            }
          }
        }
      }
    },
    "/2015-03-31/functions/{FunctionName}/configuration": {
      "get": {
        "description": "<p>Returns the configuration information of the Lambda function. This the same information you provided as parameters when uploading the function by using <a>CreateFunction</a>.</p> <p>If you are using the versioning feature, you can retrieve this information for a specific function version by using the optional <code>Qualifier</code> parameter and specifying the function version or alias that points to it. If you don't provide it, the API returns information about the $LATEST version of the function. For more information about versioning, see <a href=\"http://docs.aws.amazon.com/lambda/latest/dg/versioning-aliases.html\">AWS Lambda Function Versioning and Aliases</a>.</p> <p>This operation requires permission for the <code>lambda:GetFunctionConfiguration</code> operation.</p>",
        "operationId": "GetFunctionConfiguration",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetFunctionConfigurationRequest"
            }
          },
          {
            "in": "path",
            "name": "FunctionName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/FunctionConfiguration"
            }
          },
          "480": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "483": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "put": {
        "description": "<p>Updates the configuration parameters for the specified Lambda function by using the values provided in the request. You provide only the parameters you want to change. This operation must only be used on an existing Lambda function and cannot be used to update the function's code.</p> <p>If you are using the versioning feature, note this API will always update the $LATEST version of your Lambda function. For information about the versioning feature, see <a href=\"http://docs.aws.amazon.com/lambda/latest/dg/versioning-aliases.html\">AWS Lambda Function Versioning and Aliases</a>. </p> <p>This operation requires permission for the <code>lambda:UpdateFunctionConfiguration</code> action.</p>",
        "operationId": "UpdateFunctionConfiguration",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateFunctionConfigurationRequest"
            }
          },
          {
            "in": "path",
            "name": "FunctionName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/FunctionConfiguration"
            }
          },
          "480": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "483": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "484": {
            "description": "ResourceConflictException",
            "schema": {
              "$ref": "#/definitions/ResourceConflictException"
            }
          },
          "485": {
            "description": "PreconditionFailedException",
            "schema": {
              "$ref": "#/definitions/PreconditionFailedException"
            }
          }
        }
      }
    },
    "/2015-03-31/functions/{FunctionName}/invocations": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "<p>Invokes a Lambda function. For an example, see <a href=\"http://docs.aws.amazon.com/lambda/latest/dg/with-dynamodb-create-function.html#with-dbb-invoke-manually\">Create the Lambda Function and Test It Manually</a>. </p> <p>Specify just a function name to invoke the latest version of the function. To invoke a published version, use the <code>Qualifier</code> parameter to specify a <a href=\"http://docs.aws.amazon.com/lambda/latest/dg/versioning-aliases.html\">version or alias</a>.</p> <p>If you use the <code>RequestResponse</code> (synchronous) invocation option, the function will be invoked only once. If you use the <code>Event</code> (asynchronous) invocation option, the function will be invoked at least once in response to an event and the function must be idempotent to handle this.</p> <p>For functions with a long timeout, your client may be disconnected during synchronous invocation while it waits for a response. Configure your HTTP client, SDK, firewall, proxy, or operating system to allow for long connections with timeout or keep-alive settings.</p> <p>This operation requires permission for the <code>lambda:InvokeFunction</code> action.</p> <p>The <code>TooManyRequestsException</code> noted below will return the following: <code>ConcurrentInvocationLimitExceeded</code> will be returned if you have no functions with reserved concurrency and have exceeded your account concurrent limit or if a function without reserved concurrency exceeds the account's unreserved concurrency limit. <code>ReservedFunctionConcurrentInvocationLimitExceeded</code> will be returned when a function with reserved concurrency exceeds its configured concurrency limit. </p>",
        "operationId": "Invoke",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InvocationRequest"
            }
          },
          {
            "in": "path",
            "name": "FunctionName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/InvocationResponse"
            }
          },
          "480": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "InvalidRequestContentException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestContentException"
            }
          },
          "483": {
            "description": "RequestTooLargeException",
            "schema": {
              "$ref": "#/definitions/RequestTooLargeException"
            }
          },
          "484": {
            "description": "UnsupportedMediaTypeException",
            "schema": {
              "$ref": "#/definitions/UnsupportedMediaTypeException"
            }
          },
          "485": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "486": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "487": {
            "description": "EC2UnexpectedException",
            "schema": {
              "$ref": "#/definitions/EC2UnexpectedException"
            }
          },
          "488": {
            "description": "SubnetIPAddressLimitReachedException",
            "schema": {
              "$ref": "#/definitions/SubnetIPAddressLimitReachedException"
            }
          },
          "489": {
            "description": "ENILimitReachedException",
            "schema": {
              "$ref": "#/definitions/ENILimitReachedException"
            }
          },
          "490": {
            "description": "EC2ThrottledException",
            "schema": {
              "$ref": "#/definitions/EC2ThrottledException"
            }
          },
          "491": {
            "description": "EC2AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/EC2AccessDeniedException"
            }
          },
          "492": {
            "description": "InvalidSubnetIDException",
            "schema": {
              "$ref": "#/definitions/InvalidSubnetIDException"
            }
          },
          "493": {
            "description": "InvalidSecurityGroupIDException",
            "schema": {
              "$ref": "#/definitions/InvalidSecurityGroupIDException"
            }
          },
          "494": {
            "description": "InvalidZipFileException",
            "schema": {
              "$ref": "#/definitions/InvalidZipFileException"
            }
          },
          "495": {
            "description": "KMSDisabledException",
            "schema": {
              "$ref": "#/definitions/KMSDisabledException"
            }
          },
          "496": {
            "description": "KMSInvalidStateException",
            "schema": {
              "$ref": "#/definitions/KMSInvalidStateException"
            }
          },
          "497": {
            "description": "KMSAccessDeniedException",
            "schema": {
              "$ref": "#/definitions/KMSAccessDeniedException"
            }
          },
          "498": {
            "description": "KMSNotFoundException",
            "schema": {
              "$ref": "#/definitions/KMSNotFoundException"
            }
          },
          "499": {
            "description": "InvalidRuntimeException",
            "schema": {
              "$ref": "#/definitions/InvalidRuntimeException"
            }
          }
        }
      }
    },
    "/2015-03-31/functions/{FunctionName}/policy": {
      "get": {
        "description": "<p>Returns the resource policy associated with the specified Lambda function.</p> <p>This action requires permission for the <code>lambda:GetPolicy action.</code> </p>",
        "operationId": "GetPolicy",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetPolicyRequest"
            }
          },
          {
            "in": "path",
            "name": "FunctionName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetPolicyResponse"
            }
          },
          "480": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "483": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "<p>Adds a permission to the resource policy associated with the specified AWS Lambda function. You use resource policies to grant permissions to event sources that use the <i>push</i> model. In a <i>push</i> model, event sources (such as Amazon S3 and custom applications) invoke your Lambda function. Each permission you add to the resource policy allows an event source permission to invoke the Lambda function. </p> <p>Permissions apply to the Amazon Resource Name (ARN) used to invoke the function, which can be unqualified (the unpublished version of the function), or include a version or alias. If a client uses a version or alias to invoke a function, use the <code>Qualifier</code> parameter to apply permissions to that ARN. For more information about versioning, see <a href=\"http://docs.aws.amazon.com/lambda/latest/dg/versioning-aliases.html\">AWS Lambda Function Versioning and Aliases</a>. </p> <p>This operation requires permission for the <code>lambda:AddPermission</code> action.</p>",
        "operationId": "AddPermission",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AddPermissionRequest"
            }
          },
          {
            "in": "path",
            "name": "FunctionName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/AddPermissionResponse"
            }
          },
          "480": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "ResourceConflictException",
            "schema": {
              "$ref": "#/definitions/ResourceConflictException"
            }
          },
          "483": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "484": {
            "description": "PolicyLengthExceededException",
            "schema": {
              "$ref": "#/definitions/PolicyLengthExceededException"
            }
          },
          "485": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "486": {
            "description": "PreconditionFailedException",
            "schema": {
              "$ref": "#/definitions/PreconditionFailedException"
            }
          }
        }
      }
    },
    "/2015-03-31/functions/{FunctionName}/policy/{StatementId}": {
      "delete": {
        "description": "<p>Removes permissions from a function. You can remove individual permissions from an resource policy associated with a Lambda function by providing a statement ID that you provided when you added the permission. When you remove permissions, disable the event source mapping or trigger configuration first to avoid errors.</p> <p>Permissions apply to the Amazon Resource Name (ARN) used to invoke the function, which can be unqualified (the unpublished version of the function), or include a version or alias. If a client uses a version or alias to invoke a function, use the <code>Qualifier</code> parameter to apply permissions to that ARN. For more information about versioning, see <a href=\"http://docs.aws.amazon.com/lambda/latest/dg/versioning-aliases.html\">AWS Lambda Function Versioning and Aliases</a>. </p> <p>You need permission for the <code>lambda:RemovePermission</code> action.</p>",
        "operationId": "RemovePermission",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RemovePermissionRequest"
            }
          },
          {
            "in": "path",
            "name": "FunctionName",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "StatementId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "480": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "483": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "484": {
            "description": "PreconditionFailedException",
            "schema": {
              "$ref": "#/definitions/PreconditionFailedException"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ]
    },
    "/2015-03-31/functions/{FunctionName}/versions": {
      "get": {
        "description": "Lists all versions of a function. For information about versioning, see <a href=\"http://docs.aws.amazon.com/lambda/latest/dg/versioning-aliases.html\">AWS Lambda Function Versioning and Aliases</a>. ",
        "operationId": "ListVersionsByFunction",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListVersionsByFunctionRequest"
            }
          },
          {
            "in": "path",
            "name": "FunctionName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListVersionsByFunctionResponse"
            }
          },
          "480": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "483": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Publishes a version of your function from the current snapshot of $LATEST. That is, AWS Lambda takes a snapshot of the function code and configuration information from $LATEST and publishes a new version. The code and configuration cannot be modified after publication. For information about the versioning feature, see <a href=\"http://docs.aws.amazon.com/lambda/latest/dg/versioning-aliases.html\">AWS Lambda Function Versioning and Aliases</a>. ",
        "operationId": "PublishVersion",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PublishVersionRequest"
            }
          },
          {
            "in": "path",
            "name": "FunctionName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/FunctionConfiguration"
            }
          },
          "480": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "483": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "484": {
            "description": "CodeStorageExceededException",
            "schema": {
              "$ref": "#/definitions/CodeStorageExceededException"
            }
          },
          "485": {
            "description": "PreconditionFailedException",
            "schema": {
              "$ref": "#/definitions/PreconditionFailedException"
            }
          }
        }
      }
    },
    "/2016-08-19/account-settings/": {
      "get": {
        "description": "Retrieves details about your account's <a href=\"http://docs.aws.amazon.com/lambda/latest/dg/limits.html\">limits</a> and usage in a region.",
        "operationId": "GetAccountSettings",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetAccountSettingsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetAccountSettingsResponse"
            }
          },
          "480": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "481": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ]
    },
    "/2017-03-31/tags/{ARN}": {
      "delete": {
        "description": "Removes tags from a Lambda function. Requires the function ARN (Amazon Resource Name). For more information, see <a href=\"http://docs.aws.amazon.com/lambda/latest/dg/tagging.html\">Tagging Lambda Functions</a> in the <b>AWS Lambda Developer Guide</b>. ",
        "operationId": "UntagResource",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UntagResourceRequest"
            }
          },
          {
            "in": "path",
            "name": "ARN",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "480": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "483": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          }
        }
      },
      "get": {
        "description": "Returns a list of tags assigned to a function when supplied the function ARN (Amazon Resource Name). For more information on Tagging, see <a href=\"http://docs.aws.amazon.com/lambda/latest/dg/tagging.html\">Tagging Lambda Functions</a> in the <b>AWS Lambda Developer Guide</b>.",
        "operationId": "ListTags",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListTagsRequest"
            }
          },
          {
            "in": "path",
            "name": "ARN",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListTagsResponse"
            }
          },
          "480": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "483": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Creates a list of tags (key-value pairs) on the Lambda function. Requires the Lambda function ARN (Amazon Resource Name). If a key is specified without a value, Lambda creates a tag with the specified key and a value of null. For more information, see <a href=\"http://docs.aws.amazon.com/lambda/latest/dg/tagging.html\">Tagging Lambda Functions</a> in the <b>AWS Lambda Developer Guide</b>. ",
        "operationId": "TagResource",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TagResourceRequest"
            }
          },
          {
            "in": "path",
            "name": "ARN",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "480": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "483": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          }
        }
      }
    },
    "/2017-10-31/functions/{FunctionName}/concurrency": {
      "delete": {
        "description": "Removes concurrent execution limits from this function. For more information, see <a href=\"http://docs.aws.amazon.com/lambda/latest/dg/concurrent-executions.html\">Managing Concurrency</a>.",
        "operationId": "DeleteFunctionConcurrency",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteFunctionConcurrencyRequest"
            }
          },
          {
            "in": "path",
            "name": "FunctionName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "480": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "483": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "put": {
        "description": "Sets a limit on the number of concurrent executions available to this function. It is a subset of your account's total concurrent execution limit per region. Note that Lambda automatically reserves a buffer of 100 concurrent executions for functions without any reserved concurrency limit. This means if your account limit is 1000, you have a total of 900 available to allocate to individual functions. For more information, see <a href=\"http://docs.aws.amazon.com/lambda/latest/dg/concurrent-executions.html\">Managing Concurrency</a>.",
        "operationId": "PutFunctionConcurrency",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PutFunctionConcurrencyRequest"
            }
          },
          {
            "in": "path",
            "name": "FunctionName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Concurrency"
            }
          },
          "480": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            }
          },
          "481": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "482": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "483": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          }
        }
      }
    },
    "/2018-10-31/layers": {
      "get": {
        "description": "Lists function layers and shows information about the latest version of each. Specify a <a href=\"http://docs.aws.amazon.com/lambda/latest/dg/lambda-runtimes.html\">runtime identifier</a> to list only layers that indicate that they're compatible with that runtime.",
        "operationId": "ListLayers",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListLayersRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListLayersResponse"
            }
          },
          "480": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            }
          },
          "481": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "482": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ]
    },
    "/2018-10-31/layers/{LayerName}/versions": {
      "get": {
        "description": "Lists the versions of a function layer. Versions that have been deleted aren't listed. Specify a <a href=\"http://docs.aws.amazon.com/lambda/latest/dg/lambda-runtimes.html\">runtime identifier</a> to list only versions that indicate that they're compatible with that runtime.",
        "operationId": "ListLayerVersions",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListLayerVersionsRequest"
            }
          },
          {
            "in": "path",
            "name": "LayerName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListLayerVersionsResponse"
            }
          },
          "480": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            }
          },
          "481": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "482": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "483": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "<p>Creates a function layer from a ZIP archive. Each time you call <code>PublishLayerVersion</code> with the same version name, a new version is created.</p> <p>Add layers to your function with <a>CreateFunction</a> or <a>UpdateFunctionConfiguration</a>.</p>",
        "operationId": "PublishLayerVersion",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PublishLayerVersionRequest"
            }
          },
          {
            "in": "path",
            "name": "LayerName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/PublishLayerVersionResponse"
            }
          },
          "480": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "483": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "484": {
            "description": "CodeStorageExceededException",
            "schema": {
              "$ref": "#/definitions/CodeStorageExceededException"
            }
          }
        }
      }
    },
    "/2018-10-31/layers/{LayerName}/versions/{VersionNumber}": {
      "delete": {
        "description": "Deletes a version of a function layer. Deleted versions can no longer be viewed or added to functions. However, a copy of the version remains in Lambda until no functions refer to it.",
        "operationId": "DeleteLayerVersion",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteLayerVersionRequest"
            }
          },
          {
            "in": "path",
            "name": "LayerName",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "VersionNumber",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "480": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            }
          },
          "481": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          }
        }
      },
      "get": {
        "description": "Returns information about a version of a function layer, with a link to download the layer archive that's valid for 10 minutes.",
        "operationId": "GetLayerVersion",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetLayerVersionRequest"
            }
          },
          {
            "in": "path",
            "name": "LayerName",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "VersionNumber",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetLayerVersionResponse"
            }
          },
          "480": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            }
          },
          "481": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "482": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "483": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ]
    },
    "/2018-10-31/layers/{LayerName}/versions/{VersionNumber}/policy": {
      "get": {
        "description": "Returns the permission policy for a layer version. For more information, see <a>AddLayerVersionPermission</a>.",
        "operationId": "GetLayerVersionPolicy",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetLayerVersionPolicyRequest"
            }
          },
          {
            "in": "path",
            "name": "LayerName",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "VersionNumber",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetLayerVersionPolicyResponse"
            }
          },
          "480": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "483": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "<p>Adds permissions to the resource-based policy of a version of a function layer. Use this action to grant layer usage permission to other accounts. You can grant permission to a single account, all AWS accounts, or all accounts in an organization.</p> <p>To revoke permission, call <a>RemoveLayerVersionPermission</a> with the statement ID that you specified when you added it.</p>",
        "operationId": "AddLayerVersionPermission",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AddLayerVersionPermissionRequest"
            }
          },
          {
            "in": "path",
            "name": "LayerName",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "VersionNumber",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/AddLayerVersionPermissionResponse"
            }
          },
          "480": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "ResourceConflictException",
            "schema": {
              "$ref": "#/definitions/ResourceConflictException"
            }
          },
          "483": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "484": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "485": {
            "description": "PolicyLengthExceededException",
            "schema": {
              "$ref": "#/definitions/PolicyLengthExceededException"
            }
          },
          "486": {
            "description": "PreconditionFailedException",
            "schema": {
              "$ref": "#/definitions/PreconditionFailedException"
            }
          }
        }
      }
    },
    "/2018-10-31/layers/{LayerName}/versions/{VersionNumber}/policy/{StatementId}": {
      "delete": {
        "description": "Removes a statement from the permissions policy for a layer version. For more information, see <a>AddLayerVersionPermission</a>.",
        "operationId": "RemoveLayerVersionPermission",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RemoveLayerVersionPermissionRequest"
            }
          },
          {
            "in": "path",
            "name": "LayerName",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "VersionNumber",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "StatementId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "480": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "483": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "484": {
            "description": "PreconditionFailedException",
            "schema": {
              "$ref": "#/definitions/PreconditionFailedException"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ]
    }
  },
  "definitions": {
    "AccountLimit": {
      "description": "Provides limits of code size and concurrency associated with the current account and region. For more information or to request a limit increase for concurrent executions, see <a href=\"http://docs.aws.amazon.com/lambda/latest/dg/limits.html\">Lambda Limits</a>. ",
      "properties": {
        "CodeSizeUnzipped": {
          "$ref": "#/definitions/Long",
          "description": "Size, in bytes, of code/dependencies that you can zip into a deployment package (uncompressed zip/jar size) for uploading. The default limit is 250 MB."
        },
        "CodeSizeZipped": {
          "$ref": "#/definitions/Long",
          "description": "Size, in bytes, of a single zipped code/dependencies package you can upload for your Lambda function(.zip/.jar file). Try using Amazon S3 for uploading larger files. Default limit is 50 MB."
        },
        "ConcurrentExecutions": {
          "$ref": "#/definitions/Integer",
          "description": "Number of simultaneous executions of your function per region. The default limit is 1000."
        },
        "TotalCodeSize": {
          "$ref": "#/definitions/Long",
          "description": "Maximum size, in bytes, of a code package you can upload per region. The default size is 75 GB. "
        },
        "UnreservedConcurrentExecutions": {
          "$ref": "#/definitions/UnreservedConcurrentExecutions",
          "description": "The number of concurrent executions available to functions that do not have concurrency limits set. For more information, see <a href=\"http://docs.aws.amazon.com/lambda/latest/dg/concurrent-executions.html\">Managing Concurrency</a>."
        }
      },
      "type": "object"
    },
    "AccountUsage": {
      "description": "Provides code size usage and function count associated with the current account and region.",
      "properties": {
        "FunctionCount": {
          "$ref": "#/definitions/Long",
          "description": "The number of your account's existing functions per region."
        },
        "TotalCodeSize": {
          "$ref": "#/definitions/Long",
          "description": "Total size, in bytes, of the account's deployment packages per region."
        }
      },
      "type": "object"
    },
    "Action": {
      "pattern": "(lambda:[*]|lambda:[a-zA-Z]+|[*])",
      "type": "string"
    },
    "AddLayerVersionPermissionRequest": {
      "properties": {
        "Action": {
          "$ref": "#/definitions/LayerPermissionAllowedAction",
          "description": "The API action that grants access to the layer. For example, <code>lambda:GetLayerVersion</code>."
        },
        "OrganizationId": {
          "$ref": "#/definitions/OrganizationId",
          "description": "With the principal set to <code>*</code>, grant permission to all accounts in the specified organization."
        },
        "Principal": {
          "$ref": "#/definitions/LayerPermissionAllowedPrincipal",
          "description": "An account ID, or <code>*</code> to grant permission to all AWS accounts."
        },
        "StatementId": {
          "$ref": "#/definitions/StatementId",
          "description": "An identifier that distinguishes the policy from others on the same layer version."
        }
      },
      "required": [
        "StatementId",
        "Action",
        "Principal"
      ],
      "type": "object"
    },
    "AddLayerVersionPermissionResponse": {
      "properties": {
        "RevisionId": {
          "$ref": "#/definitions/String",
          "description": "A unique identifier for the current revision of the policy."
        },
        "Statement": {
          "$ref": "#/definitions/String",
          "description": "The permission statement."
        }
      },
      "type": "object"
    },
    "AddPermissionRequest": {
      "example": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": "MyFunction",
        "Principal": "s3.amazonaws.com",
        "SourceAccount": "123456789012",
        "SourceArn": "arn:aws:s3:::examplebucket/*",
        "StatementId": "ID-1"
      },
      "properties": {
        "Action": {
          "$ref": "#/definitions/Action",
          "description": "The AWS Lambda action you want to allow in this statement. Each Lambda action is a string starting with <code>lambda:</code> followed by the API name . For example, <code>lambda:CreateFunction</code>. You can use wildcard (<code>lambda:*</code>) to grant permission for all AWS Lambda actions. "
        },
        "EventSourceToken": {
          "$ref": "#/definitions/EventSourceToken",
          "description": "A unique token that must be supplied by the principal invoking the function. This is currently only used for Alexa Smart Home functions."
        },
        "Principal": {
          "$ref": "#/definitions/Principal",
          "description": "The principal who is getting this permission. The principal can be an AWS service (e.g. <code>s3.amazonaws.com</code> or <code>sns.amazonaws.com</code>) for service triggers, or an account ID for cross-account access. If you specify a service as a principal, use the <code>SourceArn</code> parameter to limit who can invoke the function through that service."
        },
        "RevisionId": {
          "$ref": "#/definitions/String",
          "description": "An optional value you can use to ensure you are updating the latest update of the function version or alias. If the <code>RevisionID</code> you pass doesn't match the latest <code>RevisionId</code> of the function or alias, it will fail with an error message, advising you to retrieve the latest function version or alias <code>RevisionID</code> using either <a>GetFunction</a> or <a>GetAlias</a> "
        },
        "SourceAccount": {
          "$ref": "#/definitions/SourceOwner",
          "description": "This parameter is used for S3 and SES. The AWS account ID (without a hyphen) of the source owner. For example, if the <code>SourceArn</code> identifies a bucket, then this is the bucket owner's account ID. You can use this additional condition to ensure the bucket you specify is owned by a specific account (it is possible the bucket owner deleted the bucket and some other AWS account created the bucket). You can also use this condition to specify all sources (that is, you don't specify the <code>SourceArn</code>) owned by a specific account. "
        },
        "SourceArn": {
          "$ref": "#/definitions/Arn",
          "description": "<p>The Amazon Resource Name of the invoker. </p> <important> <p>If you add a permission to a service principal without providing the source ARN, any AWS account that creates a mapping to your function ARN can invoke your Lambda function.</p> </important>"
        },
        "StatementId": {
          "$ref": "#/definitions/StatementId",
          "description": "A unique statement identifier."
        }
      },
      "required": [
        "StatementId",
        "Action",
        "Principal"
      ],
      "type": "object"
    },
    "AddPermissionResponse": {
      "example": {
        "Statement": "ID-1"
      },
      "properties": {
        "Statement": {
          "$ref": "#/definitions/String",
          "description": "The permission statement you specified in the request. The response returns the same as a string using a backslash (\"\\\") as an escape character in the JSON."
        }
      },
      "type": "object"
    },
    "AdditionalVersion": {
      "maxLength": 1024,
      "minLength": 1,
      "pattern": "[0-9]+",
      "type": "string"
    },
    "AdditionalVersionWeights": {
      "items": {
        "properties": {
          "key": {
            "$ref": "#/definitions/AdditionalVersion"
          },
          "value": {
            "$ref": "#/definitions/Weight"
          }
        },
        "type": "object"
      },
      "type": "array"
    },
    "Alias": {
      "maxLength": 128,
      "minLength": 1,
      "pattern": "(?!^[0-9]+$)([a-zA-Z0-9-_]+)",
      "type": "string"
    },
    "AliasConfiguration": {
      "description": "Provides configuration information about a Lambda function version alias.",
      "example": {
        "AliasArn": "arn:aws:lambda:us-west-2:123456789012:function:functionAlias",
        "Description": "",
        "FunctionVersion": "1",
        "Name": "functionAlias"
      },
      "properties": {
        "AliasArn": {
          "$ref": "#/definitions/FunctionArn",
          "description": "Lambda function ARN that is qualified using the alias name as the suffix. For example, if you create an alias called <code>BETA</code> that points to a helloworld function version, the ARN is <code>arn:aws:lambda:aws-regions:acct-id:function:helloworld:BETA</code>."
        },
        "Description": {
          "$ref": "#/definitions/Description",
          "description": "Alias description."
        },
        "FunctionVersion": {
          "$ref": "#/definitions/Version",
          "description": "Function version to which the alias points."
        },
        "Name": {
          "$ref": "#/definitions/Alias",
          "description": "Alias name."
        },
        "RevisionId": {
          "$ref": "#/definitions/String",
          "description": "Represents the latest updated revision of the function or alias."
        },
        "RoutingConfig": {
          "$ref": "#/definitions/AliasRoutingConfiguration",
          "description": "Specifies an additional function versions the alias points to, allowing you to dictate what percentage of traffic will invoke each version."
        }
      },
      "type": "object"
    },
    "AliasList": {
      "items": {
        "$ref": "#/definitions/AliasConfiguration"
      },
      "type": "array"
    },
    "AliasRoutingConfiguration": {
      "description": "The alias's <a href=\"http://docs.aws.amazon.com/lambda/latest/dg/lambda-traffic-shifting-using-aliases.html\">traffic shifting</a> configuration.",
      "properties": {
        "AdditionalVersionWeights": {
          "$ref": "#/definitions/AdditionalVersionWeights",
          "description": "The name of the second alias, and the percentage of traffic that is routed to it."
        }
      },
      "type": "object"
    },
    "Arn": {
      "pattern": "arn:(aws[a-zA-Z0-9-]*):([a-zA-Z0-9\\-])+:([a-z]{2}(-gov)?-[a-z]+-\\d{1})?:(\\d{12})?:(.*)",
      "type": "string"
    },
    "BatchSize": {
      "maximum": 10000,
      "minimum": 1,
      "type": "integer"
    },
    "Blob": {
      "format": "password",
      "type": "string"
    },
    "BlobStream": {
      "type": "string"
    },
    "Boolean": {
      "type": "boolean"
    },
    "CodeStorageExceededException": {},
    "CompatibleRuntimes": {
      "items": {
        "$ref": "#/definitions/Runtime"
      },
      "maxItems": 5,
      "type": "array"
    },
    "Concurrency": {
      "properties": {
        "ReservedConcurrentExecutions": {
          "$ref": "#/definitions/ReservedConcurrentExecutions",
          "description": "The number of concurrent executions reserved for this function. For more information, see <a href=\"http://docs.aws.amazon.com/lambda/latest/dg/concurrent-executions.html\">Managing Concurrency</a>."
        }
      },
      "type": "object"
    },
    "CreateAliasRequest": {
      "properties": {
        "Description": {
          "$ref": "#/definitions/Description",
          "description": "Description of the alias."
        },
        "FunctionVersion": {
          "$ref": "#/definitions/Version",
          "description": "Lambda function version for which you are creating the alias."
        },
        "Name": {
          "$ref": "#/definitions/Alias",
          "description": "Name for the alias you are creating."
        },
        "RoutingConfig": {
          "$ref": "#/definitions/AliasRoutingConfiguration",
          "description": "Specifies an additional version your alias can point to, allowing you to dictate what percentage of traffic will invoke each version. For more information, see <a href=\"http://docs.aws.amazon.com/lambda/latest/dg/lambda-traffic-shifting-using-aliases.html\">Traffic Shifting Using Aliases</a>."
        }
      },
      "required": [
        "Name",
        "FunctionVersion"
      ],
      "type": "object"
    },
    "CreateEventSourceMappingRequest": {
      "properties": {
        "BatchSize": {
          "$ref": "#/definitions/BatchSize",
          "description": "<p>The maximum number of items to retrieve in a single batch.</p> <ul> <li> <p> <b>Amazon Kinesis</b> - Default 100. Max 10,000.</p> </li> <li> <p> <b>Amazon DynamoDB Streams</b> - Default 100. Max 1,000.</p> </li> <li> <p> <b>Amazon Simple Queue Service</b> - Default 10. Max 10.</p> </li> </ul>"
        },
        "Enabled": {
          "$ref": "#/definitions/Enabled",
          "description": "Disables the event source mapping to pause polling and invocation."
        },
        "EventSourceArn": {
          "$ref": "#/definitions/Arn",
          "description": "<p>The Amazon Resource Name (ARN) of the event source.</p> <ul> <li> <p> <b>Amazon Kinesis</b> - The ARN of the data stream or a stream consumer.</p> </li> <li> <p> <b>Amazon DynamoDB Streams</b> - The ARN of the stream.</p> </li> <li> <p> <b>Amazon Simple Queue Service</b> - The ARN of the queue.</p> </li> </ul>"
        },
        "FunctionName": {
          "$ref": "#/definitions/FunctionName",
          "description": "<p>The name of the Lambda function.</p> <p class=\"title\"> <b>Name formats</b> </p> <ul> <li> <p> <b>Function name</b> - <code>MyFunction</code>.</p> </li> <li> <p> <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:MyFunction</code>.</p> </li> <li> <p> <b>Version or Alias ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:MyFunction:PROD</code>.</p> </li> <li> <p> <b>Partial ARN</b> - <code>123456789012:function:MyFunction</code>.</p> </li> </ul> <p>The length constraint applies only to the full ARN. If you specify only the function name, it's limited to 64 characters in length.</p>"
        },
        "StartingPosition": {
          "$ref": "#/definitions/EventSourcePosition",
          "description": "The position in a stream from which to start reading. Required for Amazon Kinesis and Amazon DynamoDB Streams sources. <code>AT_TIMESTAMP</code> is only supported for Amazon Kinesis streams."
        },
        "StartingPositionTimestamp": {
          "$ref": "#/definitions/Date",
          "description": "With <code>StartingPosition</code> set to <code>AT_TIMESTAMP</code>, the Unix time in seconds from which to start reading."
        }
      },
      "required": [
        "EventSourceArn",
        "FunctionName"
      ],
      "type": "object"
    },
    "CreateFunctionRequest": {
      "example": {
        "Code": {},
        "Description": "",
        "FunctionName": "MyFunction",
        "Handler": "souce_file.handler_name",
        "MemorySize": 128,
        "Publish": true,
        "Role": "arn:aws:iam::123456789012:role/service-role/role-name",
        "Runtime": "nodejs4.3",
        "Timeout": 15,
        "VpcConfig": {}
      },
      "properties": {
        "Code": {
          "$ref": "#/definitions/FunctionCode",
          "description": "The code for the function."
        },
        "DeadLetterConfig": {
          "$ref": "#/definitions/DeadLetterConfig",
          "description": "A dead letter queue configuration that specifies the queue or topic where Lambda sends asynchronous events when they fail processing. For more information, see <a href=\"http://docs.aws.amazon.com/lambda/latest/dg/dlq.html\">Dead Letter Queues</a>. "
        },
        "Description": {
          "$ref": "#/definitions/Description",
          "description": "A description of the function."
        },
        "Environment": {
          "$ref": "#/definitions/Environment",
          "description": "Environment variables that are accessible from function code during execution."
        },
        "FunctionName": {
          "$ref": "#/definitions/FunctionName",
          "description": "<p>The name of the Lambda function.</p> <p class=\"title\"> <b>Name formats</b> </p> <ul> <li> <p> <b>Function name</b> - <code>MyFunction</code>.</p> </li> <li> <p> <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:MyFunction</code>.</p> </li> <li> <p> <b>Partial ARN</b> - <code>123456789012:function:MyFunction</code>.</p> </li> </ul> <p>The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.</p>"
        },
        "Handler": {
          "$ref": "#/definitions/Handler",
          "description": "The name of the method within your code that Lambda calls to execute your function. For more information, see <a href=\"http://docs.aws.amazon.com/lambda/latest/dg/programming-model-v2.html\">Programming Model</a>."
        },
        "KMSKeyArn": {
          "$ref": "#/definitions/KMSKeyArn",
          "description": "The ARN of the KMS key used to encrypt your function's environment variables. If not provided, AWS Lambda will use a default service key."
        },
        "Layers": {
          "$ref": "#/definitions/LayerList",
          "description": "A list of <a href=\"http://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html\">function layers</a> to add to the function's execution environment."
        },
        "MemorySize": {
          "$ref": "#/definitions/MemorySize",
          "description": "The amount of memory that your function has access to. Increasing the function's memory also increases it's CPU allocation. The default value is 128 MB. The value must be a multiple of 64 MB."
        },
        "Publish": {
          "$ref": "#/definitions/Boolean",
          "description": "Set to true to publish the first version of the function during creation."
        },
        "Role": {
          "$ref": "#/definitions/RoleArn",
          "description": "The Amazon Resource Name (ARN) of the function's <a href=\"http://docs.aws.amazon.com/lambda/latest/dg/intro-permission-model.html#lambda-intro-execution-role\">execution role</a>."
        },
        "Runtime": {
          "$ref": "#/definitions/Runtime",
          "description": "The runtime version for the function."
        },
        "Tags": {
          "$ref": "#/definitions/Tags",
          "description": "The list of tags (key-value pairs) assigned to the new function. For more information, see <a href=\"http://docs.aws.amazon.com/lambda/latest/dg/tagging.html\">Tagging Lambda Functions</a> in the <b>AWS Lambda Developer Guide</b>."
        },
        "Timeout": {
          "$ref": "#/definitions/Timeout",
          "description": "The amount of time that Lambda allows a function to run before terminating it. The default is 3 seconds. The maximum allowed value is 900 seconds."
        },
        "TracingConfig": {
          "$ref": "#/definitions/TracingConfig",
          "description": "Set <code>Mode</code> to <code>Active</code> to sample and trace a subset of incoming requests with AWS X-Ray."
        },
        "VpcConfig": {
          "$ref": "#/definitions/VpcConfig",
          "description": "If your Lambda function accesses resources in a VPC, you provide this parameter identifying the list of security group IDs and subnet IDs. These must belong to the same VPC. You must provide at least one security group and one subnet ID."
        }
      },
      "required": [
        "FunctionName",
        "Runtime",
        "Role",
        "Handler",
        "Code"
      ],
      "type": "object"
    },
    "Date": {
      "format": "date-time",
      "type": "string"
    },
    "DeadLetterConfig": {
      "description": "The <a href=\"http://docs.aws.amazon.com/lambda/latest/dg/dlq.html\">dead letter queue</a> for failed asynchronous invocations.",
      "properties": {
        "TargetArn": {
          "$ref": "#/definitions/ResourceArn",
          "description": "The Amazon Resource Name (ARN) of an Amazon SQS queue or Amazon SNS topic."
        }
      },
      "type": "object"
    },
    "DeleteAliasRequest": {
      "example": {
        "FunctionName": "myFunction",
        "Name": "alias"
      },
      "properties": {},
      "type": "object"
    },
    "DeleteEventSourceMappingRequest": {
      "example": {
        "UUID": "12345kxodurf3443"
      },
      "properties": {},
      "type": "object"
    },
    "DeleteFunctionConcurrencyRequest": {
      "properties": {},
      "type": "object"
    },
    "DeleteFunctionRequest": {
      "example": {
        "FunctionName": "myFunction",
        "Qualifier": "1"
      },
      "properties": {},
      "type": "object"
    },
    "DeleteLayerVersionRequest": {
      "properties": {},
      "type": "object"
    },
    "Description": {
      "maxLength": 256,
      "minLength": 0,
      "type": "string"
    },
    "EC2AccessDeniedException": {},
    "EC2ThrottledException": {},
    "EC2UnexpectedException": {},
    "ENILimitReachedException": {},
    "Enabled": {
      "type": "boolean"
    },
    "Environment": {
      "description": "A function's environment variable settings.",
      "properties": {
        "Variables": {
          "$ref": "#/definitions/EnvironmentVariables",
          "description": "Environment variable key-value pairs."
        }
      },
      "type": "object"
    },
    "EnvironmentError": {
      "description": "Error messages for environment variables that could not be applied.",
      "properties": {
        "ErrorCode": {
          "$ref": "#/definitions/String",
          "description": "The error code."
        },
        "Message": {
          "$ref": "#/definitions/SensitiveString",
          "description": "The error message."
        }
      },
      "type": "object"
    },
    "EnvironmentResponse": {
      "description": "The results of a configuration update that applied environment variables.",
      "properties": {
        "Error": {
          "$ref": "#/definitions/EnvironmentError",
          "description": "Error messages for environment variables that could not be applied."
        },
        "Variables": {
          "$ref": "#/definitions/EnvironmentVariables",
          "description": "Environment variable key-value pairs."
        }
      },
      "type": "object"
    },
    "EnvironmentVariableName": {
      "format": "password",
      "pattern": "[a-zA-Z]([a-zA-Z0-9_])+",
      "type": "string"
    },
    "EnvironmentVariableValue": {
      "format": "password",
      "type": "string"
    },
    "EnvironmentVariables": {
      "items": {
        "properties": {
          "key": {
            "$ref": "#/definitions/EnvironmentVariableName"
          },
          "value": {
            "$ref": "#/definitions/EnvironmentVariableValue"
          }
        },
        "type": "object"
      },
      "type": "array"
    },
    "EventSourceMappingConfiguration": {
      "description": "A mapping between an AWS resource and an AWS Lambda function. See <a>CreateEventSourceMapping</a> for details.",
      "example": {
        "BatchSize": 123,
        "EventSourceArn": "arn:aws:s3:::examplebucket/*",
        "FunctionArn": "arn:aws:lambda:us-west-2:123456789012:function:myFunction",
        "LastModified": "2016-11-21T19:49:20.006+0000",
        "LastProcessingResult": "",
        "State": "",
        "StateTransitionReason": "",
        "UUID": "1234xCy789012"
      },
      "properties": {
        "BatchSize": {
          "$ref": "#/definitions/BatchSize",
          "description": "The maximum number of items to retrieve in a single batch."
        },
        "EventSourceArn": {
          "$ref": "#/definitions/Arn",
          "description": "The Amazon Resource Name (ARN) of the event source."
        },
        "FunctionArn": {
          "$ref": "#/definitions/FunctionArn",
          "description": "The ARN of the Lambda function."
        },
        "LastModified": {
          "$ref": "#/definitions/Date",
          "description": "The date that the event source mapping was last updated, in Unix time seconds."
        },
        "LastProcessingResult": {
          "$ref": "#/definitions/String",
          "description": "The result of the last AWS Lambda invocation of your Lambda function."
        },
        "State": {
          "$ref": "#/definitions/String",
          "description": "The state of the event source mapping. It can be one of the following: <code>Creating</code>, <code>Enabling</code>, <code>Enabled</code>, <code>Disabling</code>, <code>Disabled</code>, <code>Updating</code>, or <code>Deleting</code>."
        },
        "StateTransitionReason": {
          "$ref": "#/definitions/String",
          "description": "The cause of the last state change, either <code>User initiated</code> or <code>Lambda initiated</code>."
        },
        "UUID": {
          "$ref": "#/definitions/String",
          "description": "The identifier of the event source mapping."
        }
      },
      "type": "object"
    },
    "EventSourceMappingsList": {
      "items": {
        "$ref": "#/definitions/EventSourceMappingConfiguration"
      },
      "type": "array"
    },
    "EventSourcePosition": {
      "enum": [
        "TRIM_HORIZON",
        "LATEST",
        "AT_TIMESTAMP"
      ],
      "type": "string"
    },
    "EventSourceToken": {
      "maxLength": 256,
      "minLength": 0,
      "pattern": "[a-zA-Z0-9._\\-]+",
      "type": "string"
    },
    "FunctionArn": {
      "pattern": "arn:(aws[a-zA-Z-]*)?:lambda:[a-z]{2}(-gov)?-[a-z]+-\\d{1}:\\d{12}:function:[a-zA-Z0-9-_]+(:(\\$LATEST|[a-zA-Z0-9-_]+))?",
      "type": "string"
    },
    "FunctionCode": {
      "description": "The code for the Lambda function. You can specify either an S3 location, or upload a deployment package directly.",
      "properties": {
        "S3Bucket": {
          "$ref": "#/definitions/S3Bucket",
          "description": "An Amazon S3 bucket in the same region as your function."
        },
        "S3Key": {
          "$ref": "#/definitions/S3Key",
          "description": "The Amazon S3 key of the deployment package."
        },
        "S3ObjectVersion": {
          "$ref": "#/definitions/S3ObjectVersion",
          "description": "For versioned objects, the version of the deployment package object to use."
        },
        "ZipFile": {
          "$ref": "#/definitions/Blob",
          "description": "The base64-encoded contents of your zip file containing your deployment package. AWS SDK and AWS CLI clients handle the encoding for you."
        }
      },
      "type": "object"
    },
    "FunctionCodeLocation": {
      "description": "The object for the Lambda function location.",
      "properties": {
        "Location": {
          "$ref": "#/definitions/String",
          "description": "The presigned URL you can use to download the function's .zip file that you previously uploaded. The URL is valid for up to 10 minutes."
        },
        "RepositoryType": {
          "$ref": "#/definitions/String",
          "description": "The repository from which you can download the function."
        }
      },
      "type": "object"
    },
    "FunctionConfiguration": {
      "description": "A Lambda function's configuration settings.",
      "example": {
        "CodeSha256": "LQT+0DHxxxxcfwLyQjzoEFKZtdqQjHXanlSdfXBlEW0VA=",
        "CodeSize": 123,
        "Description": "",
        "FunctionArn": "arn:aws:lambda:us-west-2:123456789012:function:myFunction",
        "FunctionName": "myFunction",
        "Handler": "index.handler",
        "LastModified": "2016-11-21T19:49:20.006+0000",
        "MemorySize": 128,
        "Role": "arn:aws:iam::123456789012:role/lambda_basic_execution",
        "Runtime": "python2.7",
        "Timeout": 123,
        "Version": "1",
        "VpcConfig": {}
      },
      "properties": {
        "CodeSha256": {
          "$ref": "#/definitions/String",
          "description": "The SHA256 hash of the function's deployment package."
        },
        "CodeSize": {
          "$ref": "#/definitions/Long",
          "description": "The size of the function's deployment package in bytes."
        },
        "DeadLetterConfig": {
          "$ref": "#/definitions/DeadLetterConfig",
          "description": "The function's dead letter queue."
        },
        "Description": {
          "$ref": "#/definitions/Description",
          "description": "The function's description."
        },
        "Environment": {
          "$ref": "#/definitions/EnvironmentResponse",
          "description": "The function's environment variables."
        },
        "FunctionArn": {
          "$ref": "#/definitions/NameSpacedFunctionArn",
          "description": "The function's Amazon Resource Name."
        },
        "FunctionName": {
          "$ref": "#/definitions/NamespacedFunctionName",
          "description": "The name of the function."
        },
        "Handler": {
          "$ref": "#/definitions/Handler",
          "description": "The function Lambda calls to begin executing your function."
        },
        "KMSKeyArn": {
          "$ref": "#/definitions/KMSKeyArn",
          "description": "The KMS key used to encrypt the function's environment variables. Only returned if you've configured a customer managed CMK."
        },
        "LastModified": {
          "$ref": "#/definitions/Timestamp",
          "description": "The date and time that the function was last updated, in <a href=\"https://www.w3.org/TR/NOTE-datetime\">ISO-8601 format</a> (YYYY-MM-DDThh:mm:ss.sTZD)."
        },
        "Layers": {
          "$ref": "#/definitions/LayersReferenceList",
          "description": "A list of <a href=\"http://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html\">function layers</a>."
        },
        "MasterArn": {
          "$ref": "#/definitions/FunctionArn",
          "description": "The ARN of the master function."
        },
        "MemorySize": {
          "$ref": "#/definitions/MemorySize",
          "description": "The memory allocated to the function"
        },
        "RevisionId": {
          "$ref": "#/definitions/String",
          "description": "Represents the latest updated revision of the function or alias."
        },
        "Role": {
          "$ref": "#/definitions/RoleArn",
          "description": "The function's execution role."
        },
        "Runtime": {
          "$ref": "#/definitions/Runtime",
          "description": "The runtime environment for the Lambda function."
        },
        "Timeout": {
          "$ref": "#/definitions/Timeout",
          "description": "The amount of time that Lambda allows a function to run before terminating it."
        },
        "TracingConfig": {
          "$ref": "#/definitions/TracingConfigResponse",
          "description": "The function's AWS X-Ray tracing configuration."
        },
        "Version": {
          "$ref": "#/definitions/Version",
          "description": "The version of the Lambda function."
        },
        "VpcConfig": {
          "$ref": "#/definitions/VpcConfigResponse",
          "description": "The function's networking configuration."
        }
      },
      "type": "object"
    },
    "FunctionList": {
      "items": {
        "$ref": "#/definitions/FunctionConfiguration"
      },
      "type": "array"
    },
    "FunctionName": {
      "maxLength": 140,
      "minLength": 1,
      "pattern": "(arn:(aws[a-zA-Z-]*)?:lambda:)?([a-z]{2}(-gov)?-[a-z]+-\\d{1}:)?(\\d{12}:)?(function:)?([a-zA-Z0-9-_]+)(:(\\$LATEST|[a-zA-Z0-9-_]+))?",
      "type": "string"
    },
    "FunctionVersion": {
      "enum": [
        "ALL"
      ],
      "type": "string"
    },
    "GetAccountSettingsRequest": {
      "example": {},
      "properties": {},
      "type": "object"
    },
    "GetAccountSettingsResponse": {
      "example": {
        "AccountLimit": {},
        "AccountUsage": {}
      },
      "properties": {
        "AccountLimit": {
          "$ref": "#/definitions/AccountLimit",
          "description": "Limits related to concurrency and code storage."
        },
        "AccountUsage": {
          "$ref": "#/definitions/AccountUsage",
          "description": "The number of functions and amount of storage in use."
        }
      },
      "type": "object"
    },
    "GetAliasRequest": {
      "example": {
        "FunctionName": "myFunction",
        "Name": "myFunctionAlias"
      },
      "properties": {},
      "type": "object"
    },
    "GetEventSourceMappingRequest": {
      "example": {
        "UUID": "123489-xxxxx-kdla8d89d7"
      },
      "properties": {},
      "type": "object"
    },
    "GetFunctionConfigurationRequest": {
      "example": {
        "FunctionName": "myFunction",
        "Qualifier": "1"
      },
      "properties": {},
      "type": "object"
    },
    "GetFunctionRequest": {
      "example": {
        "FunctionName": "myFunction",
        "Qualifier": "1"
      },
      "properties": {},
      "type": "object"
    },
    "GetFunctionResponse": {
      "description": "This response contains the object for the Lambda function location (see <a>FunctionCodeLocation</a>.",
      "example": {
        "Code": {
          "Location": "somelocation",
          "RepositoryType": "S3"
        },
        "Configuration": {
          "CodeSha256": "LQT+0DHxxxxcfwLyQjzoEFKZtdqQjHXanlSdfXBlEW0VA=",
          "CodeSize": 262,
          "Description": "A starter AWS Lambda function.",
          "Environment": {
            "Variables": {
              "S3_BUCKET": "test"
            }
          },
          "FunctionArn": "arn:aws:lambda:us-west-2:123456789012:function:myFunction",
          "FunctionName": "myFunction",
          "Handler": "index.handler",
          "LastModified": "2016-11-21T19:49:20.006+0000",
          "MemorySize": 128,
          "Role": "arn:aws:iam::123456789012:role/lambda_basic_execution",
          "Runtime": "nodejs4.3",
          "Timeout": 3,
          "Version": "$LATEST",
          "VpcConfig": {
            "SecurityGroupIds": [],
            "SubnetIds": []
          }
        }
      },
      "properties": {
        "Code": {
          "$ref": "#/definitions/FunctionCodeLocation",
          "description": "The function's code."
        },
        "Concurrency": {
          "$ref": "#/definitions/Concurrency",
          "description": "The concurrent execution limit set for this function. For more information, see <a href=\"http://docs.aws.amazon.com/lambda/latest/dg/concurrent-executions.html\">Managing Concurrency</a>."
        },
        "Configuration": {
          "$ref": "#/definitions/FunctionConfiguration",
          "description": "The function's configuration."
        },
        "Tags": {
          "$ref": "#/definitions/Tags",
          "description": "Returns the list of tags associated with the function. For more information, see <a href=\"http://docs.aws.amazon.com/lambda/latest/dg/tagging.html\">Tagging Lambda Functions</a> in the <b>AWS Lambda Developer Guide</b>."
        }
      },
      "type": "object"
    },
    "GetLayerVersionPolicyRequest": {
      "properties": {},
      "type": "object"
    },
    "GetLayerVersionPolicyResponse": {
      "properties": {
        "Policy": {
          "$ref": "#/definitions/String",
          "description": "The policy document."
        },
        "RevisionId": {
          "$ref": "#/definitions/String",
          "description": "A unique identifier for the current revision of the policy."
        }
      },
      "type": "object"
    },
    "GetLayerVersionRequest": {
      "properties": {},
      "type": "object"
    },
    "GetLayerVersionResponse": {
      "properties": {
        "CompatibleRuntimes": {
          "$ref": "#/definitions/CompatibleRuntimes",
          "description": "The layer's compatible runtimes."
        },
        "Content": {
          "$ref": "#/definitions/LayerVersionContentOutput",
          "description": "Details about the layer version."
        },
        "CreatedDate": {
          "$ref": "#/definitions/Timestamp",
          "description": "The date that the layer version was created, in <a href=\"https://www.w3.org/TR/NOTE-datetime\">ISO-8601 format</a> (YYYY-MM-DDThh:mm:ss.sTZD)."
        },
        "Description": {
          "$ref": "#/definitions/Description",
          "description": "The description of the version."
        },
        "LayerArn": {
          "$ref": "#/definitions/LayerArn",
          "description": "The Amazon Resource Name (ARN) of the function layer."
        },
        "LayerVersionArn": {
          "$ref": "#/definitions/LayerVersionArn",
          "description": "The ARN of the layer version."
        },
        "LicenseInfo": {
          "$ref": "#/definitions/LicenseInfo",
          "description": "The layer's software license."
        },
        "Version": {
          "$ref": "#/definitions/LayerVersionNumber",
          "description": "The version number."
        }
      },
      "type": "object"
    },
    "GetPolicyRequest": {
      "example": {
        "FunctionName": "myFunction",
        "Qualifier": "1"
      },
      "properties": {},
      "type": "object"
    },
    "GetPolicyResponse": {
      "example": {
        "Policy": ""
      },
      "properties": {
        "Policy": {
          "$ref": "#/definitions/String",
          "description": "The resource policy associated with the specified function. The response returns the same as a string using a backslash (\"\\\") as an escape character in the JSON."
        },
        "RevisionId": {
          "$ref": "#/definitions/String",
          "description": "Represents the latest updated revision of the function or alias."
        }
      },
      "type": "object"
    },
    "Handler": {
      "maxLength": 128,
      "pattern": "[^\\s]+",
      "type": "string"
    },
    "HttpStatus": {
      "type": "integer"
    },
    "Integer": {
      "type": "integer"
    },
    "InvalidParameterValueException": {},
    "InvalidRequestContentException": {},
    "InvalidRuntimeException": {},
    "InvalidSecurityGroupIDException": {},
    "InvalidSubnetIDException": {},
    "InvalidZipFileException": {},
    "InvocationRequest": {
      "example": {
        "ClientContext": "MyApp",
        "FunctionName": "MyFunction",
        "InvocationType": "Event",
        "LogType": "Tail",
        "Payload": "fileb://file-path/input.json",
        "Qualifier": "1"
      },
      "properties": {
        "Payload": {
          "$ref": "#/definitions/Blob",
          "description": "JSON that you want to provide to your Lambda function as input."
        }
      },
      "type": "object"
    },
    "InvocationResponse": {
      "description": "Upon success, returns an empty response. Otherwise, throws an exception.",
      "example": {
        "FunctionError": "",
        "LogResult": "",
        "Payload": "?",
        "StatusCode": 123
      },
      "properties": {
        "Payload": {
          "$ref": "#/definitions/Blob",
          "description": "<p> It is the JSON representation of the object returned by the Lambda function. This is present only if the invocation type is <code>RequestResponse</code>. </p> <p>In the event of a function error this field contains a message describing the error. For the <code>Handled</code> errors the Lambda function will report this message. For <code>Unhandled</code> errors AWS Lambda reports the message. </p>"
        },
        "StatusCode": {
          "$ref": "#/definitions/Integer",
          "description": "The HTTP status code will be in the 200 range for successful request. For the <code>RequestResponse</code> invocation type this status code will be 200. For the <code>Event</code> invocation type this status code will be 202. For the <code>DryRun</code> invocation type the status code will be 204. "
        }
      },
      "type": "object"
    },
    "InvocationType": {
      "enum": [
        "Event",
        "RequestResponse",
        "DryRun"
      ],
      "type": "string"
    },
    "InvokeAsyncRequest": {
      "example": {
        "FunctionName": "myFunction",
        "InvokeArgs": "fileb://file-path/input.json"
      },
      "properties": {
        "InvokeArgs": {
          "$ref": "#/definitions/BlobStream",
          "description": "JSON that you want to provide to your Lambda function as input."
        }
      },
      "required": [
        "InvokeArgs"
      ],
      "type": "object"
    },
    "InvokeAsyncResponse": {
      "description": "Upon success, it returns empty response. Otherwise, throws an exception.",
      "example": {
        "Status": 123
      },
      "properties": {
        "Status": {
          "$ref": "#/definitions/HttpStatus",
          "description": "It will be 202 upon success."
        }
      },
      "type": "object"
    },
    "KMSAccessDeniedException": {},
    "KMSDisabledException": {},
    "KMSInvalidStateException": {},
    "KMSKeyArn": {
      "pattern": "(arn:(aws[a-zA-Z-]*)?:[a-z0-9-.]+:.*)|()",
      "type": "string"
    },
    "KMSNotFoundException": {},
    "Layer": {
      "description": "A function layer.",
      "properties": {
        "Arn": {
          "$ref": "#/definitions/LayerVersionArn",
          "description": "The Amazon Resource Name (ARN) of the function layer."
        },
        "CodeSize": {
          "$ref": "#/definitions/Long",
          "description": "The size of the layer archive in bytes."
        }
      },
      "type": "object"
    },
    "LayerArn": {
      "maxLength": 140,
      "minLength": 1,
      "pattern": "arn:[a-zA-Z0-9-]+:lambda:[a-zA-Z0-9-]+:\\d{12}:layer:[a-zA-Z0-9-_]+",
      "type": "string"
    },
    "LayerList": {
      "items": {
        "$ref": "#/definitions/LayerVersionArn"
      },
      "type": "array"
    },
    "LayerName": {
      "maxLength": 140,
      "minLength": 1,
      "pattern": "(arn:[a-zA-Z0-9-]+:lambda:[a-zA-Z0-9-]+:\\d{12}:layer:[a-zA-Z0-9-_]+)|[a-zA-Z0-9-_]+",
      "type": "string"
    },
    "LayerPermissionAllowedAction": {
      "pattern": "lambda:GetLayerVersion",
      "type": "string"
    },
    "LayerPermissionAllowedPrincipal": {
      "pattern": "\\d{12}|\\*|arn:(aws[a-zA-Z-]*):iam::\\d{12}:root",
      "type": "string"
    },
    "LayerVersionArn": {
      "maxLength": 140,
      "minLength": 1,
      "pattern": "arn:[a-zA-Z0-9-]+:lambda:[a-zA-Z0-9-]+:\\d{12}:layer:[a-zA-Z0-9-_]+:[0-9]+",
      "type": "string"
    },
    "LayerVersionContentInput": {
      "description": "A ZIP archive that contains the contents of the function layer. You can specify either an Amazon S3 location, or upload a layer archive directly.",
      "properties": {
        "S3Bucket": {
          "$ref": "#/definitions/S3Bucket",
          "description": "The Amazon S3 bucket of the layer archive."
        },
        "S3Key": {
          "$ref": "#/definitions/S3Key",
          "description": "The Amazon S3 key of the layer archive."
        },
        "S3ObjectVersion": {
          "$ref": "#/definitions/S3ObjectVersion",
          "description": "For versioned objects, the version of the layer archive object to use."
        },
        "ZipFile": {
          "$ref": "#/definitions/Blob",
          "description": "The base64-encoded contents of the layer archive. AWS SDK and AWS CLI clients handle the encoding for you."
        }
      },
      "type": "object"
    },
    "LayerVersionContentOutput": {
      "description": "Details about a layer version.",
      "properties": {
        "CodeSha256": {
          "$ref": "#/definitions/String",
          "description": "The SHA-256 hash of the layer archive."
        },
        "CodeSize": {
          "$ref": "#/definitions/Long",
          "description": "The size of the layer archive in bytes."
        },
        "Location": {
          "$ref": "#/definitions/String",
          "description": "A link to the layer archive in Amazon S3 that is valid for 10 minutes."
        }
      },
      "type": "object"
    },
    "LayerVersionNumber": {
      "type": "integer"
    },
    "LayerVersionsList": {
      "items": {
        "$ref": "#/definitions/LayerVersionsListItem"
      },
      "type": "array"
    },
    "LayerVersionsListItem": {
      "description": "Details about a layer version.",
      "properties": {
        "CompatibleRuntimes": {
          "$ref": "#/definitions/CompatibleRuntimes",
          "description": "The layer's compatible runtimes."
        },
        "CreatedDate": {
          "$ref": "#/definitions/Timestamp",
          "description": "The date that the version was created, in ISO 8601 format. For example, <code>2018-11-27T15:10:45.123+0000</code>."
        },
        "Description": {
          "$ref": "#/definitions/Description",
          "description": "The description of the version."
        },
        "LayerVersionArn": {
          "$ref": "#/definitions/LayerVersionArn",
          "description": "The ARN of the layer version."
        },
        "LicenseInfo": {
          "$ref": "#/definitions/LicenseInfo",
          "description": "The layer's open-source license."
        },
        "Version": {
          "$ref": "#/definitions/LayerVersionNumber",
          "description": "The version number."
        }
      },
      "type": "object"
    },
    "LayersList": {
      "items": {
        "$ref": "#/definitions/LayersListItem"
      },
      "type": "array"
    },
    "LayersListItem": {
      "description": "Details about a function layer.",
      "properties": {
        "LatestMatchingVersion": {
          "$ref": "#/definitions/LayerVersionsListItem",
          "description": "The newest version of the layer."
        },
        "LayerArn": {
          "$ref": "#/definitions/LayerArn",
          "description": "The Amazon Resource Name (ARN) of the function layer."
        },
        "LayerName": {
          "$ref": "#/definitions/LayerName",
          "description": "The name of the layer."
        }
      },
      "type": "object"
    },
    "LayersReferenceList": {
      "items": {
        "$ref": "#/definitions/Layer"
      },
      "type": "array"
    },
    "LicenseInfo": {
      "maxLength": 512,
      "type": "string"
    },
    "ListAliasesRequest": {
      "example": {
        "FunctionName": "myFunction",
        "FunctionVersion": "1",
        "Marker": "",
        "MaxItems": 123
      },
      "properties": {},
      "type": "object"
    },
    "ListAliasesResponse": {
      "example": {
        "Aliases": [],
        "NextMarker": ""
      },
      "properties": {
        "Aliases": {
          "$ref": "#/definitions/AliasList",
          "description": "A list of aliases."
        },
        "NextMarker": {
          "$ref": "#/definitions/String",
          "description": "A string, present if there are more aliases."
        }
      },
      "type": "object"
    },
    "ListEventSourceMappingsRequest": {
      "properties": {},
      "type": "object"
    },
    "ListEventSourceMappingsResponse": {
      "properties": {
        "EventSourceMappings": {
          "$ref": "#/definitions/EventSourceMappingsList",
          "description": "A list of event source mappings."
        },
        "NextMarker": {
          "$ref": "#/definitions/String",
          "description": "A pagination token that's returned when the response doesn't contain all event source mappings."
        }
      },
      "type": "object"
    },
    "ListFunctionsRequest": {
      "example": {
        "Marker": "",
        "MaxItems": 123
      },
      "properties": {},
      "type": "object"
    },
    "ListFunctionsResponse": {
      "description": "A list of Lambda functions.",
      "example": {
        "Functions": [],
        "NextMarker": ""
      },
      "properties": {
        "Functions": {
          "$ref": "#/definitions/FunctionList",
          "description": "A list of Lambda functions."
        },
        "NextMarker": {
          "$ref": "#/definitions/String",
          "description": "A string, present if there are more functions."
        }
      },
      "type": "object"
    },
    "ListLayerVersionsRequest": {
      "properties": {},
      "type": "object"
    },
    "ListLayerVersionsResponse": {
      "properties": {
        "LayerVersions": {
          "$ref": "#/definitions/LayerVersionsList",
          "description": "A list of versions."
        },
        "NextMarker": {
          "$ref": "#/definitions/String",
          "description": "A pagination token returned when the response doesn't contain all versions."
        }
      },
      "type": "object"
    },
    "ListLayersRequest": {
      "properties": {},
      "type": "object"
    },
    "ListLayersResponse": {
      "properties": {
        "Layers": {
          "$ref": "#/definitions/LayersList",
          "description": "A list of function layers."
        },
        "NextMarker": {
          "$ref": "#/definitions/String",
          "description": "A pagination token returned when the response doesn't contain all layers."
        }
      },
      "type": "object"
    },
    "ListTagsRequest": {
      "properties": {},
      "type": "object"
    },
    "ListTagsResponse": {
      "properties": {
        "Tags": {
          "$ref": "#/definitions/Tags",
          "description": "The list of tags assigned to the function. For more information, see <a href=\"http://docs.aws.amazon.com/lambda/latest/dg/tagging.html\">Tagging Lambda Functions</a> in the <b>AWS Lambda Developer Guide</b>."
        }
      },
      "type": "object"
    },
    "ListVersionsByFunctionRequest": {
      "example": {
        "FunctionName": "myFunction",
        "Marker": "",
        "MaxItems": 123
      },
      "properties": {},
      "type": "object"
    },
    "ListVersionsByFunctionResponse": {
      "example": {
        "NextMarker": "",
        "Versions": []
      },
      "properties": {
        "NextMarker": {
          "$ref": "#/definitions/String",
          "description": "A string, present if there are more function versions."
        },
        "Versions": {
          "$ref": "#/definitions/FunctionList",
          "description": "A list of Lambda function versions."
        }
      },
      "type": "object"
    },
    "LogType": {
      "enum": [
        "None",
        "Tail"
      ],
      "type": "string"
    },
    "Long": {
      "type": "integer"
    },
    "MasterRegion": {
      "pattern": "ALL|[a-z]{2}(-gov)?-[a-z]+-\\d{1}",
      "type": "string"
    },
    "MaxLayerListItems": {
      "maximum": 50,
      "minimum": 1,
      "type": "integer"
    },
    "MaxListItems": {
      "maximum": 10000,
      "minimum": 1,
      "type": "integer"
    },
    "MemorySize": {
      "maximum": 3008,
      "minimum": 128,
      "type": "integer"
    },
    "NameSpacedFunctionArn": {
      "pattern": "arn:(aws[a-zA-Z-]*)?:lambda:[a-z]{2}(-gov)?-[a-z]+-\\d{1}:\\d{12}:function:[a-zA-Z0-9-_\\.]+(:(\\$LATEST|[a-zA-Z0-9-_]+))?",
      "type": "string"
    },
    "NamespacedFunctionName": {
      "maxLength": 170,
      "minLength": 1,
      "pattern": "(arn:(aws[a-zA-Z-]*)?:lambda:)?([a-z]{2}(-gov)?-[a-z]+-\\d{1}:)?(\\d{12}:)?(function:)?([a-zA-Z0-9-_\\.]+)(:(\\$LATEST|[a-zA-Z0-9-_]+))?",
      "type": "string"
    },
    "NamespacedStatementId": {
      "maxLength": 100,
      "minLength": 1,
      "pattern": "([a-zA-Z0-9-_.]+)",
      "type": "string"
    },
    "OrganizationId": {
      "pattern": "o-[a-z0-9]{10,32}",
      "type": "string"
    },
    "PolicyLengthExceededException": {},
    "PreconditionFailedException": {},
    "Principal": {
      "pattern": ".*",
      "type": "string"
    },
    "PublishLayerVersionRequest": {
      "properties": {
        "CompatibleRuntimes": {
          "$ref": "#/definitions/CompatibleRuntimes",
          "description": "A list of compatible <a href=\"http://docs.aws.amazon.com/lambda/latest/dg/lambda-runtimes.html\">function runtimes</a>. Used for filtering with <a>ListLayers</a> and <a>ListLayerVersions</a>."
        },
        "Content": {
          "$ref": "#/definitions/LayerVersionContentInput",
          "description": "The function layer archive."
        },
        "Description": {
          "$ref": "#/definitions/Description",
          "description": "The description of the version."
        },
        "LicenseInfo": {
          "$ref": "#/definitions/LicenseInfo",
          "description": "<p>The layer's software license. It can be any of the following:</p> <ul> <li> <p>An <a href=\"https://spdx.org/licenses/\">SPDX license identifier</a>. For example, <code>MIT</code>.</p> </li> <li> <p>The URL of a license hosted on the internet. For example, <code>https://opensource.org/licenses/MIT</code>.</p> </li> <li> <p>The full text of the license.</p> </li> </ul>"
        }
      },
      "required": [
        "Content"
      ],
      "type": "object"
    },
    "PublishLayerVersionResponse": {
      "properties": {
        "CompatibleRuntimes": {
          "$ref": "#/definitions/CompatibleRuntimes",
          "description": "The layer's compatible runtimes."
        },
        "Content": {
          "$ref": "#/definitions/LayerVersionContentOutput",
          "description": "Details about the layer version."
        },
        "CreatedDate": {
          "$ref": "#/definitions/Timestamp",
          "description": "The date that the layer version was created, in <a href=\"https://www.w3.org/TR/NOTE-datetime\">ISO-8601 format</a> (YYYY-MM-DDThh:mm:ss.sTZD)."
        },
        "Description": {
          "$ref": "#/definitions/Description",
          "description": "The description of the version."
        },
        "LayerArn": {
          "$ref": "#/definitions/LayerArn",
          "description": "The Amazon Resource Name (ARN) of the function layer."
        },
        "LayerVersionArn": {
          "$ref": "#/definitions/LayerVersionArn",
          "description": "The ARN of the layer version."
        },
        "LicenseInfo": {
          "$ref": "#/definitions/LicenseInfo",
          "description": "The layer's software license."
        },
        "Version": {
          "$ref": "#/definitions/LayerVersionNumber",
          "description": "The version number."
        }
      },
      "type": "object"
    },
    "PublishVersionRequest": {
      "example": {
        "CodeSha256": "",
        "Description": "",
        "FunctionName": "myFunction"
      },
      "properties": {
        "CodeSha256": {
          "$ref": "#/definitions/String",
          "description": "The SHA256 hash of the deployment package you want to publish. This provides validation on the code you are publishing. If you provide this parameter, the value must match the SHA256 of the $LATEST version for the publication to succeed. You can use the <b>DryRun</b> parameter of <a>UpdateFunctionCode</a> to verify the hash value that will be returned before publishing your new version."
        },
        "Description": {
          "$ref": "#/definitions/Description",
          "description": "The description for the version you are publishing. If not provided, AWS Lambda copies the description from the $LATEST version."
        },
        "RevisionId": {
          "$ref": "#/definitions/String",
          "description": "An optional value you can use to ensure you are updating the latest update of the function version or alias. If the <code>RevisionID</code> you pass doesn't match the latest <code>RevisionId</code> of the function or alias, it will fail with an error message, advising you retrieve the latest function version or alias <code>RevisionID</code> using either <a>GetFunction</a> or <a>GetAlias</a>."
        }
      },
      "type": "object"
    },
    "PutFunctionConcurrencyRequest": {
      "properties": {
        "ReservedConcurrentExecutions": {
          "$ref": "#/definitions/ReservedConcurrentExecutions",
          "description": "The concurrent execution limit reserved for this function."
        }
      },
      "required": [
        "ReservedConcurrentExecutions"
      ],
      "type": "object"
    },
    "Qualifier": {
      "maxLength": 128,
      "minLength": 1,
      "pattern": "(|[a-zA-Z0-9$_-]+)",
      "type": "string"
    },
    "RemoveLayerVersionPermissionRequest": {
      "properties": {},
      "type": "object"
    },
    "RemovePermissionRequest": {
      "example": {
        "FunctionName": "myFunction",
        "Qualifier": "1",
        "StatementId": "role-statement-id"
      },
      "properties": {},
      "type": "object"
    },
    "RequestTooLargeException": {},
    "ReservedConcurrentExecutions": {
      "minimum": 0,
      "type": "integer"
    },
    "ResourceArn": {
      "pattern": "(arn:(aws[a-zA-Z-]*)?:[a-z0-9-.]+:.*)|()",
      "type": "string"
    },
    "ResourceConflictException": {},
    "ResourceInUseException": {},
    "ResourceNotFoundException": {},
    "RoleArn": {
      "pattern": "arn:(aws[a-zA-Z-]*)?:iam::\\d{12}:role/?[a-zA-Z_0-9+=,.@\\-_/]+",
      "type": "string"
    },
    "Runtime": {
      "enum": [
        "nodejs",
        "nodejs4.3",
        "nodejs6.10",
        "nodejs8.10",
        "java8",
        "python2.7",
        "python3.6",
        "python3.7",
        "dotnetcore1.0",
        "dotnetcore2.0",
        "dotnetcore2.1",
        "nodejs4.3-edge",
        "go1.x",
        "ruby2.5",
        "provided"
      ],
      "type": "string"
    },
    "S3Bucket": {
      "maxLength": 63,
      "minLength": 3,
      "pattern": "^[0-9A-Za-z\\.\\-_]*(?<!\\.)$",
      "type": "string"
    },
    "S3Key": {
      "maxLength": 1024,
      "minLength": 1,
      "type": "string"
    },
    "S3ObjectVersion": {
      "maxLength": 1024,
      "minLength": 1,
      "type": "string"
    },
    "SecurityGroupId": {
      "type": "string"
    },
    "SecurityGroupIds": {
      "items": {
        "$ref": "#/definitions/SecurityGroupId"
      },
      "maxItems": 5,
      "type": "array"
    },
    "SensitiveString": {
      "format": "password",
      "type": "string"
    },
    "ServiceException": {},
    "SourceOwner": {
      "pattern": "\\d{12}",
      "type": "string"
    },
    "StatementId": {
      "maxLength": 100,
      "minLength": 1,
      "pattern": "([a-zA-Z0-9-_]+)",
      "type": "string"
    },
    "String": {
      "type": "string"
    },
    "SubnetIPAddressLimitReachedException": {},
    "SubnetId": {
      "type": "string"
    },
    "SubnetIds": {
      "items": {
        "$ref": "#/definitions/SubnetId"
      },
      "maxItems": 16,
      "type": "array"
    },
    "TagKey": {
      "type": "string"
    },
    "TagKeyList": {
      "items": {
        "$ref": "#/definitions/TagKey"
      },
      "type": "array"
    },
    "TagResourceRequest": {
      "properties": {
        "Tags": {
          "$ref": "#/definitions/Tags",
          "description": "The list of tags (key-value pairs) you are assigning to the Lambda function. For more information, see <a href=\"http://docs.aws.amazon.com/lambda/latest/dg/tagging.html\">Tagging Lambda Functions</a> in the <b>AWS Lambda Developer Guide</b>."
        }
      },
      "required": [
        "Tags"
      ],
      "type": "object"
    },
    "TagValue": {
      "type": "string"
    },
    "Tags": {
      "items": {
        "properties": {
          "key": {
            "$ref": "#/definitions/TagKey"
          },
          "value": {
            "$ref": "#/definitions/TagValue"
          }
        },
        "type": "object"
      },
      "type": "array"
    },
    "Timeout": {
      "minimum": 1,
      "type": "integer"
    },
    "Timestamp": {
      "type": "string"
    },
    "TooManyRequestsException": {},
    "TracingConfig": {
      "description": "The function's AWS X-Ray tracing configuration.",
      "properties": {
        "Mode": {
          "$ref": "#/definitions/TracingMode",
          "description": "The tracing mode."
        }
      },
      "type": "object"
    },
    "TracingConfigResponse": {
      "description": "The function's AWS X-Ray tracing configuration.",
      "properties": {
        "Mode": {
          "$ref": "#/definitions/TracingMode",
          "description": "The tracing mode."
        }
      },
      "type": "object"
    },
    "TracingMode": {
      "enum": [
        "Active",
        "PassThrough"
      ],
      "type": "string"
    },
    "UnreservedConcurrentExecutions": {
      "minimum": 0,
      "type": "integer"
    },
    "UnsupportedMediaTypeException": {},
    "UntagResourceRequest": {
      "properties": {},
      "type": "object"
    },
    "UpdateAliasRequest": {
      "example": {
        "Description": "",
        "FunctionName": "myFunction",
        "FunctionVersion": "1",
        "Name": "functionAlias"
      },
      "properties": {
        "Description": {
          "$ref": "#/definitions/Description",
          "description": "You can change the description of the alias using this parameter."
        },
        "FunctionVersion": {
          "$ref": "#/definitions/Version",
          "description": "Using this parameter you can change the Lambda function version to which the alias points."
        },
        "RevisionId": {
          "$ref": "#/definitions/String",
          "description": "An optional value you can use to ensure you are updating the latest update of the function version or alias. If the <code>RevisionID</code> you pass doesn't match the latest <code>RevisionId</code> of the function or alias, it will fail with an error message, advising you retrieve the latest function version or alias <code>RevisionID</code> using either <a>GetFunction</a> or <a>GetAlias</a>."
        },
        "RoutingConfig": {
          "$ref": "#/definitions/AliasRoutingConfiguration",
          "description": "Specifies an additional version your alias can point to, allowing you to dictate what percentage of traffic will invoke each version. For more information, see <a href=\"http://docs.aws.amazon.com/lambda/latest/dg/lambda-traffic-shifting-using-aliases.html\">Traffic Shifting Using Aliases</a>."
        }
      },
      "type": "object"
    },
    "UpdateEventSourceMappingRequest": {
      "example": {
        "BatchSize": 123,
        "Enabled": true,
        "FunctionName": "myFunction",
        "UUID": "1234xCy789012"
      },
      "properties": {
        "BatchSize": {
          "$ref": "#/definitions/BatchSize",
          "description": "<p>The maximum number of items to retrieve in a single batch.</p> <ul> <li> <p> <b>Amazon Kinesis</b> - Default 100. Max 10,000.</p> </li> <li> <p> <b>Amazon DynamoDB Streams</b> - Default 100. Max 1,000.</p> </li> <li> <p> <b>Amazon Simple Queue Service</b> - Default 10. Max 10.</p> </li> </ul>"
        },
        "Enabled": {
          "$ref": "#/definitions/Enabled",
          "description": "Disables the event source mapping to pause polling and invocation."
        },
        "FunctionName": {
          "$ref": "#/definitions/FunctionName",
          "description": "<p>The name of the Lambda function.</p> <p class=\"title\"> <b>Name formats</b> </p> <ul> <li> <p> <b>Function name</b> - <code>MyFunction</code>.</p> </li> <li> <p> <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:MyFunction</code>.</p> </li> <li> <p> <b>Version or Alias ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:MyFunction:PROD</code>.</p> </li> <li> <p> <b>Partial ARN</b> - <code>123456789012:function:MyFunction</code>.</p> </li> </ul> <p>The length constraint applies only to the full ARN. If you specify only the function name, it's limited to 64 characters in length.</p>"
        }
      },
      "type": "object"
    },
    "UpdateFunctionCodeRequest": {
      "example": {
        "FunctionName": "myFunction",
        "Publish": true,
        "S3Bucket": "myBucket",
        "S3Key": "myKey",
        "S3ObjectVersion": "1",
        "ZipFile": "fileb://file-path/file.zip"
      },
      "properties": {
        "DryRun": {
          "$ref": "#/definitions/Boolean",
          "description": "This boolean parameter can be used to test your request to AWS Lambda to update the Lambda function and publish a version as an atomic operation. It will do all necessary computation and validation of your code but will not upload it or a publish a version. Each time this operation is invoked, the <code>CodeSha256</code> hash value of the provided code will also be computed and returned in the response."
        },
        "Publish": {
          "$ref": "#/definitions/Boolean",
          "description": "This boolean parameter can be used to request AWS Lambda to update the Lambda function and publish a version as an atomic operation."
        },
        "RevisionId": {
          "$ref": "#/definitions/String",
          "description": "An optional value you can use to ensure you are updating the latest update of the function version or alias. If the <code>RevisionID</code> you pass doesn't match the latest <code>RevisionId</code> of the function or alias, it will fail with an error message, advising you to retrieve the latest function version or alias <code>RevisionID</code> using either using using either <a>GetFunction</a> or <a>GetAlias</a>."
        },
        "S3Bucket": {
          "$ref": "#/definitions/S3Bucket",
          "description": "Amazon S3 bucket name where the .zip file containing your deployment package is stored. This bucket must reside in the same AWS Region where you are creating the Lambda function."
        },
        "S3Key": {
          "$ref": "#/definitions/S3Key",
          "description": "The Amazon S3 object (the deployment package) key name you want to upload."
        },
        "S3ObjectVersion": {
          "$ref": "#/definitions/S3ObjectVersion",
          "description": "The Amazon S3 object (the deployment package) version you want to upload."
        },
        "ZipFile": {
          "$ref": "#/definitions/Blob",
          "description": "The contents of your zip file containing your deployment package. If you are using the web API directly, the contents of the zip file must be base64-encoded. If you are using the AWS SDKs or the AWS CLI, the SDKs or CLI will do the encoding for you. For more information about creating a .zip file, see <a href=\"http://docs.aws.amazon.com/lambda/latest/dg/intro-permission-model.html#lambda-intro-execution-role.html\">Execution Permissions</a>. "
        }
      },
      "type": "object"
    },
    "UpdateFunctionConfigurationRequest": {
      "example": {
        "Description": "",
        "FunctionName": "myFunction",
        "Handler": "index.handler",
        "MemorySize": 128,
        "Role": "arn:aws:iam::123456789012:role/lambda_basic_execution",
        "Runtime": "python2.7",
        "Timeout": 123,
        "VpcConfig": {}
      },
      "properties": {
        "DeadLetterConfig": {
          "$ref": "#/definitions/DeadLetterConfig",
          "description": "A dead letter queue configuration that specifies the queue or topic where Lambda sends asynchronous events when they fail processing. For more information, see <a href=\"http://docs.aws.amazon.com/lambda/latest/dg/dlq.html\">Dead Letter Queues</a>."
        },
        "Description": {
          "$ref": "#/definitions/Description",
          "description": "A short user-defined function description. AWS Lambda does not use this value. Assign a meaningful description as you see fit."
        },
        "Environment": {
          "$ref": "#/definitions/Environment",
          "description": "The parent object that contains your environment's configuration settings."
        },
        "Handler": {
          "$ref": "#/definitions/Handler",
          "description": "The function that Lambda calls to begin executing your function. For Node.js, it is the <code>module-name.export</code> value in your function. "
        },
        "KMSKeyArn": {
          "$ref": "#/definitions/KMSKeyArn",
          "description": "The Amazon Resource Name (ARN) of the KMS key used to encrypt your function's environment variables. If you elect to use the AWS Lambda default service key, pass in an empty string (\"\") for this parameter."
        },
        "Layers": {
          "$ref": "#/definitions/LayerList",
          "description": "A list of <a href=\"http://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html\">function layers</a> to add to the function's execution environment."
        },
        "MemorySize": {
          "$ref": "#/definitions/MemorySize",
          "description": "The amount of memory, in MB, your Lambda function is given. AWS Lambda uses this memory size to infer the amount of CPU allocated to your function. Your function use-case determines your CPU and memory requirements. For example, a database operation might need less memory compared to an image processing function. The default value is 128 MB. The value must be a multiple of 64 MB."
        },
        "RevisionId": {
          "$ref": "#/definitions/String",
          "description": "An optional value you can use to ensure you are updating the latest update of the function version or alias. If the <code>RevisionID</code> you pass doesn't match the latest <code>RevisionId</code> of the function or alias, it will fail with an error message, advising you to retrieve the latest function version or alias <code>RevisionID</code> using either <a>GetFunction</a> or <a>GetAlias</a>."
        },
        "Role": {
          "$ref": "#/definitions/RoleArn",
          "description": "The Amazon Resource Name (ARN) of the IAM role that Lambda will assume when it executes your function."
        },
        "Runtime": {
          "$ref": "#/definitions/Runtime",
          "description": "The runtime version for the function."
        },
        "Timeout": {
          "$ref": "#/definitions/Timeout",
          "description": "The amount of time that Lambda allows a function to run before terminating it. The default is 3 seconds. The maximum allowed value is 900 seconds."
        },
        "TracingConfig": {
          "$ref": "#/definitions/TracingConfig",
          "description": "Set <code>Mode</code> to <code>Active</code> to sample and trace a subset of incoming requests with AWS X-Ray."
        },
        "VpcConfig": {
          "$ref": "#/definitions/VpcConfig",
          "description": "Specify security groups and subnets in a VPC to which your Lambda function needs access."
        }
      },
      "type": "object"
    },
    "Version": {
      "maxLength": 1024,
      "minLength": 1,
      "pattern": "(\\$LATEST|[0-9]+)",
      "type": "string"
    },
    "VpcConfig": {
      "description": "The VPC security groups and subnets attached to a Lambda function.",
      "properties": {
        "SecurityGroupIds": {
          "$ref": "#/definitions/SecurityGroupIds",
          "description": "A list of VPC security groups IDs."
        },
        "SubnetIds": {
          "$ref": "#/definitions/SubnetIds",
          "description": "A list of VPC subnet IDs."
        }
      },
      "type": "object"
    },
    "VpcConfigResponse": {
      "description": "The VPC security groups and subnets attached to a Lambda function.",
      "properties": {
        "SecurityGroupIds": {
          "$ref": "#/definitions/SecurityGroupIds",
          "description": "A list of VPC security groups IDs."
        },
        "SubnetIds": {
          "$ref": "#/definitions/SubnetIds",
          "description": "A list of VPC subnet IDs."
        },
        "VpcId": {
          "$ref": "#/definitions/VpcId",
          "description": "The ID of the VPC."
        }
      },
      "type": "object"
    },
    "VpcId": {
      "type": "string"
    },
    "Weight": {
      "format": "double",
      "maximum": 1,
      "minimum": 0,
      "type": "number"
    }
  }
}
