{
  "swagger": "2.0",
  "schemes": [
    "https",
    "http"
  ],
  "host": "mediapackage.amazonaws.com",
  "basePath": "/",
  "x-hasEquivalentPaths": true,
  "info": {
    "contact": {
      "email": "mike.ralphson@gmail.com",
      "name": "Mike Ralphson",
      "url": "https://github.com/mermade/aws2openapi",
      "x-twitter": "PermittedSoc"
    },
    "description": "AWS Elemental MediaPackage",
    "license": {
      "name": "Apache 2.0 License",
      "url": "http://www.apache.org/licenses/"
    },
    "termsOfService": "https://aws.amazon.com/service-terms/",
    "title": "AWS Elemental MediaPackage",
    "version": "2017-10-12",
    "x-apiClientRegistration": {
      "url": "https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct"
    },
    "x-apisguru-categories": [
      "cloud"
    ],
    "x-logo": {
      "backgroundColor": "#FFFFFF",
      "url": "https://api.apis.guru/v2/cache/logo/https_twitter.com_awscloud_profile_image.jpeg"
    },
    "x-origin": [
      {
        "contentType": "application/json",
        "converter": {
          "url": "https://github.com/mermade/aws2openapi",
          "version": "1.0.0"
        },
        "url": "https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/mediapackage-2017-10-12.normal.json",
        "x-apisguru-direct": true
      }
    ],
    "x-preferred": true,
    "x-providerName": "amazonaws.com",
    "x-release": "v4",
    "x-serviceName": "mediapackage"
  },
  "externalDocs": {
    "description": "Amazon Web Services documentation",
    "url": "https://aws.amazon.com/mediapackage/"
  },
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "securityDefinitions": {
    "hmac": {
      "description": "Amazon Signature authorization v4",
      "in": "header",
      "name": "Authorization",
      "type": "apiKey",
      "x-amazon-apigateway-authtype": "awsSigv4"
    }
  },
  "security": [
    {
      "hmac": []
    }
  ],
  "parameters": {
    "Action": {
      "in": "query",
      "name": "Action",
      "required": true,
      "type": "string"
    },
    "Version": {
      "in": "query",
      "name": "Version",
      "required": true,
      "type": "string"
    },
    "X-Amz-Algorithm": {
      "in": "header",
      "name": "X-Amz-Algorithm",
      "required": false,
      "type": "string"
    },
    "X-Amz-Content-Sha256": {
      "in": "header",
      "name": "X-Amz-Content-Sha256",
      "required": false,
      "type": "string"
    },
    "X-Amz-Credential": {
      "in": "header",
      "name": "X-Amz-Credential",
      "required": false,
      "type": "string"
    },
    "X-Amz-Date": {
      "in": "header",
      "name": "X-Amz-Date",
      "required": false,
      "type": "string"
    },
    "X-Amz-Security-Token": {
      "in": "header",
      "name": "X-Amz-Security-Token",
      "required": false,
      "type": "string"
    },
    "X-Amz-Signature": {
      "in": "header",
      "name": "X-Amz-Signature",
      "required": false,
      "type": "string"
    },
    "X-Amz-SignedHeaders": {
      "in": "header",
      "name": "X-Amz-SignedHeaders",
      "required": false,
      "type": "string"
    }
  },
  "paths": {
    "/channels": {
      "get": {
        "description": "Returns a collection of Channels.",
        "operationId": "ListChannels",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListChannelsRequest"
            }
          },
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListChannelsResponse"
            }
          },
          "480": {
            "description": "UnprocessableEntityException",
            "schema": {
              "$ref": "#/definitions/UnprocessableEntityException"
            }
          },
          "481": {
            "description": "InternalServerErrorException",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorException"
            }
          },
          "482": {
            "description": "ForbiddenException",
            "schema": {
              "$ref": "#/definitions/ForbiddenException"
            }
          },
          "483": {
            "description": "NotFoundException",
            "schema": {
              "$ref": "#/definitions/NotFoundException"
            }
          },
          "484": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          },
          "485": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Creates a new Channel.",
        "operationId": "CreateChannel",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateChannelRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateChannelResponse"
            }
          },
          "480": {
            "description": "UnprocessableEntityException",
            "schema": {
              "$ref": "#/definitions/UnprocessableEntityException"
            }
          },
          "481": {
            "description": "InternalServerErrorException",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorException"
            }
          },
          "482": {
            "description": "ForbiddenException",
            "schema": {
              "$ref": "#/definitions/ForbiddenException"
            }
          },
          "483": {
            "description": "NotFoundException",
            "schema": {
              "$ref": "#/definitions/NotFoundException"
            }
          },
          "484": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          },
          "485": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          }
        }
      }
    },
    "/channels/{id}": {
      "delete": {
        "description": "Deletes an existing Channel.",
        "operationId": "DeleteChannel",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteChannelRequest"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteChannelResponse"
            }
          },
          "480": {
            "description": "UnprocessableEntityException",
            "schema": {
              "$ref": "#/definitions/UnprocessableEntityException"
            }
          },
          "481": {
            "description": "InternalServerErrorException",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorException"
            }
          },
          "482": {
            "description": "ForbiddenException",
            "schema": {
              "$ref": "#/definitions/ForbiddenException"
            }
          },
          "483": {
            "description": "NotFoundException",
            "schema": {
              "$ref": "#/definitions/NotFoundException"
            }
          },
          "484": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          },
          "485": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          }
        }
      },
      "get": {
        "description": "Gets details about a Channel.",
        "operationId": "DescribeChannel",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DescribeChannelRequest"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeChannelResponse"
            }
          },
          "480": {
            "description": "UnprocessableEntityException",
            "schema": {
              "$ref": "#/definitions/UnprocessableEntityException"
            }
          },
          "481": {
            "description": "InternalServerErrorException",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorException"
            }
          },
          "482": {
            "description": "ForbiddenException",
            "schema": {
              "$ref": "#/definitions/ForbiddenException"
            }
          },
          "483": {
            "description": "NotFoundException",
            "schema": {
              "$ref": "#/definitions/NotFoundException"
            }
          },
          "484": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          },
          "485": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "put": {
        "description": "Updates an existing Channel.",
        "operationId": "UpdateChannel",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateChannelRequest"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdateChannelResponse"
            }
          },
          "480": {
            "description": "UnprocessableEntityException",
            "schema": {
              "$ref": "#/definitions/UnprocessableEntityException"
            }
          },
          "481": {
            "description": "InternalServerErrorException",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorException"
            }
          },
          "482": {
            "description": "ForbiddenException",
            "schema": {
              "$ref": "#/definitions/ForbiddenException"
            }
          },
          "483": {
            "description": "NotFoundException",
            "schema": {
              "$ref": "#/definitions/NotFoundException"
            }
          },
          "484": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          },
          "485": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          }
        }
      }
    },
    "/channels/{id}/credentials": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "put": {
        "description": "Changes the Channel's first IngestEndpoint's username and password. WARNING - This API is deprecated. Please use RotateIngestEndpointCredentials instead",
        "operationId": "RotateChannelCredentials",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RotateChannelCredentialsRequest"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/RotateChannelCredentialsResponse"
            }
          },
          "480": {
            "description": "UnprocessableEntityException",
            "schema": {
              "$ref": "#/definitions/UnprocessableEntityException"
            }
          },
          "481": {
            "description": "InternalServerErrorException",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorException"
            }
          },
          "482": {
            "description": "ForbiddenException",
            "schema": {
              "$ref": "#/definitions/ForbiddenException"
            }
          },
          "483": {
            "description": "NotFoundException",
            "schema": {
              "$ref": "#/definitions/NotFoundException"
            }
          },
          "484": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          },
          "485": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          }
        }
      }
    },
    "/channels/{id}/ingest_endpoints/{ingest_endpoint_id}/credentials": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "put": {
        "description": "Rotate the IngestEndpoint's username and password, as specified by the IngestEndpoint's id.",
        "operationId": "RotateIngestEndpointCredentials",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RotateIngestEndpointCredentialsRequest"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "ingest_endpoint_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/RotateIngestEndpointCredentialsResponse"
            }
          },
          "480": {
            "description": "UnprocessableEntityException",
            "schema": {
              "$ref": "#/definitions/UnprocessableEntityException"
            }
          },
          "481": {
            "description": "InternalServerErrorException",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorException"
            }
          },
          "482": {
            "description": "ForbiddenException",
            "schema": {
              "$ref": "#/definitions/ForbiddenException"
            }
          },
          "483": {
            "description": "NotFoundException",
            "schema": {
              "$ref": "#/definitions/NotFoundException"
            }
          },
          "484": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          },
          "485": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          }
        }
      }
    },
    "/origin_endpoints": {
      "get": {
        "description": "Returns a collection of OriginEndpoint records.",
        "operationId": "ListOriginEndpoints",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListOriginEndpointsRequest"
            }
          },
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListOriginEndpointsResponse"
            }
          },
          "480": {
            "description": "UnprocessableEntityException",
            "schema": {
              "$ref": "#/definitions/UnprocessableEntityException"
            }
          },
          "481": {
            "description": "InternalServerErrorException",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorException"
            }
          },
          "482": {
            "description": "ForbiddenException",
            "schema": {
              "$ref": "#/definitions/ForbiddenException"
            }
          },
          "483": {
            "description": "NotFoundException",
            "schema": {
              "$ref": "#/definitions/NotFoundException"
            }
          },
          "484": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          },
          "485": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Creates a new OriginEndpoint record.",
        "operationId": "CreateOriginEndpoint",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateOriginEndpointRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateOriginEndpointResponse"
            }
          },
          "480": {
            "description": "UnprocessableEntityException",
            "schema": {
              "$ref": "#/definitions/UnprocessableEntityException"
            }
          },
          "481": {
            "description": "InternalServerErrorException",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorException"
            }
          },
          "482": {
            "description": "ForbiddenException",
            "schema": {
              "$ref": "#/definitions/ForbiddenException"
            }
          },
          "483": {
            "description": "NotFoundException",
            "schema": {
              "$ref": "#/definitions/NotFoundException"
            }
          },
          "484": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          },
          "485": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          }
        }
      }
    },
    "/origin_endpoints/{id}": {
      "delete": {
        "description": "Deletes an existing OriginEndpoint.",
        "operationId": "DeleteOriginEndpoint",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteOriginEndpointRequest"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteOriginEndpointResponse"
            }
          },
          "480": {
            "description": "UnprocessableEntityException",
            "schema": {
              "$ref": "#/definitions/UnprocessableEntityException"
            }
          },
          "481": {
            "description": "InternalServerErrorException",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorException"
            }
          },
          "482": {
            "description": "ForbiddenException",
            "schema": {
              "$ref": "#/definitions/ForbiddenException"
            }
          },
          "483": {
            "description": "NotFoundException",
            "schema": {
              "$ref": "#/definitions/NotFoundException"
            }
          },
          "484": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          },
          "485": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          }
        }
      },
      "get": {
        "description": "Gets details about an existing OriginEndpoint.",
        "operationId": "DescribeOriginEndpoint",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DescribeOriginEndpointRequest"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeOriginEndpointResponse"
            }
          },
          "480": {
            "description": "UnprocessableEntityException",
            "schema": {
              "$ref": "#/definitions/UnprocessableEntityException"
            }
          },
          "481": {
            "description": "InternalServerErrorException",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorException"
            }
          },
          "482": {
            "description": "ForbiddenException",
            "schema": {
              "$ref": "#/definitions/ForbiddenException"
            }
          },
          "483": {
            "description": "NotFoundException",
            "schema": {
              "$ref": "#/definitions/NotFoundException"
            }
          },
          "484": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          },
          "485": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "put": {
        "description": "Updates an existing OriginEndpoint.",
        "operationId": "UpdateOriginEndpoint",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateOriginEndpointRequest"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdateOriginEndpointResponse"
            }
          },
          "480": {
            "description": "UnprocessableEntityException",
            "schema": {
              "$ref": "#/definitions/UnprocessableEntityException"
            }
          },
          "481": {
            "description": "InternalServerErrorException",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorException"
            }
          },
          "482": {
            "description": "ForbiddenException",
            "schema": {
              "$ref": "#/definitions/ForbiddenException"
            }
          },
          "483": {
            "description": "NotFoundException",
            "schema": {
              "$ref": "#/definitions/NotFoundException"
            }
          },
          "484": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          },
          "485": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "AdMarkers": {
      "enum": [
        "NONE",
        "SCTE35_ENHANCED",
        "PASSTHROUGH"
      ],
      "type": "string"
    },
    "Channel": {
      "description": "A Channel resource configuration.",
      "properties": {
        "Arn": {
          "$ref": "#/definitions/__string",
          "description": "The Amazon Resource Name (ARN) assigned to the Channel."
        },
        "Description": {
          "$ref": "#/definitions/__string",
          "description": "A short text description of the Channel."
        },
        "HlsIngest": {
          "$ref": "#/definitions/HlsIngest"
        },
        "Id": {
          "$ref": "#/definitions/__string",
          "description": "The ID of the Channel."
        }
      },
      "type": "object"
    },
    "CmafEncryption": {
      "description": "A Common Media Application Format (CMAF) encryption configuration.",
      "properties": {
        "KeyRotationIntervalSeconds": {
          "$ref": "#/definitions/__integer",
          "description": "Time (in seconds) between each encryption key rotation."
        },
        "SpekeKeyProvider": {
          "$ref": "#/definitions/SpekeKeyProvider"
        }
      },
      "required": [
        "SpekeKeyProvider"
      ],
      "type": "object"
    },
    "CmafPackage": {
      "description": "A Common Media Application Format (CMAF) packaging configuration.",
      "properties": {
        "Encryption": {
          "$ref": "#/definitions/CmafEncryption"
        },
        "HlsManifests": {
          "$ref": "#/definitions/__listOfHlsManifest",
          "description": "A list of HLS manifest configurations"
        },
        "SegmentDurationSeconds": {
          "$ref": "#/definitions/__integer",
          "description": "Duration (in seconds) of each segment. Actual segments will be\nrounded to the nearest multiple of the source segment duration.\n"
        },
        "SegmentPrefix": {
          "$ref": "#/definitions/__string",
          "description": "An optional custom string that is prepended to the name of each segment. If not specified, it defaults to the ChannelId."
        },
        "StreamSelection": {
          "$ref": "#/definitions/StreamSelection"
        }
      },
      "type": "object"
    },
    "CmafPackageCreateOrUpdateParameters": {
      "description": "A Common Media Application Format (CMAF) packaging configuration.",
      "properties": {
        "Encryption": {
          "$ref": "#/definitions/CmafEncryption"
        },
        "HlsManifests": {
          "$ref": "#/definitions/__listOfHlsManifestCreateOrUpdateParameters",
          "description": "A list of HLS manifest configurations"
        },
        "SegmentDurationSeconds": {
          "$ref": "#/definitions/__integer",
          "description": "Duration (in seconds) of each segment. Actual segments will be\nrounded to the nearest multiple of the source segment duration.\n"
        },
        "SegmentPrefix": {
          "$ref": "#/definitions/__string",
          "description": "An optional custom string that is prepended to the name of each segment. If not specified, it defaults to the ChannelId."
        },
        "StreamSelection": {
          "$ref": "#/definitions/StreamSelection"
        }
      },
      "type": "object"
    },
    "CreateChannelRequest": {
      "description": "A new Channel configuration.",
      "properties": {
        "Description": {
          "$ref": "#/definitions/__string",
          "description": "A short text description of the Channel."
        },
        "Id": {
          "$ref": "#/definitions/__string",
          "description": "The ID of the Channel. The ID must be unique within the region and it\ncannot be changed after a Channel is created.\n"
        }
      },
      "required": [
        "Id"
      ],
      "type": "object"
    },
    "CreateChannelResponse": {
      "properties": {
        "Arn": {
          "$ref": "#/definitions/__string",
          "description": "The Amazon Resource Name (ARN) assigned to the Channel."
        },
        "Description": {
          "$ref": "#/definitions/__string",
          "description": "A short text description of the Channel."
        },
        "HlsIngest": {
          "$ref": "#/definitions/HlsIngest"
        },
        "Id": {
          "$ref": "#/definitions/__string",
          "description": "The ID of the Channel."
        }
      },
      "type": "object"
    },
    "CreateOriginEndpointRequest": {
      "description": "Configuration parameters used to create a new OriginEndpoint.",
      "properties": {
        "ChannelId": {
          "$ref": "#/definitions/__string",
          "description": "The ID of the Channel that the OriginEndpoint will be associated with.\nThis cannot be changed after the OriginEndpoint is created.\n"
        },
        "CmafPackage": {
          "$ref": "#/definitions/CmafPackageCreateOrUpdateParameters"
        },
        "DashPackage": {
          "$ref": "#/definitions/DashPackage"
        },
        "Description": {
          "$ref": "#/definitions/__string",
          "description": "A short text description of the OriginEndpoint."
        },
        "HlsPackage": {
          "$ref": "#/definitions/HlsPackage"
        },
        "Id": {
          "$ref": "#/definitions/__string",
          "description": "The ID of the OriginEndpoint.  The ID must be unique within the region\nand it cannot be changed after the OriginEndpoint is created.\n"
        },
        "ManifestName": {
          "$ref": "#/definitions/__string",
          "description": "A short string that will be used as the filename of the OriginEndpoint URL (defaults to \"index\")."
        },
        "MssPackage": {
          "$ref": "#/definitions/MssPackage"
        },
        "StartoverWindowSeconds": {
          "$ref": "#/definitions/__integer",
          "description": "Maximum duration (seconds) of content to retain for startover playback.\nIf not specified, startover playback will be disabled for the OriginEndpoint.\n"
        },
        "TimeDelaySeconds": {
          "$ref": "#/definitions/__integer",
          "description": "Amount of delay (seconds) to enforce on the playback of live content.\nIf not specified, there will be no time delay in effect for the OriginEndpoint.\n"
        },
        "Whitelist": {
          "$ref": "#/definitions/__listOf__string",
          "description": "A list of source IP CIDR blocks that will be allowed to access the OriginEndpoint."
        }
      },
      "required": [
        "ChannelId",
        "Id"
      ],
      "type": "object"
    },
    "CreateOriginEndpointResponse": {
      "properties": {
        "Arn": {
          "$ref": "#/definitions/__string",
          "description": "The Amazon Resource Name (ARN) assigned to the OriginEndpoint."
        },
        "ChannelId": {
          "$ref": "#/definitions/__string",
          "description": "The ID of the Channel the OriginEndpoint is associated with."
        },
        "CmafPackage": {
          "$ref": "#/definitions/CmafPackage"
        },
        "DashPackage": {
          "$ref": "#/definitions/DashPackage"
        },
        "Description": {
          "$ref": "#/definitions/__string",
          "description": "A short text description of the OriginEndpoint."
        },
        "HlsPackage": {
          "$ref": "#/definitions/HlsPackage"
        },
        "Id": {
          "$ref": "#/definitions/__string",
          "description": "The ID of the OriginEndpoint."
        },
        "ManifestName": {
          "$ref": "#/definitions/__string",
          "description": "A short string appended to the end of the OriginEndpoint URL."
        },
        "MssPackage": {
          "$ref": "#/definitions/MssPackage"
        },
        "StartoverWindowSeconds": {
          "$ref": "#/definitions/__integer",
          "description": "Maximum duration (seconds) of content to retain for startover playback.\nIf not specified, startover playback will be disabled for the OriginEndpoint.\n"
        },
        "TimeDelaySeconds": {
          "$ref": "#/definitions/__integer",
          "description": "Amount of delay (seconds) to enforce on the playback of live content.\nIf not specified, there will be no time delay in effect for the OriginEndpoint.\n"
        },
        "Url": {
          "$ref": "#/definitions/__string",
          "description": "The URL of the packaged OriginEndpoint for consumption."
        },
        "Whitelist": {
          "$ref": "#/definitions/__listOf__string",
          "description": "A list of source IP CIDR blocks that will be allowed to access the OriginEndpoint."
        }
      },
      "type": "object"
    },
    "DashEncryption": {
      "description": "A Dynamic Adaptive Streaming over HTTP (DASH) encryption configuration.",
      "properties": {
        "KeyRotationIntervalSeconds": {
          "$ref": "#/definitions/__integer",
          "description": "Time (in seconds) between each encryption key rotation."
        },
        "SpekeKeyProvider": {
          "$ref": "#/definitions/SpekeKeyProvider"
        }
      },
      "required": [
        "SpekeKeyProvider"
      ],
      "type": "object"
    },
    "DashPackage": {
      "description": "A Dynamic Adaptive Streaming over HTTP (DASH) packaging configuration.",
      "properties": {
        "Encryption": {
          "$ref": "#/definitions/DashEncryption"
        },
        "ManifestWindowSeconds": {
          "$ref": "#/definitions/__integer",
          "description": "Time window (in seconds) contained in each manifest."
        },
        "MinBufferTimeSeconds": {
          "$ref": "#/definitions/__integer",
          "description": "Minimum duration (in seconds) that a player will buffer media before starting the presentation."
        },
        "MinUpdatePeriodSeconds": {
          "$ref": "#/definitions/__integer",
          "description": "Minimum duration (in seconds) between potential changes to the Dynamic Adaptive Streaming over HTTP (DASH) Media Presentation Description (MPD)."
        },
        "PeriodTriggers": {
          "$ref": "#/definitions/__listOf__PeriodTriggersElement",
          "description": "A list of triggers that controls when the outgoing Dynamic Adaptive Streaming over HTTP (DASH)\nMedia Presentation Description (MPD) will be partitioned into multiple periods. If empty, the content will not\nbe partitioned into more than one period. If the list contains \"ADS\", new periods will be created where\nthe Channel source contains SCTE-35 ad markers.\n"
        },
        "Profile": {
          "$ref": "#/definitions/Profile",
          "description": "The Dynamic Adaptive Streaming over HTTP (DASH) profile type.  When set to \"HBBTV_1_5\", HbbTV 1.5 compliant output is enabled."
        },
        "SegmentDurationSeconds": {
          "$ref": "#/definitions/__integer",
          "description": "Duration (in seconds) of each segment. Actual segments will be\nrounded to the nearest multiple of the source segment duration.\n"
        },
        "StreamSelection": {
          "$ref": "#/definitions/StreamSelection"
        },
        "SuggestedPresentationDelaySeconds": {
          "$ref": "#/definitions/__integer",
          "description": "Duration (in seconds) to delay live content before presentation."
        }
      },
      "type": "object"
    },
    "DeleteChannelRequest": {
      "properties": {},
      "type": "object"
    },
    "DeleteChannelResponse": {
      "properties": {},
      "type": "object"
    },
    "DeleteOriginEndpointRequest": {
      "properties": {},
      "type": "object"
    },
    "DeleteOriginEndpointResponse": {
      "properties": {},
      "type": "object"
    },
    "DescribeChannelRequest": {
      "properties": {},
      "type": "object"
    },
    "DescribeChannelResponse": {
      "properties": {
        "Arn": {
          "$ref": "#/definitions/__string",
          "description": "The Amazon Resource Name (ARN) assigned to the Channel."
        },
        "Description": {
          "$ref": "#/definitions/__string",
          "description": "A short text description of the Channel."
        },
        "HlsIngest": {
          "$ref": "#/definitions/HlsIngest"
        },
        "Id": {
          "$ref": "#/definitions/__string",
          "description": "The ID of the Channel."
        }
      },
      "type": "object"
    },
    "DescribeOriginEndpointRequest": {
      "properties": {},
      "type": "object"
    },
    "DescribeOriginEndpointResponse": {
      "properties": {
        "Arn": {
          "$ref": "#/definitions/__string",
          "description": "The Amazon Resource Name (ARN) assigned to the OriginEndpoint."
        },
        "ChannelId": {
          "$ref": "#/definitions/__string",
          "description": "The ID of the Channel the OriginEndpoint is associated with."
        },
        "CmafPackage": {
          "$ref": "#/definitions/CmafPackage"
        },
        "DashPackage": {
          "$ref": "#/definitions/DashPackage"
        },
        "Description": {
          "$ref": "#/definitions/__string",
          "description": "A short text description of the OriginEndpoint."
        },
        "HlsPackage": {
          "$ref": "#/definitions/HlsPackage"
        },
        "Id": {
          "$ref": "#/definitions/__string",
          "description": "The ID of the OriginEndpoint."
        },
        "ManifestName": {
          "$ref": "#/definitions/__string",
          "description": "A short string appended to the end of the OriginEndpoint URL."
        },
        "MssPackage": {
          "$ref": "#/definitions/MssPackage"
        },
        "StartoverWindowSeconds": {
          "$ref": "#/definitions/__integer",
          "description": "Maximum duration (seconds) of content to retain for startover playback.\nIf not specified, startover playback will be disabled for the OriginEndpoint.\n"
        },
        "TimeDelaySeconds": {
          "$ref": "#/definitions/__integer",
          "description": "Amount of delay (seconds) to enforce on the playback of live content.\nIf not specified, there will be no time delay in effect for the OriginEndpoint.\n"
        },
        "Url": {
          "$ref": "#/definitions/__string",
          "description": "The URL of the packaged OriginEndpoint for consumption."
        },
        "Whitelist": {
          "$ref": "#/definitions/__listOf__string",
          "description": "A list of source IP CIDR blocks that will be allowed to access the OriginEndpoint."
        }
      },
      "type": "object"
    },
    "EncryptionMethod": {
      "enum": [
        "AES_128",
        "SAMPLE_AES"
      ],
      "type": "string"
    },
    "ForbiddenException": {},
    "HlsEncryption": {
      "description": "An HTTP Live Streaming (HLS) encryption configuration.",
      "properties": {
        "ConstantInitializationVector": {
          "$ref": "#/definitions/__string",
          "description": "A constant initialization vector for encryption (optional).\nWhen not specified the initialization vector will be periodically rotated.\n"
        },
        "EncryptionMethod": {
          "$ref": "#/definitions/EncryptionMethod",
          "description": "The encryption method to use."
        },
        "KeyRotationIntervalSeconds": {
          "$ref": "#/definitions/__integer",
          "description": "Interval (in seconds) between each encryption key rotation."
        },
        "RepeatExtXKey": {
          "$ref": "#/definitions/__boolean",
          "description": "When enabled, the EXT-X-KEY tag will be repeated in output manifests."
        },
        "SpekeKeyProvider": {
          "$ref": "#/definitions/SpekeKeyProvider"
        }
      },
      "required": [
        "SpekeKeyProvider"
      ],
      "type": "object"
    },
    "HlsIngest": {
      "description": "An HTTP Live Streaming (HLS) ingest resource configuration.",
      "properties": {
        "IngestEndpoints": {
          "$ref": "#/definitions/__listOfIngestEndpoint",
          "description": "A list of endpoints to which the source stream should be sent."
        }
      },
      "type": "object"
    },
    "HlsManifest": {
      "description": "A HTTP Live Streaming (HLS) manifest configuration.",
      "properties": {
        "AdMarkers": {
          "$ref": "#/definitions/AdMarkers",
          "description": "This setting controls how ad markers are included in the packaged OriginEndpoint.\n\"NONE\" will omit all SCTE-35 ad markers from the output.\n\"PASSTHROUGH\" causes the manifest to contain a copy of the SCTE-35 ad\nmarkers (comments) taken directly from the input HTTP Live Streaming (HLS) manifest.\n\"SCTE35_ENHANCED\" generates ad markers and blackout tags based on SCTE-35\nmessages in the input source.\n"
        },
        "Id": {
          "$ref": "#/definitions/__string",
          "description": "The ID of the manifest. The ID must be unique within the OriginEndpoint and it cannot be changed after it is created."
        },
        "IncludeIframeOnlyStream": {
          "$ref": "#/definitions/__boolean",
          "description": "When enabled, an I-Frame only stream will be included in the output."
        },
        "ManifestName": {
          "$ref": "#/definitions/__string",
          "description": "An optional short string appended to the end of the OriginEndpoint URL. If not specified, defaults to the manifestName for the OriginEndpoint."
        },
        "PlaylistType": {
          "$ref": "#/definitions/PlaylistType",
          "description": "The HTTP Live Streaming (HLS) playlist type.\nWhen either \"EVENT\" or \"VOD\" is specified, a corresponding EXT-X-PLAYLIST-TYPE\nentry will be included in the media playlist.\n"
        },
        "PlaylistWindowSeconds": {
          "$ref": "#/definitions/__integer",
          "description": "Time window (in seconds) contained in each parent manifest."
        },
        "ProgramDateTimeIntervalSeconds": {
          "$ref": "#/definitions/__integer",
          "description": "The interval (in seconds) between each EXT-X-PROGRAM-DATE-TIME tag\ninserted into manifests. Additionally, when an interval is specified\nID3Timed Metadata messages will be generated every 5 seconds using the\ningest time of the content.\nIf the interval is not specified, or set to 0, then\nno EXT-X-PROGRAM-DATE-TIME tags will be inserted into manifests and no\nID3Timed Metadata messages will be generated. Note that irrespective\nof this parameter, if any ID3 Timed Metadata is found in HTTP Live Streaming (HLS) input,\nit will be passed through to HLS output.\n"
        },
        "Url": {
          "$ref": "#/definitions/__string",
          "description": "The URL of the packaged OriginEndpoint for consumption."
        }
      },
      "required": [
        "Id"
      ],
      "type": "object"
    },
    "HlsManifestCreateOrUpdateParameters": {
      "description": "A HTTP Live Streaming (HLS) manifest configuration.",
      "properties": {
        "AdMarkers": {
          "$ref": "#/definitions/AdMarkers",
          "description": "This setting controls how ad markers are included in the packaged OriginEndpoint.\n\"NONE\" will omit all SCTE-35 ad markers from the output.\n\"PASSTHROUGH\" causes the manifest to contain a copy of the SCTE-35 ad\nmarkers (comments) taken directly from the input HTTP Live Streaming (HLS) manifest.\n\"SCTE35_ENHANCED\" generates ad markers and blackout tags based on SCTE-35\nmessages in the input source.\n"
        },
        "Id": {
          "$ref": "#/definitions/__string",
          "description": "The ID of the manifest. The ID must be unique within the OriginEndpoint and it cannot be changed after it is created."
        },
        "IncludeIframeOnlyStream": {
          "$ref": "#/definitions/__boolean",
          "description": "When enabled, an I-Frame only stream will be included in the output."
        },
        "ManifestName": {
          "$ref": "#/definitions/__string",
          "description": "An optional short string appended to the end of the OriginEndpoint URL. If not specified, defaults to the manifestName for the OriginEndpoint."
        },
        "PlaylistType": {
          "$ref": "#/definitions/PlaylistType",
          "description": "The HTTP Live Streaming (HLS) playlist type.\nWhen either \"EVENT\" or \"VOD\" is specified, a corresponding EXT-X-PLAYLIST-TYPE\nentry will be included in the media playlist.\n"
        },
        "PlaylistWindowSeconds": {
          "$ref": "#/definitions/__integer",
          "description": "Time window (in seconds) contained in each parent manifest."
        },
        "ProgramDateTimeIntervalSeconds": {
          "$ref": "#/definitions/__integer",
          "description": "The interval (in seconds) between each EXT-X-PROGRAM-DATE-TIME tag\ninserted into manifests. Additionally, when an interval is specified\nID3Timed Metadata messages will be generated every 5 seconds using the\ningest time of the content.\nIf the interval is not specified, or set to 0, then\nno EXT-X-PROGRAM-DATE-TIME tags will be inserted into manifests and no\nID3Timed Metadata messages will be generated. Note that irrespective\nof this parameter, if any ID3 Timed Metadata is found in HTTP Live Streaming (HLS) input,\nit will be passed through to HLS output.\n"
        }
      },
      "required": [
        "Id"
      ],
      "type": "object"
    },
    "HlsPackage": {
      "description": "An HTTP Live Streaming (HLS) packaging configuration.",
      "properties": {
        "AdMarkers": {
          "$ref": "#/definitions/AdMarkers",
          "description": "This setting controls how ad markers are included in the packaged OriginEndpoint.\n\"NONE\" will omit all SCTE-35 ad markers from the output.\n\"PASSTHROUGH\" causes the manifest to contain a copy of the SCTE-35 ad\nmarkers (comments) taken directly from the input HTTP Live Streaming (HLS) manifest.\n\"SCTE35_ENHANCED\" generates ad markers and blackout tags based on SCTE-35\nmessages in the input source.\n"
        },
        "Encryption": {
          "$ref": "#/definitions/HlsEncryption"
        },
        "IncludeIframeOnlyStream": {
          "$ref": "#/definitions/__boolean",
          "description": "When enabled, an I-Frame only stream will be included in the output."
        },
        "PlaylistType": {
          "$ref": "#/definitions/PlaylistType",
          "description": "The HTTP Live Streaming (HLS) playlist type.\nWhen either \"EVENT\" or \"VOD\" is specified, a corresponding EXT-X-PLAYLIST-TYPE\nentry will be included in the media playlist.\n"
        },
        "PlaylistWindowSeconds": {
          "$ref": "#/definitions/__integer",
          "description": "Time window (in seconds) contained in each parent manifest."
        },
        "ProgramDateTimeIntervalSeconds": {
          "$ref": "#/definitions/__integer",
          "description": "The interval (in seconds) between each EXT-X-PROGRAM-DATE-TIME tag\ninserted into manifests. Additionally, when an interval is specified\nID3Timed Metadata messages will be generated every 5 seconds using the\ningest time of the content.\nIf the interval is not specified, or set to 0, then\nno EXT-X-PROGRAM-DATE-TIME tags will be inserted into manifests and no\nID3Timed Metadata messages will be generated. Note that irrespective\nof this parameter, if any ID3 Timed Metadata is found in HTTP Live Streaming (HLS) input,\nit will be passed through to HLS output.\n"
        },
        "SegmentDurationSeconds": {
          "$ref": "#/definitions/__integer",
          "description": "Duration (in seconds) of each fragment. Actual fragments will be\nrounded to the nearest multiple of the source fragment duration.\n"
        },
        "StreamSelection": {
          "$ref": "#/definitions/StreamSelection"
        },
        "UseAudioRenditionGroup": {
          "$ref": "#/definitions/__boolean",
          "description": "When enabled, audio streams will be placed in rendition groups in the output."
        }
      },
      "type": "object"
    },
    "IngestEndpoint": {
      "description": "An endpoint for ingesting source content for a Channel.",
      "properties": {
        "Id": {
          "$ref": "#/definitions/__string",
          "description": "The system generated unique identifier for the IngestEndpoint"
        },
        "Password": {
          "$ref": "#/definitions/__string",
          "description": "The system generated password for ingest authentication."
        },
        "Url": {
          "$ref": "#/definitions/__string",
          "description": "The ingest URL to which the source stream should be sent."
        },
        "Username": {
          "$ref": "#/definitions/__string",
          "description": "The system generated username for ingest authentication."
        }
      },
      "type": "object"
    },
    "InternalServerErrorException": {},
    "ListChannelsRequest": {
      "properties": {},
      "type": "object"
    },
    "ListChannelsResponse": {
      "properties": {
        "Channels": {
          "$ref": "#/definitions/__listOfChannel",
          "description": "A list of Channel records."
        },
        "NextToken": {
          "$ref": "#/definitions/__string",
          "description": "A token that can be used to resume pagination from the end of the collection."
        }
      },
      "type": "object"
    },
    "ListOriginEndpointsRequest": {
      "properties": {},
      "type": "object"
    },
    "ListOriginEndpointsResponse": {
      "properties": {
        "NextToken": {
          "$ref": "#/definitions/__string",
          "description": "A token that can be used to resume pagination from the end of the collection."
        },
        "OriginEndpoints": {
          "$ref": "#/definitions/__listOfOriginEndpoint",
          "description": "A list of OriginEndpoint records."
        }
      },
      "type": "object"
    },
    "MaxResults": {
      "maximum": 1000,
      "minimum": 1,
      "type": "integer"
    },
    "MssEncryption": {
      "description": "A Microsoft Smooth Streaming (MSS) encryption configuration.",
      "properties": {
        "SpekeKeyProvider": {
          "$ref": "#/definitions/SpekeKeyProvider"
        }
      },
      "required": [
        "SpekeKeyProvider"
      ],
      "type": "object"
    },
    "MssPackage": {
      "description": "A Microsoft Smooth Streaming (MSS) packaging configuration.",
      "properties": {
        "Encryption": {
          "$ref": "#/definitions/MssEncryption"
        },
        "ManifestWindowSeconds": {
          "$ref": "#/definitions/__integer",
          "description": "The time window (in seconds) contained in each manifest."
        },
        "SegmentDurationSeconds": {
          "$ref": "#/definitions/__integer",
          "description": "The duration (in seconds) of each segment."
        },
        "StreamSelection": {
          "$ref": "#/definitions/StreamSelection"
        }
      },
      "type": "object"
    },
    "NotFoundException": {},
    "OriginEndpoint": {
      "description": "An OriginEndpoint resource configuration.",
      "properties": {
        "Arn": {
          "$ref": "#/definitions/__string",
          "description": "The Amazon Resource Name (ARN) assigned to the OriginEndpoint."
        },
        "ChannelId": {
          "$ref": "#/definitions/__string",
          "description": "The ID of the Channel the OriginEndpoint is associated with."
        },
        "CmafPackage": {
          "$ref": "#/definitions/CmafPackage"
        },
        "DashPackage": {
          "$ref": "#/definitions/DashPackage"
        },
        "Description": {
          "$ref": "#/definitions/__string",
          "description": "A short text description of the OriginEndpoint."
        },
        "HlsPackage": {
          "$ref": "#/definitions/HlsPackage"
        },
        "Id": {
          "$ref": "#/definitions/__string",
          "description": "The ID of the OriginEndpoint."
        },
        "ManifestName": {
          "$ref": "#/definitions/__string",
          "description": "A short string appended to the end of the OriginEndpoint URL."
        },
        "MssPackage": {
          "$ref": "#/definitions/MssPackage"
        },
        "StartoverWindowSeconds": {
          "$ref": "#/definitions/__integer",
          "description": "Maximum duration (seconds) of content to retain for startover playback.\nIf not specified, startover playback will be disabled for the OriginEndpoint.\n"
        },
        "TimeDelaySeconds": {
          "$ref": "#/definitions/__integer",
          "description": "Amount of delay (seconds) to enforce on the playback of live content.\nIf not specified, there will be no time delay in effect for the OriginEndpoint.\n"
        },
        "Url": {
          "$ref": "#/definitions/__string",
          "description": "The URL of the packaged OriginEndpoint for consumption."
        },
        "Whitelist": {
          "$ref": "#/definitions/__listOf__string",
          "description": "A list of source IP CIDR blocks that will be allowed to access the OriginEndpoint."
        }
      },
      "type": "object"
    },
    "PlaylistType": {
      "enum": [
        "NONE",
        "EVENT",
        "VOD"
      ],
      "type": "string"
    },
    "Profile": {
      "enum": [
        "NONE",
        "HBBTV_1_5"
      ],
      "type": "string"
    },
    "RotateChannelCredentialsRequest": {
      "properties": {},
      "type": "object"
    },
    "RotateChannelCredentialsResponse": {
      "properties": {
        "Arn": {
          "$ref": "#/definitions/__string",
          "description": "The Amazon Resource Name (ARN) assigned to the Channel."
        },
        "Description": {
          "$ref": "#/definitions/__string",
          "description": "A short text description of the Channel."
        },
        "HlsIngest": {
          "$ref": "#/definitions/HlsIngest"
        },
        "Id": {
          "$ref": "#/definitions/__string",
          "description": "The ID of the Channel."
        }
      },
      "type": "object"
    },
    "RotateIngestEndpointCredentialsRequest": {
      "properties": {},
      "type": "object"
    },
    "RotateIngestEndpointCredentialsResponse": {
      "properties": {
        "Arn": {
          "$ref": "#/definitions/__string",
          "description": "The Amazon Resource Name (ARN) assigned to the Channel."
        },
        "Description": {
          "$ref": "#/definitions/__string",
          "description": "A short text description of the Channel."
        },
        "HlsIngest": {
          "$ref": "#/definitions/HlsIngest"
        },
        "Id": {
          "$ref": "#/definitions/__string",
          "description": "The ID of the Channel."
        }
      },
      "type": "object"
    },
    "ServiceUnavailableException": {},
    "SpekeKeyProvider": {
      "description": "A configuration for accessing an external Secure Packager and Encoder Key Exchange (SPEKE) service that will provide encryption keys.",
      "properties": {
        "CertificateArn": {
          "$ref": "#/definitions/__string",
          "description": "An Amazon Resource Name (ARN) of a Certificate Manager certificate\nthat MediaPackage will use for enforcing secure end-to-end data\ntransfer with the key provider service.\n"
        },
        "ResourceId": {
          "$ref": "#/definitions/__string",
          "description": "The resource ID to include in key requests."
        },
        "RoleArn": {
          "$ref": "#/definitions/__string",
          "description": "An Amazon Resource Name (ARN) of an IAM role that AWS Elemental\nMediaPackage will assume when accessing the key provider service.\n"
        },
        "SystemIds": {
          "$ref": "#/definitions/__listOf__string",
          "description": "The system IDs to include in key requests."
        },
        "Url": {
          "$ref": "#/definitions/__string",
          "description": "The URL of the external key provider service."
        }
      },
      "required": [
        "Url",
        "ResourceId",
        "RoleArn",
        "SystemIds"
      ],
      "type": "object"
    },
    "StreamOrder": {
      "enum": [
        "ORIGINAL",
        "VIDEO_BITRATE_ASCENDING",
        "VIDEO_BITRATE_DESCENDING"
      ],
      "type": "string"
    },
    "StreamSelection": {
      "description": "A StreamSelection configuration.",
      "properties": {
        "MaxVideoBitsPerSecond": {
          "$ref": "#/definitions/__integer",
          "description": "The maximum video bitrate (bps) to include in output."
        },
        "MinVideoBitsPerSecond": {
          "$ref": "#/definitions/__integer",
          "description": "The minimum video bitrate (bps) to include in output."
        },
        "StreamOrder": {
          "$ref": "#/definitions/StreamOrder",
          "description": "A directive that determines the order of streams in the output."
        }
      },
      "type": "object"
    },
    "TooManyRequestsException": {},
    "UnprocessableEntityException": {},
    "UpdateChannelRequest": {
      "description": "Configuration parameters used to update the Channel.",
      "properties": {
        "Description": {
          "$ref": "#/definitions/__string",
          "description": "A short text description of the Channel."
        }
      },
      "type": "object"
    },
    "UpdateChannelResponse": {
      "properties": {
        "Arn": {
          "$ref": "#/definitions/__string",
          "description": "The Amazon Resource Name (ARN) assigned to the Channel."
        },
        "Description": {
          "$ref": "#/definitions/__string",
          "description": "A short text description of the Channel."
        },
        "HlsIngest": {
          "$ref": "#/definitions/HlsIngest"
        },
        "Id": {
          "$ref": "#/definitions/__string",
          "description": "The ID of the Channel."
        }
      },
      "type": "object"
    },
    "UpdateOriginEndpointRequest": {
      "description": "Configuration parameters used to update an existing OriginEndpoint.",
      "properties": {
        "CmafPackage": {
          "$ref": "#/definitions/CmafPackageCreateOrUpdateParameters"
        },
        "DashPackage": {
          "$ref": "#/definitions/DashPackage"
        },
        "Description": {
          "$ref": "#/definitions/__string",
          "description": "A short text description of the OriginEndpoint."
        },
        "HlsPackage": {
          "$ref": "#/definitions/HlsPackage"
        },
        "ManifestName": {
          "$ref": "#/definitions/__string",
          "description": "A short string that will be appended to the end of the Endpoint URL."
        },
        "MssPackage": {
          "$ref": "#/definitions/MssPackage"
        },
        "StartoverWindowSeconds": {
          "$ref": "#/definitions/__integer",
          "description": "Maximum duration (in seconds) of content to retain for startover playback.\nIf not specified, startover playback will be disabled for the OriginEndpoint.\n"
        },
        "TimeDelaySeconds": {
          "$ref": "#/definitions/__integer",
          "description": "Amount of delay (in seconds) to enforce on the playback of live content.\nIf not specified, there will be no time delay in effect for the OriginEndpoint.\n"
        },
        "Whitelist": {
          "$ref": "#/definitions/__listOf__string",
          "description": "A list of source IP CIDR blocks that will be allowed to access the OriginEndpoint."
        }
      },
      "type": "object"
    },
    "UpdateOriginEndpointResponse": {
      "properties": {
        "Arn": {
          "$ref": "#/definitions/__string",
          "description": "The Amazon Resource Name (ARN) assigned to the OriginEndpoint."
        },
        "ChannelId": {
          "$ref": "#/definitions/__string",
          "description": "The ID of the Channel the OriginEndpoint is associated with."
        },
        "CmafPackage": {
          "$ref": "#/definitions/CmafPackage"
        },
        "DashPackage": {
          "$ref": "#/definitions/DashPackage"
        },
        "Description": {
          "$ref": "#/definitions/__string",
          "description": "A short text description of the OriginEndpoint."
        },
        "HlsPackage": {
          "$ref": "#/definitions/HlsPackage"
        },
        "Id": {
          "$ref": "#/definitions/__string",
          "description": "The ID of the OriginEndpoint."
        },
        "ManifestName": {
          "$ref": "#/definitions/__string",
          "description": "A short string appended to the end of the OriginEndpoint URL."
        },
        "MssPackage": {
          "$ref": "#/definitions/MssPackage"
        },
        "StartoverWindowSeconds": {
          "$ref": "#/definitions/__integer",
          "description": "Maximum duration (seconds) of content to retain for startover playback.\nIf not specified, startover playback will be disabled for the OriginEndpoint.\n"
        },
        "TimeDelaySeconds": {
          "$ref": "#/definitions/__integer",
          "description": "Amount of delay (seconds) to enforce on the playback of live content.\nIf not specified, there will be no time delay in effect for the OriginEndpoint.\n"
        },
        "Url": {
          "$ref": "#/definitions/__string",
          "description": "The URL of the packaged OriginEndpoint for consumption."
        },
        "Whitelist": {
          "$ref": "#/definitions/__listOf__string",
          "description": "A list of source IP CIDR blocks that will be allowed to access the OriginEndpoint."
        }
      },
      "type": "object"
    },
    "__PeriodTriggersElement": {
      "enum": [
        "ADS"
      ],
      "type": "string"
    },
    "__boolean": {
      "type": "boolean"
    },
    "__integer": {
      "type": "integer"
    },
    "__listOfChannel": {
      "items": {
        "$ref": "#/definitions/Channel"
      },
      "type": "array"
    },
    "__listOfHlsManifest": {
      "items": {
        "$ref": "#/definitions/HlsManifest"
      },
      "type": "array"
    },
    "__listOfHlsManifestCreateOrUpdateParameters": {
      "items": {
        "$ref": "#/definitions/HlsManifestCreateOrUpdateParameters"
      },
      "type": "array"
    },
    "__listOfIngestEndpoint": {
      "items": {
        "$ref": "#/definitions/IngestEndpoint"
      },
      "type": "array"
    },
    "__listOfOriginEndpoint": {
      "items": {
        "$ref": "#/definitions/OriginEndpoint"
      },
      "type": "array"
    },
    "__listOf__PeriodTriggersElement": {
      "items": {
        "$ref": "#/definitions/__PeriodTriggersElement"
      },
      "type": "array"
    },
    "__listOf__string": {
      "items": {
        "$ref": "#/definitions/__string"
      },
      "type": "array"
    },
    "__string": {
      "type": "string"
    }
  }
}
