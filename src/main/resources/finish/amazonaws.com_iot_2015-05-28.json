{
  "swagger": "2.0",
  "schemes": [
    "https",
    "http"
  ],
  "host": "iot.amazonaws.com",
  "basePath": "/",
  "x-hasEquivalentPaths": true,
  "info": {
    "contact": {
      "email": "mike.ralphson@gmail.com",
      "name": "Mike Ralphson",
      "url": "https://github.com/mermade/aws2openapi",
      "x-twitter": "PermittedSoc"
    },
    "description": "<fullname>AWS IoT</fullname> <p>AWS IoT provides secure, bi-directional communication between Internet-connected devices (such as sensors, actuators, embedded devices, or smart appliances) and the AWS cloud. You can discover your custom IoT-Data endpoint to communicate with, configure rules for data processing and integration with other services, organize resources associated with each device (Registry), configure logging, and create and manage policies and credentials to authenticate devices.</p> <p>For more information about how AWS IoT works, see the <a href=\"http://docs.aws.amazon.com/iot/latest/developerguide/aws-iot-how-it-works.html\">Developer Guide</a>.</p> <p>For information about how to use the credentials provider for AWS IoT, see <a href=\"http://docs.aws.amazon.com/iot/latest/developerguide/authorizing-direct-aws.html\">Authorizing Direct Calls to AWS Services</a>.</p>",
    "license": {
      "name": "Apache 2.0 License",
      "url": "http://www.apache.org/licenses/"
    },
    "termsOfService": "https://aws.amazon.com/service-terms/",
    "title": "AWS IoT",
    "version": "2015-05-28",
    "x-apiClientRegistration": {
      "url": "https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct"
    },
    "x-apisguru-categories": [
      "cloud"
    ],
    "x-logo": {
      "backgroundColor": "#FFFFFF",
      "url": "https://api.apis.guru/v2/cache/logo/https_twitter.com_awscloud_profile_image.jpeg"
    },
    "x-origin": [
      {
        "contentType": "application/json",
        "converter": {
          "url": "https://github.com/mermade/aws2openapi",
          "version": "1.0.0"
        },
        "url": "https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/iot-2015-05-28.normal.json",
        "x-apisguru-direct": true
      }
    ],
    "x-preferred": true,
    "x-providerName": "amazonaws.com",
    "x-release": "v4",
    "x-serviceName": "iot"
  },
  "externalDocs": {
    "description": "Amazon Web Services documentation",
    "url": "https://aws.amazon.com/iot/"
  },
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "securityDefinitions": {
    "hmac": {
      "description": "Amazon Signature authorization v4",
      "in": "header",
      "name": "Authorization",
      "type": "apiKey",
      "x-amazon-apigateway-authtype": "awsSigv4"
    }
  },
  "security": [
    {
      "hmac": []
    }
  ],
  "parameters": {
    "Action": {
      "in": "query",
      "name": "Action",
      "required": true,
      "type": "string"
    },
    "Version": {
      "in": "query",
      "name": "Version",
      "required": true,
      "type": "string"
    },
    "X-Amz-Algorithm": {
      "in": "header",
      "name": "X-Amz-Algorithm",
      "required": false,
      "type": "string"
    },
    "X-Amz-Content-Sha256": {
      "in": "header",
      "name": "X-Amz-Content-Sha256",
      "required": false,
      "type": "string"
    },
    "X-Amz-Credential": {
      "in": "header",
      "name": "X-Amz-Credential",
      "required": false,
      "type": "string"
    },
    "X-Amz-Date": {
      "in": "header",
      "name": "X-Amz-Date",
      "required": false,
      "type": "string"
    },
    "X-Amz-Security-Token": {
      "in": "header",
      "name": "X-Amz-Security-Token",
      "required": false,
      "type": "string"
    },
    "X-Amz-Signature": {
      "in": "header",
      "name": "X-Amz-Signature",
      "required": false,
      "type": "string"
    },
    "X-Amz-SignedHeaders": {
      "in": "header",
      "name": "X-Amz-SignedHeaders",
      "required": false,
      "type": "string"
    }
  },
  "paths": {
    "/accept-certificate-transfer/{certificateId}": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "patch": {
        "description": "<p>Accepts a pending certificate transfer. The default state of the certificate is INACTIVE.</p> <p>To check for pending certificate transfers, call <a>ListCertificates</a> to enumerate your certificates.</p>",
        "operationId": "AcceptCertificateTransfer",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AcceptCertificateTransferRequest"
            }
          },
          {
            "in": "path",
            "name": "certificateId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "480": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "481": {
            "description": "TransferAlreadyCompletedException",
            "schema": {
              "$ref": "#/definitions/TransferAlreadyCompletedException"
            }
          },
          "482": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "483": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "484": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "485": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          },
          "486": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          }
        }
      }
    },
    "/active-violations": {
      "get": {
        "description": "Lists the active violations for a given Device Defender security profile.",
        "operationId": "ListActiveViolations",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListActiveViolationsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListActiveViolationsResponse"
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "483": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ]
    },
    "/attached-policies/{target}": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Lists the policies attached to the specified thing group.",
        "operationId": "ListAttachedPolicies",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListAttachedPoliciesRequest"
            }
          },
          {
            "in": "path",
            "name": "target",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListAttachedPoliciesResponse"
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "481": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "482": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "483": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "484": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          },
          "485": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          },
          "486": {
            "description": "LimitExceededException",
            "schema": {
              "$ref": "#/definitions/LimitExceededException"
            }
          }
        }
      }
    },
    "/audit/configuration": {
      "delete": {
        "description": "Restores the default settings for Device Defender audits for this account. Any configuration data you entered is deleted and all audit checks are reset to disabled. ",
        "operationId": "DeleteAccountAuditConfiguration",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteAccountAuditConfigurationRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteAccountAuditConfigurationResponse"
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "483": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          }
        }
      },
      "get": {
        "description": "Gets information about the Device Defender audit settings for this account. Settings include how audit notifications are sent and which audit checks are enabled or disabled.",
        "operationId": "DescribeAccountAuditConfiguration",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DescribeAccountAuditConfigurationRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeAccountAuditConfigurationResponse"
            }
          },
          "480": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "481": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "patch": {
        "description": "Configures or reconfigures the Device Defender audit settings for this account. Settings include how audit notifications are sent and which audit checks are enabled or disabled.",
        "operationId": "UpdateAccountAuditConfiguration",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateAccountAuditConfigurationRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdateAccountAuditConfigurationResponse"
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "481": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "482": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          }
        }
      }
    },
    "/audit/findings": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Lists the findings (results) of a Device Defender audit or of the audits performed during a specified time period. (Findings are retained for 180 days.)",
        "operationId": "ListAuditFindings",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListAuditFindingsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListAuditFindingsResponse"
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "481": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "482": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          }
        }
      }
    },
    "/audit/scheduledaudits": {
      "get": {
        "description": "Lists all of your scheduled audits.",
        "operationId": "ListScheduledAudits",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListScheduledAuditsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListScheduledAuditsResponse"
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "481": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "482": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ]
    },
    "/audit/scheduledaudits/{scheduledAuditName}": {
      "delete": {
        "description": "Deletes a scheduled audit.",
        "operationId": "DeleteScheduledAudit",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteScheduledAuditRequest"
            }
          },
          {
            "in": "path",
            "name": "scheduledAuditName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteScheduledAuditResponse"
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "483": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          }
        }
      },
      "get": {
        "description": "Gets information about a scheduled audit.",
        "operationId": "DescribeScheduledAudit",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DescribeScheduledAuditRequest"
            }
          },
          {
            "in": "path",
            "name": "scheduledAuditName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeScheduledAuditResponse"
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "483": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "patch": {
        "description": "Updates a scheduled audit, including what checks are performed and how often the audit takes place.",
        "operationId": "UpdateScheduledAudit",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateScheduledAuditRequest"
            }
          },
          {
            "in": "path",
            "name": "scheduledAuditName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdateScheduledAuditResponse"
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "483": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          }
        }
      },
      "post": {
        "description": "Creates a scheduled audit that is run at a specified time interval.",
        "operationId": "CreateScheduledAudit",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateScheduledAuditRequest"
            }
          },
          {
            "in": "path",
            "name": "scheduledAuditName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateScheduledAuditResponse"
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "481": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "482": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          },
          "483": {
            "description": "LimitExceededException",
            "schema": {
              "$ref": "#/definitions/LimitExceededException"
            }
          }
        }
      }
    },
    "/audit/tasks": {
      "get": {
        "description": "Lists the Device Defender audits that have been performed during a given time period.",
        "operationId": "ListAuditTasks",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListAuditTasksRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListAuditTasksResponse"
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "481": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "482": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Starts an on-demand Device Defender audit.",
        "operationId": "StartOnDemandAuditTask",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/StartOnDemandAuditTaskRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/StartOnDemandAuditTaskResponse"
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "481": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "482": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          },
          "483": {
            "description": "LimitExceededException",
            "schema": {
              "$ref": "#/definitions/LimitExceededException"
            }
          }
        }
      }
    },
    "/audit/tasks/{taskId}": {
      "get": {
        "description": "Gets information about a Device Defender audit.",
        "operationId": "DescribeAuditTask",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DescribeAuditTaskRequest"
            }
          },
          {
            "in": "path",
            "name": "taskId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeAuditTaskResponse"
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "483": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ]
    },
    "/audit/tasks/{taskId}/cancel": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "put": {
        "description": "Cancels an audit that is in progress. The audit can be either scheduled or on-demand. If the audit is not in progress, an \"InvalidRequestException\" occurs.",
        "operationId": "CancelAuditTask",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CancelAuditTaskRequest"
            }
          },
          {
            "in": "path",
            "name": "taskId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CancelAuditTaskResponse"
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "481": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "482": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "483": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          }
        }
      }
    },
    "/authorizer/{authorizerName}": {
      "delete": {
        "description": "Deletes an authorizer.",
        "operationId": "DeleteAuthorizer",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteAuthorizerRequest"
            }
          },
          {
            "in": "path",
            "name": "authorizerName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteAuthorizerResponse"
            }
          },
          "480": {
            "description": "DeleteConflictException",
            "schema": {
              "$ref": "#/definitions/DeleteConflictException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "483": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "484": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "485": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          },
          "486": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          }
        }
      },
      "get": {
        "description": "Describes an authorizer.",
        "operationId": "DescribeAuthorizer",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DescribeAuthorizerRequest"
            }
          },
          {
            "in": "path",
            "name": "authorizerName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeAuthorizerResponse"
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "481": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "482": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "483": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "484": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          },
          "485": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Creates an authorizer.",
        "operationId": "CreateAuthorizer",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateAuthorizerRequest"
            }
          },
          {
            "in": "path",
            "name": "authorizerName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateAuthorizerResponse"
            }
          },
          "480": {
            "description": "ResourceAlreadyExistsException",
            "schema": {
              "$ref": "#/definitions/ResourceAlreadyExistsException"
            }
          },
          "481": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "482": {
            "description": "LimitExceededException",
            "schema": {
              "$ref": "#/definitions/LimitExceededException"
            }
          },
          "483": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "484": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "485": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          },
          "486": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          }
        }
      },
      "put": {
        "description": "Updates an authorizer.",
        "operationId": "UpdateAuthorizer",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateAuthorizerRequest"
            }
          },
          {
            "in": "path",
            "name": "authorizerName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdateAuthorizerResponse"
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "481": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "482": {
            "description": "LimitExceededException",
            "schema": {
              "$ref": "#/definitions/LimitExceededException"
            }
          },
          "483": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "484": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "485": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          },
          "486": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          }
        }
      }
    },
    "/authorizer/{authorizerName}/test": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Tests a custom authorization behavior by invoking a specified custom authorizer. Use this to test and debug the custom authorization behavior of devices that connect to the AWS IoT device gateway.",
        "operationId": "TestInvokeAuthorizer",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TestInvokeAuthorizerRequest"
            }
          },
          {
            "in": "path",
            "name": "authorizerName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TestInvokeAuthorizerResponse"
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "481": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "482": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "483": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "484": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          },
          "485": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          },
          "486": {
            "description": "InvalidResponseException",
            "schema": {
              "$ref": "#/definitions/InvalidResponseException"
            }
          }
        }
      }
    },
    "/authorizers/": {
      "get": {
        "description": "Lists the authorizers registered in your account.",
        "operationId": "ListAuthorizers",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListAuthorizersRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListAuthorizersResponse"
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "481": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "482": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "483": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          },
          "484": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ]
    },
    "/billing-groups": {
      "get": {
        "description": "Lists the billing groups you have created.",
        "operationId": "ListBillingGroups",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListBillingGroupsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListBillingGroupsResponse"
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "481": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          },
          "482": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "483": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ]
    },
    "/billing-groups/addThingToBillingGroup": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "put": {
        "description": "Adds a thing to a billing group.",
        "operationId": "AddThingToBillingGroup",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AddThingToBillingGroupRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/AddThingToBillingGroupResponse"
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "481": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "482": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          },
          "483": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          }
        }
      }
    },
    "/billing-groups/removeThingFromBillingGroup": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "put": {
        "description": "Removes the given thing from the billing group.",
        "operationId": "RemoveThingFromBillingGroup",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RemoveThingFromBillingGroupRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/RemoveThingFromBillingGroupResponse"
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "481": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "482": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          },
          "483": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          }
        }
      }
    },
    "/billing-groups/{billingGroupName}": {
      "delete": {
        "description": "Deletes the billing group.",
        "operationId": "DeleteBillingGroup",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteBillingGroupRequest"
            }
          },
          {
            "in": "path",
            "name": "billingGroupName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteBillingGroupResponse"
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "481": {
            "description": "VersionConflictException",
            "schema": {
              "$ref": "#/definitions/VersionConflictException"
            }
          },
          "482": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "483": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          }
        }
      },
      "get": {
        "description": "Returns information about a billing group.",
        "operationId": "DescribeBillingGroup",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DescribeBillingGroupRequest"
            }
          },
          {
            "in": "path",
            "name": "billingGroupName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeBillingGroupResponse"
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "481": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "482": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          },
          "483": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "patch": {
        "description": "Updates information about the billing group.",
        "operationId": "UpdateBillingGroup",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateBillingGroupRequest"
            }
          },
          {
            "in": "path",
            "name": "billingGroupName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdateBillingGroupResponse"
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "481": {
            "description": "VersionConflictException",
            "schema": {
              "$ref": "#/definitions/VersionConflictException"
            }
          },
          "482": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "483": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          },
          "484": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          }
        }
      },
      "post": {
        "description": "Creates a billing group.",
        "operationId": "CreateBillingGroup",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateBillingGroupRequest"
            }
          },
          {
            "in": "path",
            "name": "billingGroupName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateBillingGroupResponse"
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "481": {
            "description": "ResourceAlreadyExistsException",
            "schema": {
              "$ref": "#/definitions/ResourceAlreadyExistsException"
            }
          },
          "482": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "483": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          }
        }
      }
    },
    "/billing-groups/{billingGroupName}/things": {
      "get": {
        "description": "Lists the things you have added to the given billing group.",
        "operationId": "ListThingsInBillingGroup",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListThingsInBillingGroupRequest"
            }
          },
          {
            "in": "path",
            "name": "billingGroupName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListThingsInBillingGroupResponse"
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "481": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          },
          "482": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "483": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ]
    },
    "/cacertificate": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Registers a CA certificate with AWS IoT. This CA certificate can then be used to sign device certificates, which can be then registered with AWS IoT. You can register up to 10 CA certificates per AWS account that have the same subject field. This enables you to have up to 10 certificate authorities sign your device certificates. If you have more than one CA certificate registered, make sure you pass the CA certificate when you register your device certificates with the RegisterCertificate API.",
        "operationId": "RegisterCACertificate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RegisterCACertificateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/RegisterCACertificateResponse"
            }
          },
          "480": {
            "description": "ResourceAlreadyExistsException",
            "schema": {
              "$ref": "#/definitions/ResourceAlreadyExistsException"
            }
          },
          "481": {
            "description": "RegistrationCodeValidationException",
            "schema": {
              "$ref": "#/definitions/RegistrationCodeValidationException"
            }
          },
          "482": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "483": {
            "description": "CertificateValidationException",
            "schema": {
              "$ref": "#/definitions/CertificateValidationException"
            }
          },
          "484": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "485": {
            "description": "LimitExceededException",
            "schema": {
              "$ref": "#/definitions/LimitExceededException"
            }
          },
          "486": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "487": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          },
          "488": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          }
        }
      }
    },
    "/cacertificate/{caCertificateId}": {
      "delete": {
        "description": "Deletes a registered CA certificate.",
        "operationId": "DeleteCACertificate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteCACertificateRequest"
            }
          },
          {
            "in": "path",
            "name": "caCertificateId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteCACertificateResponse"
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "481": {
            "description": "CertificateStateException",
            "schema": {
              "$ref": "#/definitions/CertificateStateException"
            }
          },
          "482": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "483": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "484": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          },
          "485": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          },
          "486": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          }
        }
      },
      "get": {
        "description": "Describes a registered CA certificate.",
        "operationId": "DescribeCACertificate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DescribeCACertificateRequest"
            }
          },
          {
            "in": "path",
            "name": "caCertificateId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeCACertificateResponse"
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "481": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "482": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "483": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          },
          "484": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          },
          "485": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "put": {
        "description": "Updates a registered CA certificate.",
        "operationId": "UpdateCACertificate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateCACertificateRequest"
            }
          },
          {
            "in": "path",
            "name": "caCertificateId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "480": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "481": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "482": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "483": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "484": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          },
          "485": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          }
        }
      }
    },
    "/cacertificates": {
      "get": {
        "description": "<p>Lists the CA certificates registered for your AWS account.</p> <p>The results are paginated with a default page size of 25. You can use the returned marker to retrieve additional results.</p>",
        "operationId": "ListCACertificates",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListCACertificatesRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListCACertificatesResponse"
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "481": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "482": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "483": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          },
          "484": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ]
    },
    "/cancel-certificate-transfer/{certificateId}": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "patch": {
        "description": "<p>Cancels a pending transfer for the specified certificate.</p> <p> <b>Note</b> Only the transfer source account can use this operation to cancel a transfer. (Transfer destinations can use <a>RejectCertificateTransfer</a> instead.) After transfer, AWS IoT returns the certificate to the source account in the INACTIVE state. After the destination account has accepted the transfer, the transfer cannot be cancelled.</p> <p>After a certificate transfer is cancelled, the status of the certificate changes from PENDING_TRANSFER to INACTIVE.</p>",
        "operationId": "CancelCertificateTransfer",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CancelCertificateTransferRequest"
            }
          },
          {
            "in": "path",
            "name": "certificateId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "480": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "481": {
            "description": "TransferAlreadyCompletedException",
            "schema": {
              "$ref": "#/definitions/TransferAlreadyCompletedException"
            }
          },
          "482": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "483": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "484": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "485": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          },
          "486": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          }
        }
      }
    },
    "/certificate/register": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Registers a device certificate with AWS IoT. If you have more than one CA certificate that has the same subject field, you must specify the CA certificate that was used to sign the device certificate being registered.",
        "operationId": "RegisterCertificate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RegisterCertificateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/RegisterCertificateResponse"
            }
          },
          "480": {
            "description": "ResourceAlreadyExistsException",
            "schema": {
              "$ref": "#/definitions/ResourceAlreadyExistsException"
            }
          },
          "481": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "482": {
            "description": "CertificateValidationException",
            "schema": {
              "$ref": "#/definitions/CertificateValidationException"
            }
          },
          "483": {
            "description": "CertificateStateException",
            "schema": {
              "$ref": "#/definitions/CertificateStateException"
            }
          },
          "484": {
            "description": "CertificateConflictException",
            "schema": {
              "$ref": "#/definitions/CertificateConflictException"
            }
          },
          "485": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "486": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "487": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          },
          "488": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          }
        }
      }
    },
    "/certificates": {
      "get": {
        "description": "<p>Lists the certificates registered in your AWS account.</p> <p>The results are paginated with a default page size of 25. You can use the returned marker to retrieve additional results.</p>",
        "operationId": "ListCertificates",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListCertificatesRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListCertificatesResponse"
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "481": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "482": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "483": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          },
          "484": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "<p>Creates an X.509 certificate using the specified certificate signing request.</p> <p> <b>Note:</b> The CSR must include a public key that is either an RSA key with a length of at least 2048 bits or an ECC key from NIST P-256 or NIST P-384 curves. </p> <p> <b>Note:</b> Reusing the same certificate signing request (CSR) results in a distinct certificate.</p> <p>You can create multiple certificates in a batch by creating a directory, copying multiple .csr files into that directory, and then specifying that directory on the command line. The following commands show how to create a batch of certificates given a batch of CSRs.</p> <p>Assuming a set of CSRs are located inside of the directory my-csr-directory:</p> <p>On Linux and OS X, the command is:</p> <p>$ ls my-csr-directory/ | xargs -I {} aws iot create-certificate-from-csr --certificate-signing-request file://my-csr-directory/{}</p> <p>This command lists all of the CSRs in my-csr-directory and pipes each CSR file name to the aws iot create-certificate-from-csr AWS CLI command to create a certificate for the corresponding CSR.</p> <p>The aws iot create-certificate-from-csr part of the command can also be run in parallel to speed up the certificate creation process:</p> <p>$ ls my-csr-directory/ | xargs -P 10 -I {} aws iot create-certificate-from-csr --certificate-signing-request file://my-csr-directory/{}</p> <p>On Windows PowerShell, the command to create certificates for all CSRs in my-csr-directory is:</p> <p>&gt; ls -Name my-csr-directory | %{aws iot create-certificate-from-csr --certificate-signing-request file://my-csr-directory/$_}</p> <p>On a Windows command prompt, the command to create certificates for all CSRs in my-csr-directory is:</p> <p>&gt; forfiles /p my-csr-directory /c \"cmd /c aws iot create-certificate-from-csr --certificate-signing-request file://@path\"</p>",
        "operationId": "CreateCertificateFromCsr",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateCertificateFromCsrRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateCertificateFromCsrResponse"
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "481": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "482": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "483": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          },
          "484": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          }
        }
      }
    },
    "/certificates-by-ca/{caCertificateId}": {
      "get": {
        "description": "List the device certificates signed by the specified CA certificate.",
        "operationId": "ListCertificatesByCA",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListCertificatesByCARequest"
            }
          },
          {
            "in": "path",
            "name": "caCertificateId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListCertificatesByCAResponse"
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "481": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "482": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "483": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          },
          "484": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ]
    },
    "/certificates-out-going": {
      "get": {
        "description": "Lists certificates that are being transferred but not yet accepted.",
        "operationId": "ListOutgoingCertificates",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListOutgoingCertificatesRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListOutgoingCertificatesResponse"
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "481": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "482": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "483": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          },
          "484": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ]
    },
    "/certificates/{certificateId}": {
      "delete": {
        "description": "<p>Deletes the specified certificate.</p> <p>A certificate cannot be deleted if it has a policy attached to it or if its status is set to ACTIVE. To delete a certificate, first use the <a>DetachPrincipalPolicy</a> API to detach all policies. Next, use the <a>UpdateCertificate</a> API to set the certificate to the INACTIVE status.</p>",
        "operationId": "DeleteCertificate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteCertificateRequest"
            }
          },
          {
            "in": "path",
            "name": "certificateId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "480": {
            "description": "CertificateStateException",
            "schema": {
              "$ref": "#/definitions/CertificateStateException"
            }
          },
          "481": {
            "description": "DeleteConflictException",
            "schema": {
              "$ref": "#/definitions/DeleteConflictException"
            }
          },
          "482": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "483": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "484": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "485": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          },
          "486": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          },
          "487": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          }
        }
      },
      "get": {
        "description": "Gets information about the specified certificate.",
        "operationId": "DescribeCertificate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DescribeCertificateRequest"
            }
          },
          {
            "in": "path",
            "name": "certificateId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeCertificateResponse"
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "481": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "482": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "483": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          },
          "484": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          },
          "485": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "put": {
        "description": "<p>Updates the status of the specified certificate. This operation is idempotent.</p> <p>Moving a certificate from the ACTIVE state (including REVOKED) will not disconnect currently connected devices, but these devices will be unable to reconnect.</p> <p>The ACTIVE state is required to authenticate devices connecting to AWS IoT using a certificate.</p>",
        "operationId": "UpdateCertificate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateCertificateRequest"
            }
          },
          {
            "in": "path",
            "name": "certificateId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "480": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "481": {
            "description": "CertificateStateException",
            "schema": {
              "$ref": "#/definitions/CertificateStateException"
            }
          },
          "482": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "483": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "484": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "485": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          },
          "486": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          }
        }
      }
    },
    "/default-authorizer": {
      "delete": {
        "description": "Clears the default authorizer.",
        "operationId": "ClearDefaultAuthorizer",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ClearDefaultAuthorizerRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ClearDefaultAuthorizerResponse"
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "481": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "482": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "483": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "484": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          },
          "485": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          }
        }
      },
      "get": {
        "description": "Describes the default authorizer.",
        "operationId": "DescribeDefaultAuthorizer",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DescribeDefaultAuthorizerRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeDefaultAuthorizerResponse"
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "481": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "482": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "483": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "484": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          },
          "485": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Sets the default authorizer. This will be used if a websocket connection is made without specifying an authorizer.",
        "operationId": "SetDefaultAuthorizer",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SetDefaultAuthorizerRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/SetDefaultAuthorizerResponse"
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "481": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "482": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "483": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "484": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          },
          "485": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          },
          "486": {
            "description": "ResourceAlreadyExistsException",
            "schema": {
              "$ref": "#/definitions/ResourceAlreadyExistsException"
            }
          }
        }
      }
    },
    "/dynamic-thing-groups/{thingGroupName}": {
      "delete": {
        "description": "Deletes a dynamic thing group.",
        "operationId": "DeleteDynamicThingGroup",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteDynamicThingGroupRequest"
            }
          },
          {
            "in": "path",
            "name": "thingGroupName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteDynamicThingGroupResponse"
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "481": {
            "description": "VersionConflictException",
            "schema": {
              "$ref": "#/definitions/VersionConflictException"
            }
          },
          "482": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "483": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "patch": {
        "description": "Updates a dynamic thing group.",
        "operationId": "UpdateDynamicThingGroup",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateDynamicThingGroupRequest"
            }
          },
          {
            "in": "path",
            "name": "thingGroupName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdateDynamicThingGroupResponse"
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "481": {
            "description": "VersionConflictException",
            "schema": {
              "$ref": "#/definitions/VersionConflictException"
            }
          },
          "482": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "483": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          },
          "484": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "485": {
            "description": "InvalidQueryException",
            "schema": {
              "$ref": "#/definitions/InvalidQueryException"
            }
          }
        }
      },
      "post": {
        "description": "Creates a dynamic thing group.",
        "operationId": "CreateDynamicThingGroup",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateDynamicThingGroupRequest"
            }
          },
          {
            "in": "path",
            "name": "thingGroupName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateDynamicThingGroupResponse"
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "481": {
            "description": "ResourceAlreadyExistsException",
            "schema": {
              "$ref": "#/definitions/ResourceAlreadyExistsException"
            }
          },
          "482": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "483": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "484": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          },
          "485": {
            "description": "InvalidQueryException",
            "schema": {
              "$ref": "#/definitions/InvalidQueryException"
            }
          },
          "486": {
            "description": "LimitExceededException",
            "schema": {
              "$ref": "#/definitions/LimitExceededException"
            }
          }
        }
      }
    },
    "/effective-policies": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Gets a list of the policies that have an effect on the authorization behavior of the specified device when it connects to the AWS IoT device gateway.",
        "operationId": "GetEffectivePolicies",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetEffectivePoliciesRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetEffectivePoliciesResponse"
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "481": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "482": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "483": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "484": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          },
          "485": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          },
          "486": {
            "description": "LimitExceededException",
            "schema": {
              "$ref": "#/definitions/LimitExceededException"
            }
          }
        }
      }
    },
    "/endpoint": {
      "get": {
        "description": "Returns a unique endpoint specific to the AWS account making the call.",
        "operationId": "DescribeEndpoint",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DescribeEndpointRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeEndpointResponse"
            }
          },
          "480": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          },
          "481": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "482": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "483": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ]
    },
    "/event-configurations": {
      "get": {
        "description": "Describes event configurations.",
        "operationId": "DescribeEventConfigurations",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DescribeEventConfigurationsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeEventConfigurationsResponse"
            }
          },
          "480": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          },
          "481": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "patch": {
        "description": "Updates the event configurations.",
        "operationId": "UpdateEventConfigurations",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateEventConfigurationsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdateEventConfigurationsResponse"
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "481": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          },
          "482": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          }
        }
      }
    },
    "/indexing/config": {
      "get": {
        "description": "Gets the search configuration.",
        "operationId": "GetIndexingConfiguration",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetIndexingConfigurationRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetIndexingConfigurationResponse"
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "481": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "482": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "483": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          },
          "484": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Updates the search configuration.",
        "operationId": "UpdateIndexingConfiguration",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateIndexingConfigurationRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdateIndexingConfigurationResponse"
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "481": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "482": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "483": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          },
          "484": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          }
        }
      }
    },
    "/indices": {
      "get": {
        "description": "Lists the search indices.",
        "operationId": "ListIndices",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListIndicesRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListIndicesResponse"
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "481": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "482": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "483": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          },
          "484": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ]
    },
    "/indices/search": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "The query search index.",
        "operationId": "SearchIndex",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SearchIndexRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/SearchIndexResponse"
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "481": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "482": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "483": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          },
          "484": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          },
          "485": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "486": {
            "description": "InvalidQueryException",
            "schema": {
              "$ref": "#/definitions/InvalidQueryException"
            }
          },
          "487": {
            "description": "IndexNotReadyException",
            "schema": {
              "$ref": "#/definitions/IndexNotReadyException"
            }
          }
        }
      }
    },
    "/indices/{indexName}": {
      "get": {
        "description": "Describes a search index.",
        "operationId": "DescribeIndex",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DescribeIndexRequest"
            }
          },
          {
            "in": "path",
            "name": "indexName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeIndexResponse"
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "481": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "482": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "483": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          },
          "484": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          },
          "485": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ]
    },
    "/jobs": {
      "get": {
        "description": "Lists jobs.",
        "operationId": "ListJobs",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListJobsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListJobsResponse"
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "483": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ]
    },
    "/jobs/{jobId}": {
      "delete": {
        "description": "<p>Deletes a job and its related job executions.</p> <p>Deleting a job may take time, depending on the number of job executions created for the job and various other factors. While the job is being deleted, the status of the job will be shown as \"DELETION_IN_PROGRESS\". Attempting to delete or cancel a job whose status is already \"DELETION_IN_PROGRESS\" will result in an error.</p> <p>Only 10 jobs may have status \"DELETION_IN_PROGRESS\" at the same time, or a LimitExceededException will occur.</p>",
        "operationId": "DeleteJob",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteJobRequest"
            }
          },
          {
            "in": "path",
            "name": "jobId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "481": {
            "description": "InvalidStateTransitionException",
            "schema": {
              "$ref": "#/definitions/InvalidStateTransitionException"
            }
          },
          "482": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "483": {
            "description": "LimitExceededException",
            "schema": {
              "$ref": "#/definitions/LimitExceededException"
            }
          },
          "484": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "485": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          }
        }
      },
      "get": {
        "description": "Describes a job.",
        "operationId": "DescribeJob",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DescribeJobRequest"
            }
          },
          {
            "in": "path",
            "name": "jobId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeJobResponse"
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "483": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "patch": {
        "description": "Updates supported fields of the specified job.",
        "operationId": "UpdateJob",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateJobRequest"
            }
          },
          {
            "in": "path",
            "name": "jobId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "483": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          }
        }
      },
      "put": {
        "description": "Creates a job.",
        "operationId": "CreateJob",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateJobRequest"
            }
          },
          {
            "in": "path",
            "name": "jobId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateJobResponse"
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "ResourceAlreadyExistsException",
            "schema": {
              "$ref": "#/definitions/ResourceAlreadyExistsException"
            }
          },
          "483": {
            "description": "LimitExceededException",
            "schema": {
              "$ref": "#/definitions/LimitExceededException"
            }
          },
          "484": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "485": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          }
        }
      }
    },
    "/jobs/{jobId}/cancel": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "put": {
        "description": "Cancels a job.",
        "operationId": "CancelJob",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CancelJobRequest"
            }
          },
          {
            "in": "path",
            "name": "jobId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CancelJobResponse"
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "483": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          }
        }
      }
    },
    "/jobs/{jobId}/job-document": {
      "get": {
        "description": "Gets a job document.",
        "operationId": "GetJobDocument",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetJobDocumentRequest"
            }
          },
          {
            "in": "path",
            "name": "jobId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetJobDocumentResponse"
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "483": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ]
    },
    "/jobs/{jobId}/targets": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "<p>Associates a group with a continuous job. The following criteria must be met: </p> <ul> <li> <p>The job must have been created with the <code>targetSelection</code> field set to \"CONTINUOUS\".</p> </li> <li> <p>The job status must currently be \"IN_PROGRESS\".</p> </li> <li> <p>The total number of targets associated with a job must not exceed 100.</p> </li> </ul>",
        "operationId": "AssociateTargetsWithJob",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AssociateTargetsWithJobRequest"
            }
          },
          {
            "in": "path",
            "name": "jobId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/AssociateTargetsWithJobResponse"
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "LimitExceededException",
            "schema": {
              "$ref": "#/definitions/LimitExceededException"
            }
          },
          "483": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "484": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          }
        }
      }
    },
    "/jobs/{jobId}/things": {
      "get": {
        "description": "Lists the job executions for a job.",
        "operationId": "ListJobExecutionsForJob",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListJobExecutionsForJobRequest"
            }
          },
          {
            "in": "path",
            "name": "jobId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListJobExecutionsForJobResponse"
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "483": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ]
    },
    "/keys-and-certificate": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "<p>Creates a 2048-bit RSA key pair and issues an X.509 certificate using the issued public key.</p> <p> <b>Note</b> This is the only time AWS IoT issues the private key for this certificate, so it is important to keep it in a secure location.</p>",
        "operationId": "CreateKeysAndCertificate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateKeysAndCertificateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateKeysAndCertificateResponse"
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "481": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "482": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "483": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          },
          "484": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          }
        }
      }
    },
    "/loggingOptions": {
      "get": {
        "description": "<p>Gets the logging options.</p> <p>NOTE: use of this command is not recommended. Use <code>GetV2LoggingOptions</code> instead.</p>",
        "operationId": "GetLoggingOptions",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetLoggingOptionsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetLoggingOptionsResponse"
            }
          },
          "480": {
            "description": "InternalException",
            "schema": {
              "$ref": "#/definitions/InternalException"
            }
          },
          "481": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "482": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "<p>Sets the logging options.</p> <p>NOTE: use of this command is not recommended. Use <code>SetV2LoggingOptions</code> instead.</p>",
        "operationId": "SetLoggingOptions",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SetLoggingOptionsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "480": {
            "description": "InternalException",
            "schema": {
              "$ref": "#/definitions/InternalException"
            }
          },
          "481": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "482": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          }
        }
      }
    },
    "/otaUpdates": {
      "get": {
        "description": "Lists OTA updates.",
        "operationId": "ListOTAUpdates",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListOTAUpdatesRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListOTAUpdatesResponse"
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "481": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "482": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "483": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          },
          "484": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ]
    },
    "/otaUpdates/{otaUpdateId}": {
      "delete": {
        "description": "Delete an OTA update.",
        "operationId": "DeleteOTAUpdate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteOTAUpdateRequest"
            }
          },
          {
            "in": "path",
            "name": "otaUpdateId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteOTAUpdateResponse"
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "483": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "484": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          },
          "485": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          },
          "486": {
            "description": "VersionConflictException",
            "schema": {
              "$ref": "#/definitions/VersionConflictException"
            }
          }
        }
      },
      "get": {
        "description": "Gets an OTA update.",
        "operationId": "GetOTAUpdate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetOTAUpdateRequest"
            }
          },
          {
            "in": "path",
            "name": "otaUpdateId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetOTAUpdateResponse"
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "481": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "482": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "483": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          },
          "484": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          },
          "485": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Creates an AWS IoT OTAUpdate on a target group of things or groups.",
        "operationId": "CreateOTAUpdate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateOTAUpdateRequest"
            }
          },
          {
            "in": "path",
            "name": "otaUpdateId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateOTAUpdateResponse"
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "481": {
            "description": "LimitExceededException",
            "schema": {
              "$ref": "#/definitions/LimitExceededException"
            }
          },
          "482": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "483": {
            "description": "ResourceAlreadyExistsException",
            "schema": {
              "$ref": "#/definitions/ResourceAlreadyExistsException"
            }
          },
          "484": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "485": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "486": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          },
          "487": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          }
        }
      }
    },
    "/policies": {
      "get": {
        "description": "Lists your policies.",
        "operationId": "ListPolicies",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListPoliciesRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListPoliciesResponse"
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "481": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "482": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "483": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          },
          "484": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ]
    },
    "/policies/{policyName}": {
      "delete": {
        "description": "<p>Deletes the specified policy.</p> <p>A policy cannot be deleted if it has non-default versions or it is attached to any certificate.</p> <p>To delete a policy, use the DeletePolicyVersion API to delete all non-default versions of the policy; use the DetachPrincipalPolicy API to detach the policy from any certificate; and then use the DeletePolicy API to delete the policy.</p> <p>When a policy is deleted using DeletePolicy, its default version is deleted with it.</p>",
        "operationId": "DeletePolicy",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeletePolicyRequest"
            }
          },
          {
            "in": "path",
            "name": "policyName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "480": {
            "description": "DeleteConflictException",
            "schema": {
              "$ref": "#/definitions/DeleteConflictException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "483": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "484": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "485": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          },
          "486": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          }
        }
      },
      "get": {
        "description": "Gets information about the specified policy with the policy document of the default version.",
        "operationId": "GetPolicy",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetPolicyRequest"
            }
          },
          {
            "in": "path",
            "name": "policyName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetPolicyResponse"
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "481": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "482": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "483": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "484": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          },
          "485": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "<p>Creates an AWS IoT policy.</p> <p>The created policy is the default version for the policy. This operation creates a policy version with a version identifier of <b>1</b> and sets <b>1</b> as the policy's default version.</p>",
        "operationId": "CreatePolicy",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreatePolicyRequest"
            }
          },
          {
            "in": "path",
            "name": "policyName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreatePolicyResponse"
            }
          },
          "480": {
            "description": "ResourceAlreadyExistsException",
            "schema": {
              "$ref": "#/definitions/ResourceAlreadyExistsException"
            }
          },
          "481": {
            "description": "MalformedPolicyException",
            "schema": {
              "$ref": "#/definitions/MalformedPolicyException"
            }
          },
          "482": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "483": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "484": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "485": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          },
          "486": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          }
        }
      }
    },
    "/policies/{policyName}/version": {
      "get": {
        "description": "Lists the versions of the specified policy and identifies the default version.",
        "operationId": "ListPolicyVersions",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListPolicyVersionsRequest"
            }
          },
          {
            "in": "path",
            "name": "policyName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListPolicyVersionsResponse"
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "481": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "482": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "483": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "484": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          },
          "485": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "<p>Creates a new version of the specified AWS IoT policy. To update a policy, create a new policy version. A managed policy can have up to five versions. If the policy has five versions, you must use <a>DeletePolicyVersion</a> to delete an existing version before you create a new one.</p> <p>Optionally, you can set the new version as the policy's default version. The default version is the operative version (that is, the version that is in effect for the certificates to which the policy is attached).</p>",
        "operationId": "CreatePolicyVersion",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreatePolicyVersionRequest"
            }
          },
          {
            "in": "path",
            "name": "policyName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreatePolicyVersionResponse"
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "481": {
            "description": "MalformedPolicyException",
            "schema": {
              "$ref": "#/definitions/MalformedPolicyException"
            }
          },
          "482": {
            "description": "VersionsLimitExceededException",
            "schema": {
              "$ref": "#/definitions/VersionsLimitExceededException"
            }
          },
          "483": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "484": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "485": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "486": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          },
          "487": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          }
        }
      }
    },
    "/policies/{policyName}/version/{policyVersionId}": {
      "delete": {
        "description": "Deletes the specified version of the specified policy. You cannot delete the default version of a policy using this API. To delete the default version of a policy, use <a>DeletePolicy</a>. To find out which version of a policy is marked as the default version, use ListPolicyVersions.",
        "operationId": "DeletePolicyVersion",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeletePolicyVersionRequest"
            }
          },
          {
            "in": "path",
            "name": "policyName",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "policyVersionId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "480": {
            "description": "DeleteConflictException",
            "schema": {
              "$ref": "#/definitions/DeleteConflictException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "483": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "484": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "485": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          },
          "486": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          }
        }
      },
      "get": {
        "description": "Gets information about the specified policy version.",
        "operationId": "GetPolicyVersion",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetPolicyVersionRequest"
            }
          },
          {
            "in": "path",
            "name": "policyName",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "policyVersionId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetPolicyVersionResponse"
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "481": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "482": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "483": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "484": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          },
          "485": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "patch": {
        "description": "Sets the specified version of the specified policy as the policy's default (operative) version. This action affects all certificates to which the policy is attached. To list the principals the policy is attached to, use the ListPrincipalPolicy API.",
        "operationId": "SetDefaultPolicyVersion",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SetDefaultPolicyVersionRequest"
            }
          },
          {
            "in": "path",
            "name": "policyName",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "policyVersionId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "480": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "481": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "482": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "483": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "484": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          },
          "485": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          }
        }
      }
    },
    "/policy-principals": {
      "get": {
        "description": "<p>Lists the principals associated with the specified policy.</p> <p> <b>Note:</b> This API is deprecated. Please use <a>ListTargetsForPolicy</a> instead.</p>",
        "operationId": "ListPolicyPrincipals",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListPolicyPrincipalsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListPolicyPrincipalsResponse"
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "481": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "482": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "483": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "484": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          },
          "485": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ]
    },
    "/policy-targets/{policyName}": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "List targets for the specified policy.",
        "operationId": "ListTargetsForPolicy",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListTargetsForPolicyRequest"
            }
          },
          {
            "in": "path",
            "name": "policyName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListTargetsForPolicyResponse"
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "481": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "482": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "483": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "484": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          },
          "485": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          },
          "486": {
            "description": "LimitExceededException",
            "schema": {
              "$ref": "#/definitions/LimitExceededException"
            }
          }
        }
      }
    },
    "/principal-policies": {
      "get": {
        "description": "<p>Lists the policies attached to the specified principal. If you use an Cognito identity, the ID must be in <a href=\"http://docs.aws.amazon.com/cognitoidentity/latest/APIReference/API_GetCredentialsForIdentity.html#API_GetCredentialsForIdentity_RequestSyntax\">AmazonCognito Identity format</a>.</p> <p> <b>Note:</b> This API is deprecated. Please use <a>ListAttachedPolicies</a> instead.</p>",
        "operationId": "ListPrincipalPolicies",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListPrincipalPoliciesRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListPrincipalPoliciesResponse"
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "481": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "482": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "483": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "484": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          },
          "485": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ]
    },
    "/principal-policies/{policyName}": {
      "delete": {
        "description": "<p>Removes the specified policy from the specified certificate.</p> <p> <b>Note:</b> This API is deprecated. Please use <a>DetachPolicy</a> instead.</p>",
        "operationId": "DetachPrincipalPolicy",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DetachPrincipalPolicyRequest"
            }
          },
          {
            "in": "path",
            "name": "policyName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "480": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "481": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "482": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "483": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "484": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          },
          "485": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "put": {
        "description": "<p>Attaches the specified policy to the specified principal (certificate or other credential).</p> <p> <b>Note:</b> This API is deprecated. Please use <a>AttachPolicy</a> instead.</p>",
        "operationId": "AttachPrincipalPolicy",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AttachPrincipalPolicyRequest"
            }
          },
          {
            "in": "path",
            "name": "policyName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "480": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "481": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "482": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "483": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "484": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          },
          "485": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          },
          "486": {
            "description": "LimitExceededException",
            "schema": {
              "$ref": "#/definitions/LimitExceededException"
            }
          }
        }
      }
    },
    "/principals/things": {
      "get": {
        "description": "Lists the things associated with the specified principal.",
        "operationId": "ListPrincipalThings",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListPrincipalThingsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListPrincipalThingsResponse"
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "481": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "482": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "483": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          },
          "484": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          },
          "485": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ]
    },
    "/registrationcode": {
      "delete": {
        "description": "Deletes a CA certificate registration code.",
        "operationId": "DeleteRegistrationCode",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteRegistrationCodeRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteRegistrationCodeResponse"
            }
          },
          "480": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "483": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          },
          "484": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          }
        }
      },
      "get": {
        "description": "Gets a registration code used to register a CA certificate with AWS IoT.",
        "operationId": "GetRegistrationCode",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetRegistrationCodeRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetRegistrationCodeResponse"
            }
          },
          "480": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "481": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "482": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          },
          "483": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          },
          "484": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ]
    },
    "/reject-certificate-transfer/{certificateId}": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "patch": {
        "description": "<p>Rejects a pending certificate transfer. After AWS IoT rejects a certificate transfer, the certificate status changes from <b>PENDING_TRANSFER</b> to <b>INACTIVE</b>.</p> <p>To check for pending certificate transfers, call <a>ListCertificates</a> to enumerate your certificates.</p> <p>This operation can only be called by the transfer destination. After it is called, the certificate will be returned to the source's account in the INACTIVE state.</p>",
        "operationId": "RejectCertificateTransfer",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RejectCertificateTransferRequest"
            }
          },
          {
            "in": "path",
            "name": "certificateId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "480": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "481": {
            "description": "TransferAlreadyCompletedException",
            "schema": {
              "$ref": "#/definitions/TransferAlreadyCompletedException"
            }
          },
          "482": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "483": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "484": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "485": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          },
          "486": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          }
        }
      }
    },
    "/role-aliases": {
      "get": {
        "description": "Lists the role aliases registered in your account.",
        "operationId": "ListRoleAliases",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListRoleAliasesRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListRoleAliasesResponse"
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "481": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "482": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "483": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          },
          "484": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ]
    },
    "/role-aliases/{roleAlias}": {
      "delete": {
        "description": "Deletes a role alias",
        "operationId": "DeleteRoleAlias",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteRoleAliasRequest"
            }
          },
          {
            "in": "path",
            "name": "roleAlias",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteRoleAliasResponse"
            }
          },
          "480": {
            "description": "DeleteConflictException",
            "schema": {
              "$ref": "#/definitions/DeleteConflictException"
            }
          },
          "481": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "482": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "483": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "484": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          },
          "485": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          },
          "486": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          }
        }
      },
      "get": {
        "description": "Describes a role alias.",
        "operationId": "DescribeRoleAlias",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DescribeRoleAliasRequest"
            }
          },
          {
            "in": "path",
            "name": "roleAlias",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeRoleAliasResponse"
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "481": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "482": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "483": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          },
          "484": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          },
          "485": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Creates a role alias.",
        "operationId": "CreateRoleAlias",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateRoleAliasRequest"
            }
          },
          {
            "in": "path",
            "name": "roleAlias",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateRoleAliasResponse"
            }
          },
          "480": {
            "description": "ResourceAlreadyExistsException",
            "schema": {
              "$ref": "#/definitions/ResourceAlreadyExistsException"
            }
          },
          "481": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "482": {
            "description": "LimitExceededException",
            "schema": {
              "$ref": "#/definitions/LimitExceededException"
            }
          },
          "483": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "484": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "485": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          },
          "486": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          }
        }
      },
      "put": {
        "description": "Updates a role alias.",
        "operationId": "UpdateRoleAlias",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateRoleAliasRequest"
            }
          },
          {
            "in": "path",
            "name": "roleAlias",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdateRoleAliasResponse"
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "481": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "482": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "483": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "484": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          },
          "485": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          }
        }
      }
    },
    "/rules": {
      "get": {
        "description": "Lists the rules for the specific topic.",
        "operationId": "ListTopicRules",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListTopicRulesRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListTopicRulesResponse"
            }
          },
          "480": {
            "description": "InternalException",
            "schema": {
              "$ref": "#/definitions/InternalException"
            }
          },
          "481": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "482": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ]
    },
    "/rules/{ruleName}": {
      "delete": {
        "description": "Deletes the rule.",
        "operationId": "DeleteTopicRule",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteTopicRuleRequest"
            }
          },
          {
            "in": "path",
            "name": "ruleName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "480": {
            "description": "InternalException",
            "schema": {
              "$ref": "#/definitions/InternalException"
            }
          },
          "481": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "482": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          },
          "483": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "484": {
            "description": "ConflictingResourceUpdateException",
            "schema": {
              "$ref": "#/definitions/ConflictingResourceUpdateException"
            }
          }
        }
      },
      "get": {
        "description": "Gets information about the rule.",
        "operationId": "GetTopicRule",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetTopicRuleRequest"
            }
          },
          {
            "in": "path",
            "name": "ruleName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetTopicRuleResponse"
            }
          },
          "480": {
            "description": "InternalException",
            "schema": {
              "$ref": "#/definitions/InternalException"
            }
          },
          "481": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "482": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          },
          "483": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "patch": {
        "description": "Replaces the rule. You must specify all parameters for the new rule. Creating rules is an administrator-level action. Any user who has permission to create rules will be able to access data processed by the rule.",
        "operationId": "ReplaceTopicRule",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ReplaceTopicRuleRequest"
            }
          },
          {
            "in": "path",
            "name": "ruleName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "480": {
            "description": "SqlParseException",
            "schema": {
              "$ref": "#/definitions/SqlParseException"
            }
          },
          "481": {
            "description": "InternalException",
            "schema": {
              "$ref": "#/definitions/InternalException"
            }
          },
          "482": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "483": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          },
          "484": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "485": {
            "description": "ConflictingResourceUpdateException",
            "schema": {
              "$ref": "#/definitions/ConflictingResourceUpdateException"
            }
          }
        }
      },
      "post": {
        "description": "Creates a rule. Creating rules is an administrator-level action. Any user who has permission to create rules will be able to access data processed by the rule.",
        "operationId": "CreateTopicRule",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateTopicRuleRequest"
            }
          },
          {
            "in": "path",
            "name": "ruleName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "480": {
            "description": "SqlParseException",
            "schema": {
              "$ref": "#/definitions/SqlParseException"
            }
          },
          "481": {
            "description": "InternalException",
            "schema": {
              "$ref": "#/definitions/InternalException"
            }
          },
          "482": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "483": {
            "description": "ResourceAlreadyExistsException",
            "schema": {
              "$ref": "#/definitions/ResourceAlreadyExistsException"
            }
          },
          "484": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          },
          "485": {
            "description": "ConflictingResourceUpdateException",
            "schema": {
              "$ref": "#/definitions/ConflictingResourceUpdateException"
            }
          }
        }
      }
    },
    "/rules/{ruleName}/disable": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Disables the rule.",
        "operationId": "DisableTopicRule",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DisableTopicRuleRequest"
            }
          },
          {
            "in": "path",
            "name": "ruleName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "480": {
            "description": "InternalException",
            "schema": {
              "$ref": "#/definitions/InternalException"
            }
          },
          "481": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "482": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          },
          "483": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "484": {
            "description": "ConflictingResourceUpdateException",
            "schema": {
              "$ref": "#/definitions/ConflictingResourceUpdateException"
            }
          }
        }
      }
    },
    "/rules/{ruleName}/enable": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Enables the rule.",
        "operationId": "EnableTopicRule",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EnableTopicRuleRequest"
            }
          },
          {
            "in": "path",
            "name": "ruleName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "480": {
            "description": "InternalException",
            "schema": {
              "$ref": "#/definitions/InternalException"
            }
          },
          "481": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "482": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          },
          "483": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "484": {
            "description": "ConflictingResourceUpdateException",
            "schema": {
              "$ref": "#/definitions/ConflictingResourceUpdateException"
            }
          }
        }
      }
    },
    "/security-profile-behaviors/validate": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Validates a Device Defender security profile behaviors specification.",
        "operationId": "ValidateSecurityProfileBehaviors",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ValidateSecurityProfileBehaviorsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ValidateSecurityProfileBehaviorsResponse"
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "481": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "482": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          }
        }
      }
    },
    "/security-profiles": {
      "get": {
        "description": "Lists the Device Defender security profiles you have created. You can use filters to list only those security profiles associated with a thing group or only those associated with your account.",
        "operationId": "ListSecurityProfiles",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListSecurityProfilesRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListSecurityProfilesResponse"
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "481": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "482": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ]
    },
    "/security-profiles-for-target": {
      "get": {
        "description": "Lists the Device Defender security profiles attached to a target (thing group).",
        "operationId": "ListSecurityProfilesForTarget",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListSecurityProfilesForTargetRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListSecurityProfilesForTargetResponse"
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "481": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "482": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          },
          "483": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ]
    },
    "/security-profiles/{securityProfileName}": {
      "delete": {
        "description": "Deletes a Device Defender security profile.",
        "operationId": "DeleteSecurityProfile",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteSecurityProfileRequest"
            }
          },
          {
            "in": "path",
            "name": "securityProfileName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteSecurityProfileResponse"
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "481": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "482": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          },
          "483": {
            "description": "VersionConflictException",
            "schema": {
              "$ref": "#/definitions/VersionConflictException"
            }
          }
        }
      },
      "get": {
        "description": "Gets information about a Device Defender security profile.",
        "operationId": "DescribeSecurityProfile",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DescribeSecurityProfileRequest"
            }
          },
          {
            "in": "path",
            "name": "securityProfileName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeSecurityProfileResponse"
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "483": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "patch": {
        "description": "Updates a Device Defender security profile.",
        "operationId": "UpdateSecurityProfile",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateSecurityProfileRequest"
            }
          },
          {
            "in": "path",
            "name": "securityProfileName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdateSecurityProfileResponse"
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "VersionConflictException",
            "schema": {
              "$ref": "#/definitions/VersionConflictException"
            }
          },
          "483": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "484": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          }
        }
      },
      "post": {
        "description": "Creates a Device Defender security profile.",
        "operationId": "CreateSecurityProfile",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateSecurityProfileRequest"
            }
          },
          {
            "in": "path",
            "name": "securityProfileName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateSecurityProfileResponse"
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "481": {
            "description": "ResourceAlreadyExistsException",
            "schema": {
              "$ref": "#/definitions/ResourceAlreadyExistsException"
            }
          },
          "482": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "483": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          }
        }
      }
    },
    "/security-profiles/{securityProfileName}/targets": {
      "delete": {
        "description": "Disassociates a Device Defender security profile from a thing group or from this account.",
        "operationId": "DetachSecurityProfile",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DetachSecurityProfileRequest"
            }
          },
          {
            "in": "path",
            "name": "securityProfileName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DetachSecurityProfileResponse"
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "483": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          }
        }
      },
      "get": {
        "description": "Lists the targets (thing groups) associated with a given Device Defender security profile.",
        "operationId": "ListTargetsForSecurityProfile",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListTargetsForSecurityProfileRequest"
            }
          },
          {
            "in": "path",
            "name": "securityProfileName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListTargetsForSecurityProfileResponse"
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "483": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "put": {
        "description": "Associates a Device Defender security profile with a thing group or with this account. Each thing group or account can have up to five security profiles associated with it.",
        "operationId": "AttachSecurityProfile",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AttachSecurityProfileRequest"
            }
          },
          {
            "in": "path",
            "name": "securityProfileName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/AttachSecurityProfileResponse"
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "LimitExceededException",
            "schema": {
              "$ref": "#/definitions/LimitExceededException"
            }
          },
          "483": {
            "description": "VersionConflictException",
            "schema": {
              "$ref": "#/definitions/VersionConflictException"
            }
          },
          "484": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "485": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          }
        }
      }
    },
    "/streams": {
      "get": {
        "description": "Lists all of the streams in your AWS account.",
        "operationId": "ListStreams",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListStreamsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListStreamsResponse"
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "481": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "482": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "483": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          },
          "484": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ]
    },
    "/streams/{streamId}": {
      "delete": {
        "description": "Deletes a stream.",
        "operationId": "DeleteStream",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteStreamRequest"
            }
          },
          {
            "in": "path",
            "name": "streamId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteStreamResponse"
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "481": {
            "description": "DeleteConflictException",
            "schema": {
              "$ref": "#/definitions/DeleteConflictException"
            }
          },
          "482": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "483": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "484": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "485": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          },
          "486": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          }
        }
      },
      "get": {
        "description": "Gets information about a stream.",
        "operationId": "DescribeStream",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DescribeStreamRequest"
            }
          },
          {
            "in": "path",
            "name": "streamId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeStreamResponse"
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "483": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "484": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          },
          "485": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Creates a stream for delivering one or more large files in chunks over MQTT. A stream transports data bytes in chunks or blocks packaged as MQTT messages from a source like S3. You can have one or more files associated with a stream. The total size of a file associated with the stream cannot exceed more than 2 MB. The stream will be created with version 0. If a stream is created with the same streamID as a stream that existed and was deleted within last 90 days, we will resurrect that old stream by incrementing the version by 1.",
        "operationId": "CreateStream",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateStreamRequest"
            }
          },
          {
            "in": "path",
            "name": "streamId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateStreamResponse"
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "481": {
            "description": "LimitExceededException",
            "schema": {
              "$ref": "#/definitions/LimitExceededException"
            }
          },
          "482": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "483": {
            "description": "ResourceAlreadyExistsException",
            "schema": {
              "$ref": "#/definitions/ResourceAlreadyExistsException"
            }
          },
          "484": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "485": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "486": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          },
          "487": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          }
        }
      },
      "put": {
        "description": "Updates an existing stream. The stream version will be incremented by one.",
        "operationId": "UpdateStream",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateStreamRequest"
            }
          },
          {
            "in": "path",
            "name": "streamId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdateStreamResponse"
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "483": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "484": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          },
          "485": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          }
        }
      }
    },
    "/tags": {
      "get": {
        "description": "Lists the tags (metadata) you have assigned to the resource.",
        "operationId": "ListTagsForResource",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListTagsForResourceRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListTagsForResourceResponse"
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "481": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          },
          "482": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "483": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Adds to or modifies the tags of the given resource. Tags are metadata which can be used to manage a resource.",
        "operationId": "TagResource",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TagResourceRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TagResourceResponse"
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "481": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          },
          "482": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "483": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "484": {
            "description": "LimitExceededException",
            "schema": {
              "$ref": "#/definitions/LimitExceededException"
            }
          }
        }
      }
    },
    "/target-policies/{policyName}": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Detaches a policy from the specified target.",
        "operationId": "DetachPolicy",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DetachPolicyRequest"
            }
          },
          {
            "in": "path",
            "name": "policyName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "481": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "482": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "483": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          },
          "484": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          },
          "485": {
            "description": "LimitExceededException",
            "schema": {
              "$ref": "#/definitions/LimitExceededException"
            }
          }
        }
      },
      "put": {
        "description": "Attaches a policy to the specified target.",
        "operationId": "AttachPolicy",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AttachPolicyRequest"
            }
          },
          {
            "in": "path",
            "name": "policyName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "480": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "481": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "482": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "483": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "484": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          },
          "485": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          },
          "486": {
            "description": "LimitExceededException",
            "schema": {
              "$ref": "#/definitions/LimitExceededException"
            }
          }
        }
      }
    },
    "/test-authorization": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Tests if a specified principal is authorized to perform an AWS IoT action on a specified resource. Use this to test and debug the authorization behavior of devices that connect to the AWS IoT device gateway.",
        "operationId": "TestAuthorization",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TestAuthorizationRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TestAuthorizationResponse"
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "481": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "482": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "483": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "484": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          },
          "485": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          },
          "486": {
            "description": "LimitExceededException",
            "schema": {
              "$ref": "#/definitions/LimitExceededException"
            }
          }
        }
      }
    },
    "/thing-groups": {
      "get": {
        "description": "List the thing groups in your account.",
        "operationId": "ListThingGroups",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListThingGroupsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListThingGroupsResponse"
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "481": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          },
          "482": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ]
    },
    "/thing-groups/addThingToThingGroup": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "put": {
        "description": "Adds a thing to a thing group.",
        "operationId": "AddThingToThingGroup",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AddThingToThingGroupRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/AddThingToThingGroupResponse"
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "481": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "482": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          },
          "483": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          }
        }
      }
    },
    "/thing-groups/removeThingFromThingGroup": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "put": {
        "description": "Remove the specified thing from the specified group.",
        "operationId": "RemoveThingFromThingGroup",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RemoveThingFromThingGroupRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/RemoveThingFromThingGroupResponse"
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "481": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "482": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          },
          "483": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          }
        }
      }
    },
    "/thing-groups/updateThingGroupsForThing": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "put": {
        "description": "Updates the groups to which the thing belongs.",
        "operationId": "UpdateThingGroupsForThing",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateThingGroupsForThingRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdateThingGroupsForThingResponse"
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "481": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "482": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          },
          "483": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          }
        }
      }
    },
    "/thing-groups/{thingGroupName}": {
      "delete": {
        "description": "Deletes a thing group.",
        "operationId": "DeleteThingGroup",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteThingGroupRequest"
            }
          },
          {
            "in": "path",
            "name": "thingGroupName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteThingGroupResponse"
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "481": {
            "description": "VersionConflictException",
            "schema": {
              "$ref": "#/definitions/VersionConflictException"
            }
          },
          "482": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "483": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          }
        }
      },
      "get": {
        "description": "Describe a thing group.",
        "operationId": "DescribeThingGroup",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DescribeThingGroupRequest"
            }
          },
          {
            "in": "path",
            "name": "thingGroupName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeThingGroupResponse"
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "481": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "482": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          },
          "483": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "patch": {
        "description": "Update a thing group.",
        "operationId": "UpdateThingGroup",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateThingGroupRequest"
            }
          },
          {
            "in": "path",
            "name": "thingGroupName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdateThingGroupResponse"
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "481": {
            "description": "VersionConflictException",
            "schema": {
              "$ref": "#/definitions/VersionConflictException"
            }
          },
          "482": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "483": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          },
          "484": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          }
        }
      },
      "post": {
        "description": "<p>Create a thing group.</p> <note> <p>This is a control plane operation. See <a href=\"http://docs.aws.amazon.com/iot/latest/developerguide/authorization.html\">Authorization</a> for information about authorizing control plane actions.</p> </note>",
        "operationId": "CreateThingGroup",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateThingGroupRequest"
            }
          },
          {
            "in": "path",
            "name": "thingGroupName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateThingGroupResponse"
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "481": {
            "description": "ResourceAlreadyExistsException",
            "schema": {
              "$ref": "#/definitions/ResourceAlreadyExistsException"
            }
          },
          "482": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "483": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          }
        }
      }
    },
    "/thing-groups/{thingGroupName}/things": {
      "get": {
        "description": "Lists the things in the specified group.",
        "operationId": "ListThingsInThingGroup",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListThingsInThingGroupRequest"
            }
          },
          {
            "in": "path",
            "name": "thingGroupName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListThingsInThingGroupResponse"
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "481": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          },
          "482": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ]
    },
    "/thing-registration-tasks": {
      "get": {
        "description": "List bulk thing provisioning tasks.",
        "operationId": "ListThingRegistrationTasks",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListThingRegistrationTasksRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListThingRegistrationTasksResponse"
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "481": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "482": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "483": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Creates a bulk thing provisioning task.",
        "operationId": "StartThingRegistrationTask",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/StartThingRegistrationTaskRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/StartThingRegistrationTaskResponse"
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "481": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "482": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "483": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          }
        }
      }
    },
    "/thing-registration-tasks/{taskId}": {
      "get": {
        "description": "Describes a bulk thing provisioning task.",
        "operationId": "DescribeThingRegistrationTask",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DescribeThingRegistrationTaskRequest"
            }
          },
          {
            "in": "path",
            "name": "taskId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeThingRegistrationTaskResponse"
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "481": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "482": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "483": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          },
          "484": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ]
    },
    "/thing-registration-tasks/{taskId}/cancel": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "put": {
        "description": "Cancels a bulk thing provisioning task.",
        "operationId": "StopThingRegistrationTask",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/StopThingRegistrationTaskRequest"
            }
          },
          {
            "in": "path",
            "name": "taskId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/StopThingRegistrationTaskResponse"
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "481": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "482": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "483": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          },
          "484": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          }
        }
      }
    },
    "/thing-registration-tasks/{taskId}/reports": {
      "get": {
        "description": "Information about the thing registration tasks.",
        "operationId": "ListThingRegistrationTaskReports",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListThingRegistrationTaskReportsRequest"
            }
          },
          {
            "in": "path",
            "name": "taskId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListThingRegistrationTaskReportsResponse"
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "481": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "482": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "483": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ]
    },
    "/thing-types": {
      "get": {
        "description": "Lists the existing thing types.",
        "operationId": "ListThingTypes",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListThingTypesRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListThingTypesResponse"
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "481": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "482": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "483": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          },
          "484": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ]
    },
    "/thing-types/{thingTypeName}": {
      "delete": {
        "description": "Deletes the specified thing type. You cannot delete a thing type if it has things associated with it. To delete a thing type, first mark it as deprecated by calling <a>DeprecateThingType</a>, then remove any associated things by calling <a>UpdateThing</a> to change the thing type on any associated thing, and finally use <a>DeleteThingType</a> to delete the thing type.",
        "operationId": "DeleteThingType",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteThingTypeRequest"
            }
          },
          {
            "in": "path",
            "name": "thingTypeName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteThingTypeResponse"
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "481": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "482": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "483": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "484": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          },
          "485": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          }
        }
      },
      "get": {
        "description": "Gets information about the specified thing type.",
        "operationId": "DescribeThingType",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DescribeThingTypeRequest"
            }
          },
          {
            "in": "path",
            "name": "thingTypeName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeThingTypeResponse"
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "481": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "482": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "483": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "484": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          },
          "485": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Creates a new thing type.",
        "operationId": "CreateThingType",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateThingTypeRequest"
            }
          },
          {
            "in": "path",
            "name": "thingTypeName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateThingTypeResponse"
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "481": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "482": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "483": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          },
          "484": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          },
          "485": {
            "description": "ResourceAlreadyExistsException",
            "schema": {
              "$ref": "#/definitions/ResourceAlreadyExistsException"
            }
          }
        }
      }
    },
    "/thing-types/{thingTypeName}/deprecate": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Deprecates a thing type. You can not associate new things with deprecated thing type.",
        "operationId": "DeprecateThingType",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeprecateThingTypeRequest"
            }
          },
          {
            "in": "path",
            "name": "thingTypeName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeprecateThingTypeResponse"
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "481": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "482": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "483": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "484": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          },
          "485": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          }
        }
      }
    },
    "/things": {
      "get": {
        "description": "Lists your things. Use the <b>attributeName</b> and <b>attributeValue</b> parameters to filter your things. For example, calling <code>ListThings</code> with attributeName=Color and attributeValue=Red retrieves all things in the registry that contain an attribute <b>Color</b> with the value <b>Red</b>. ",
        "operationId": "ListThings",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListThingsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListThingsResponse"
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "481": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "482": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "483": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          },
          "484": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Provisions a thing.",
        "operationId": "RegisterThing",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RegisterThingRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/RegisterThingResponse"
            }
          },
          "480": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          },
          "481": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          },
          "482": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "483": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "484": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "485": {
            "description": "ConflictingResourceUpdateException",
            "schema": {
              "$ref": "#/definitions/ConflictingResourceUpdateException"
            }
          },
          "486": {
            "description": "ResourceRegistrationFailureException",
            "schema": {
              "$ref": "#/definitions/ResourceRegistrationFailureException"
            }
          }
        }
      }
    },
    "/things/{thingName}": {
      "delete": {
        "description": "Deletes the specified thing. Returns successfully with no error if the deletion is successful or you specify a thing that doesn't exist.",
        "operationId": "DeleteThing",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteThingRequest"
            }
          },
          {
            "in": "path",
            "name": "thingName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteThingResponse"
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "481": {
            "description": "VersionConflictException",
            "schema": {
              "$ref": "#/definitions/VersionConflictException"
            }
          },
          "482": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "483": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "484": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "485": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          },
          "486": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          }
        }
      },
      "get": {
        "description": "Gets information about the specified thing.",
        "operationId": "DescribeThing",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DescribeThingRequest"
            }
          },
          {
            "in": "path",
            "name": "thingName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeThingResponse"
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "481": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "482": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "483": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "484": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          },
          "485": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "patch": {
        "description": "Updates the data for a thing.",
        "operationId": "UpdateThing",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateThingRequest"
            }
          },
          {
            "in": "path",
            "name": "thingName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdateThingResponse"
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "481": {
            "description": "VersionConflictException",
            "schema": {
              "$ref": "#/definitions/VersionConflictException"
            }
          },
          "482": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "483": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "484": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          },
          "485": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          },
          "486": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          }
        }
      },
      "post": {
        "description": "<p>Creates a thing record in the registry.</p> <note> <p>This is a control plane operation. See <a href=\"http://docs.aws.amazon.com/iot/latest/developerguide/authorization.html\">Authorization</a> for information about authorizing control plane actions.</p> </note>",
        "operationId": "CreateThing",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateThingRequest"
            }
          },
          {
            "in": "path",
            "name": "thingName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateThingResponse"
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "481": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "482": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "483": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          },
          "484": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          },
          "485": {
            "description": "ResourceAlreadyExistsException",
            "schema": {
              "$ref": "#/definitions/ResourceAlreadyExistsException"
            }
          },
          "486": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          }
        }
      }
    },
    "/things/{thingName}/jobs": {
      "get": {
        "description": "Lists the job executions for the specified thing.",
        "operationId": "ListJobExecutionsForThing",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListJobExecutionsForThingRequest"
            }
          },
          {
            "in": "path",
            "name": "thingName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListJobExecutionsForThingResponse"
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "483": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ]
    },
    "/things/{thingName}/jobs/{jobId}": {
      "get": {
        "description": "Describes a job execution.",
        "operationId": "DescribeJobExecution",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DescribeJobExecutionRequest"
            }
          },
          {
            "in": "path",
            "name": "thingName",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "jobId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeJobExecutionResponse"
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "483": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ]
    },
    "/things/{thingName}/jobs/{jobId}/cancel": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "put": {
        "description": "Cancels the execution of a job for a given thing.",
        "operationId": "CancelJobExecution",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CancelJobExecutionRequest"
            }
          },
          {
            "in": "path",
            "name": "thingName",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "jobId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "481": {
            "description": "InvalidStateTransitionException",
            "schema": {
              "$ref": "#/definitions/InvalidStateTransitionException"
            }
          },
          "482": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "483": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "484": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          },
          "485": {
            "description": "VersionConflictException",
            "schema": {
              "$ref": "#/definitions/VersionConflictException"
            }
          }
        }
      }
    },
    "/things/{thingName}/jobs/{jobId}/executionNumber/{executionNumber}": {
      "delete": {
        "description": "Deletes a job execution.",
        "operationId": "DeleteJobExecution",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteJobExecutionRequest"
            }
          },
          {
            "in": "path",
            "name": "thingName",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "jobId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "executionNumber",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "481": {
            "description": "InvalidStateTransitionException",
            "schema": {
              "$ref": "#/definitions/InvalidStateTransitionException"
            }
          },
          "482": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "483": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "484": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ]
    },
    "/things/{thingName}/principals": {
      "delete": {
        "description": "<p>Detaches the specified principal from the specified thing.</p> <note> <p>This call is asynchronous. It might take several seconds for the detachment to propagate.</p> </note>",
        "operationId": "DetachThingPrincipal",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DetachThingPrincipalRequest"
            }
          },
          {
            "in": "path",
            "name": "thingName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DetachThingPrincipalResponse"
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "481": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "482": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "483": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "484": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          },
          "485": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          }
        }
      },
      "get": {
        "description": "Lists the principals associated with the specified thing.",
        "operationId": "ListThingPrincipals",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListThingPrincipalsRequest"
            }
          },
          {
            "in": "path",
            "name": "thingName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListThingPrincipalsResponse"
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "481": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "482": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "483": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          },
          "484": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          },
          "485": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "put": {
        "description": "Attaches the specified principal to the specified thing.",
        "operationId": "AttachThingPrincipal",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AttachThingPrincipalRequest"
            }
          },
          {
            "in": "path",
            "name": "thingName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/AttachThingPrincipalResponse"
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "481": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "482": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "483": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "484": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          },
          "485": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          }
        }
      }
    },
    "/things/{thingName}/thing-groups": {
      "get": {
        "description": "List the thing groups to which the specified thing belongs.",
        "operationId": "ListThingGroupsForThing",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListThingGroupsForThingRequest"
            }
          },
          {
            "in": "path",
            "name": "thingName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListThingGroupsForThingResponse"
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "481": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          },
          "482": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ]
    },
    "/transfer-certificate/{certificateId}": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "patch": {
        "description": "<p>Transfers the specified certificate to the specified AWS account.</p> <p>You can cancel the transfer until it is acknowledged by the recipient.</p> <p>No notification is sent to the transfer destination's account. It is up to the caller to notify the transfer target.</p> <p>The certificate being transferred must not be in the ACTIVE state. You can use the UpdateCertificate API to deactivate it.</p> <p>The certificate must not have any policies attached to it. You can use the DetachPrincipalPolicy API to detach them.</p>",
        "operationId": "TransferCertificate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TransferCertificateRequest"
            }
          },
          {
            "in": "path",
            "name": "certificateId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TransferCertificateResponse"
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "CertificateStateException",
            "schema": {
              "$ref": "#/definitions/CertificateStateException"
            }
          },
          "483": {
            "description": "TransferConflictException",
            "schema": {
              "$ref": "#/definitions/TransferConflictException"
            }
          },
          "484": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "485": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "486": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          },
          "487": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          }
        }
      }
    },
    "/untag": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Removes the given tags (metadata) from the resource.",
        "operationId": "UntagResource",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UntagResourceRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UntagResourceResponse"
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "481": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          },
          "482": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "483": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          }
        }
      }
    },
    "/v2LoggingLevel": {
      "delete": {
        "description": "Deletes a logging level.",
        "operationId": "DeleteV2LoggingLevel",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteV2LoggingLevelRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "480": {
            "description": "InternalException",
            "schema": {
              "$ref": "#/definitions/InternalException"
            }
          },
          "481": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "482": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          }
        }
      },
      "get": {
        "description": "Lists logging levels.",
        "operationId": "ListV2LoggingLevels",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListV2LoggingLevelsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListV2LoggingLevelsResponse"
            }
          },
          "480": {
            "description": "InternalException",
            "schema": {
              "$ref": "#/definitions/InternalException"
            }
          },
          "481": {
            "description": "NotConfiguredException",
            "schema": {
              "$ref": "#/definitions/NotConfiguredException"
            }
          },
          "482": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "483": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Sets the logging level.",
        "operationId": "SetV2LoggingLevel",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SetV2LoggingLevelRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "480": {
            "description": "InternalException",
            "schema": {
              "$ref": "#/definitions/InternalException"
            }
          },
          "481": {
            "description": "NotConfiguredException",
            "schema": {
              "$ref": "#/definitions/NotConfiguredException"
            }
          },
          "482": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "483": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          }
        }
      }
    },
    "/v2LoggingOptions": {
      "get": {
        "description": "Gets the fine grained logging options.",
        "operationId": "GetV2LoggingOptions",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetV2LoggingOptionsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetV2LoggingOptionsResponse"
            }
          },
          "480": {
            "description": "InternalException",
            "schema": {
              "$ref": "#/definitions/InternalException"
            }
          },
          "481": {
            "description": "NotConfiguredException",
            "schema": {
              "$ref": "#/definitions/NotConfiguredException"
            }
          },
          "482": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Sets the logging options for the V2 logging service.",
        "operationId": "SetV2LoggingOptions",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SetV2LoggingOptionsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "480": {
            "description": "InternalException",
            "schema": {
              "$ref": "#/definitions/InternalException"
            }
          },
          "481": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "482": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          }
        }
      }
    },
    "/violation-events": {
      "get": {
        "description": "Lists the Device Defender security profile violations discovered during the given time period. You can use filters to limit the results to those alerts issued for a particular security profile, behavior or thing (device).",
        "operationId": "ListViolationEvents",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListViolationEventsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListViolationEventsResponse"
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "481": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "482": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ]
    }
  },
  "definitions": {
    "AbortAction": {
      "enum": [
        "CANCEL"
      ],
      "type": "string"
    },
    "AbortConfig": {
      "description": "Details of abort criteria to abort the job.",
      "properties": {
        "criteriaList": {
          "$ref": "#/definitions/AbortCriteriaList",
          "description": "The list of abort criteria to define rules to abort the job."
        }
      },
      "required": [
        "criteriaList"
      ],
      "type": "object"
    },
    "AbortCriteria": {
      "description": "Details of abort criteria to define rules to abort the job.",
      "properties": {
        "action": {
          "$ref": "#/definitions/AbortAction",
          "description": "The type of abort action to initiate a job abort."
        },
        "failureType": {
          "$ref": "#/definitions/JobExecutionFailureType",
          "description": "The type of job execution failure to define a rule to initiate a job abort."
        },
        "minNumberOfExecutedThings": {
          "$ref": "#/definitions/MinimumNumberOfExecutedThings",
          "description": "Minimum number of executed things before evaluating an abort rule."
        },
        "thresholdPercentage": {
          "$ref": "#/definitions/AbortThresholdPercentage",
          "description": "<p>The threshold as a percentage of the total number of executed things that will initiate a job abort.</p> <p>AWS IoT supports up to two digits after the decimal (for example, 10.9 and 10.99, but not 10.999).</p>"
        }
      },
      "required": [
        "failureType",
        "action",
        "thresholdPercentage",
        "minNumberOfExecutedThings"
      ],
      "type": "object"
    },
    "AbortCriteriaList": {
      "items": {
        "$ref": "#/definitions/AbortCriteria"
      },
      "minItems": 1,
      "type": "array"
    },
    "AbortThresholdPercentage": {
      "format": "double",
      "maximum": 100,
      "type": "number"
    },
    "AcceptCertificateTransferRequest": {
      "description": "The input for the AcceptCertificateTransfer operation.",
      "properties": {},
      "type": "object"
    },
    "Action": {
      "description": "Describes the actions associated with a rule.",
      "properties": {
        "cloudwatchAlarm": {
          "$ref": "#/definitions/CloudwatchAlarmAction",
          "description": "Change the state of a CloudWatch alarm."
        },
        "cloudwatchMetric": {
          "$ref": "#/definitions/CloudwatchMetricAction",
          "description": "Capture a CloudWatch metric."
        },
        "dynamoDB": {
          "$ref": "#/definitions/DynamoDBAction",
          "description": "Write to a DynamoDB table."
        },
        "dynamoDBv2": {
          "$ref": "#/definitions/DynamoDBv2Action",
          "description": "Write to a DynamoDB table. This is a new version of the DynamoDB action. It allows you to write each attribute in an MQTT message payload into a separate DynamoDB column."
        },
        "elasticsearch": {
          "$ref": "#/definitions/ElasticsearchAction",
          "description": "Write data to an Amazon Elasticsearch Service domain."
        },
        "firehose": {
          "$ref": "#/definitions/FirehoseAction",
          "description": "Write to an Amazon Kinesis Firehose stream."
        },
        "iotAnalytics": {
          "$ref": "#/definitions/IotAnalyticsAction",
          "description": "Sends message data to an AWS IoT Analytics channel."
        },
        "iotEvents": {
          "$ref": "#/definitions/IotEventsAction",
          "description": "Sends an input to an AWS IoT Events detector."
        },
        "kinesis": {
          "$ref": "#/definitions/KinesisAction",
          "description": "Write data to an Amazon Kinesis stream."
        },
        "lambda": {
          "$ref": "#/definitions/LambdaAction",
          "description": "Invoke a Lambda function."
        },
        "republish": {
          "$ref": "#/definitions/RepublishAction",
          "description": "Publish to another MQTT topic."
        },
        "s3": {
          "$ref": "#/definitions/S3Action",
          "description": "Write to an Amazon S3 bucket."
        },
        "salesforce": {
          "$ref": "#/definitions/SalesforceAction",
          "description": "Send a message to a Salesforce IoT Cloud Input Stream."
        },
        "sns": {
          "$ref": "#/definitions/SnsAction",
          "description": "Publish to an Amazon SNS topic."
        },
        "sqs": {
          "$ref": "#/definitions/SqsAction",
          "description": "Publish to an Amazon SQS queue."
        },
        "stepFunctions": {
          "$ref": "#/definitions/StepFunctionsAction",
          "description": "Starts execution of a Step Functions state machine."
        }
      },
      "type": "object"
    },
    "ActionList": {
      "items": {
        "$ref": "#/definitions/Action"
      },
      "maxItems": 10,
      "minItems": 0,
      "type": "array"
    },
    "ActionType": {
      "enum": [
        "PUBLISH",
        "SUBSCRIBE",
        "RECEIVE",
        "CONNECT"
      ],
      "type": "string"
    },
    "ActiveViolation": {
      "description": "Information about an active Device Defender security profile behavior violation.",
      "properties": {
        "behavior": {
          "$ref": "#/definitions/Behavior",
          "description": "The behavior which is being violated."
        },
        "lastViolationTime": {
          "$ref": "#/definitions/Timestamp",
          "description": "The time the most recent violation occurred."
        },
        "lastViolationValue": {
          "$ref": "#/definitions/MetricValue",
          "description": "The value of the metric (the measurement) which caused the most recent violation."
        },
        "securityProfileName": {
          "$ref": "#/definitions/SecurityProfileName",
          "description": "The security profile whose behavior is in violation."
        },
        "thingName": {
          "$ref": "#/definitions/ThingName",
          "description": "The name of the thing responsible for the active violation."
        },
        "violationId": {
          "$ref": "#/definitions/ViolationId",
          "description": "The ID of the active violation."
        },
        "violationStartTime": {
          "$ref": "#/definitions/Timestamp",
          "description": "The time the violation started."
        }
      },
      "type": "object"
    },
    "ActiveViolations": {
      "items": {
        "$ref": "#/definitions/ActiveViolation"
      },
      "type": "array"
    },
    "AddThingToBillingGroupRequest": {
      "properties": {
        "billingGroupArn": {
          "$ref": "#/definitions/BillingGroupArn",
          "description": "The ARN of the billing group."
        },
        "billingGroupName": {
          "$ref": "#/definitions/BillingGroupName",
          "description": "The name of the billing group."
        },
        "thingArn": {
          "$ref": "#/definitions/ThingArn",
          "description": "The ARN of the thing to be added to the billing group."
        },
        "thingName": {
          "$ref": "#/definitions/ThingName",
          "description": "The name of the thing to be added to the billing group."
        }
      },
      "type": "object"
    },
    "AddThingToBillingGroupResponse": {
      "properties": {},
      "type": "object"
    },
    "AddThingToThingGroupRequest": {
      "properties": {
        "overrideDynamicGroups": {
          "$ref": "#/definitions/OverrideDynamicGroups",
          "description": "Override dynamic thing groups with static thing groups when 10-group limit is reached. If a thing belongs to 10 thing groups, and one or more of those groups are dynamic thing groups, adding a thing to a static group removes the thing from the last dynamic group."
        },
        "thingArn": {
          "$ref": "#/definitions/ThingArn",
          "description": "The ARN of the thing to add to a group."
        },
        "thingGroupArn": {
          "$ref": "#/definitions/ThingGroupArn",
          "description": "The ARN of the group to which you are adding a thing."
        },
        "thingGroupName": {
          "$ref": "#/definitions/ThingGroupName",
          "description": "The name of the group to which you are adding a thing."
        },
        "thingName": {
          "$ref": "#/definitions/ThingName",
          "description": "The name of the thing to add to a group."
        }
      },
      "type": "object"
    },
    "AddThingToThingGroupResponse": {
      "properties": {},
      "type": "object"
    },
    "AdditionalParameterMap": {
      "items": {
        "properties": {
          "key": {
            "$ref": "#/definitions/AttributeKey"
          },
          "value": {
            "$ref": "#/definitions/Value"
          }
        },
        "type": "object"
      },
      "type": "array"
    },
    "AlarmName": {
      "type": "string"
    },
    "AlertTarget": {
      "description": "A structure containing the alert target ARN and the role ARN.",
      "properties": {
        "alertTargetArn": {
          "$ref": "#/definitions/AlertTargetArn",
          "description": "The ARN of the notification target to which alerts are sent."
        },
        "roleArn": {
          "$ref": "#/definitions/RoleArn",
          "description": "The ARN of the role that grants permission to send alerts to the notification target."
        }
      },
      "required": [
        "alertTargetArn",
        "roleArn"
      ],
      "type": "object"
    },
    "AlertTargetArn": {
      "type": "string"
    },
    "AlertTargetType": {
      "description": "The type of alert target: one of \"SNS\".",
      "enum": [
        "SNS"
      ],
      "type": "string"
    },
    "AlertTargets": {
      "items": {
        "properties": {
          "key": {
            "$ref": "#/definitions/AlertTargetType"
          },
          "value": {
            "$ref": "#/definitions/AlertTarget"
          }
        },
        "type": "object"
      },
      "type": "array"
    },
    "AllowAutoRegistration": {
      "type": "boolean"
    },
    "Allowed": {
      "description": "Contains information that allowed the authorization.",
      "properties": {
        "policies": {
          "$ref": "#/definitions/Policies",
          "description": "A list of policies that allowed the authentication."
        }
      },
      "type": "object"
    },
    "ApproximateSecondsBeforeTimedOut": {
      "type": "integer"
    },
    "AscendingOrder": {
      "type": "boolean"
    },
    "AssociateTargetsWithJobRequest": {
      "properties": {
        "comment": {
          "$ref": "#/definitions/Comment",
          "description": "An optional comment string describing why the job was associated with the targets."
        },
        "targets": {
          "$ref": "#/definitions/JobTargets",
          "description": "A list of thing group ARNs that define the targets of the job."
        }
      },
      "required": [
        "targets"
      ],
      "type": "object"
    },
    "AssociateTargetsWithJobResponse": {
      "properties": {
        "description": {
          "$ref": "#/definitions/JobDescription",
          "description": "A short text description of the job."
        },
        "jobArn": {
          "$ref": "#/definitions/JobArn",
          "description": "An ARN identifying the job."
        },
        "jobId": {
          "$ref": "#/definitions/JobId",
          "description": "The unique identifier you assigned to this job when it was created."
        }
      },
      "type": "object"
    },
    "AttachPolicyRequest": {
      "properties": {
        "target": {
          "$ref": "#/definitions/PolicyTarget",
          "description": "The <a href=\"https://docs.aws.amazon.com/iot/latest/developerguide/iot-security-identity.html\">identity</a> to which the policy is attached."
        }
      },
      "required": [
        "target"
      ],
      "type": "object"
    },
    "AttachPrincipalPolicyRequest": {
      "description": "The input for the AttachPrincipalPolicy operation.",
      "properties": {},
      "type": "object"
    },
    "AttachSecurityProfileRequest": {
      "properties": {},
      "type": "object"
    },
    "AttachSecurityProfileResponse": {
      "properties": {},
      "type": "object"
    },
    "AttachThingPrincipalRequest": {
      "description": "The input for the AttachThingPrincipal operation.",
      "properties": {},
      "type": "object"
    },
    "AttachThingPrincipalResponse": {
      "description": "The output from the AttachThingPrincipal operation.",
      "properties": {},
      "type": "object"
    },
    "AttributeKey": {
      "type": "string"
    },
    "AttributeName": {
      "maxLength": 128,
      "pattern": "[a-zA-Z0-9_.,@/:#-]+",
      "type": "string"
    },
    "AttributePayload": {
      "description": "The attribute payload.",
      "properties": {
        "attributes": {
          "$ref": "#/definitions/Attributes",
          "description": "<p>A JSON string containing up to three key-value pair in JSON format. For example:</p> <p> <code>{\\\"attributes\\\":{\\\"string1\\\":\\\"string2\\\"}}</code> </p>"
        },
        "merge": {
          "$ref": "#/definitions/Flag",
          "description": "<p>Specifies whether the list of attributes provided in the <code>AttributePayload</code> is merged with the attributes stored in the registry, instead of overwriting them.</p> <p>To remove an attribute, call <code>UpdateThing</code> with an empty attribute value.</p> <note> <p>The <code>merge</code> attribute is only valid when calling <code>UpdateThing</code>.</p> </note>"
        }
      },
      "type": "object"
    },
    "AttributeValue": {
      "maxLength": 800,
      "pattern": "[a-zA-Z0-9_.,@/:#-]*",
      "type": "string"
    },
    "Attributes": {
      "items": {
        "properties": {
          "key": {
            "$ref": "#/definitions/AttributeName"
          },
          "value": {
            "$ref": "#/definitions/AttributeValue"
          }
        },
        "type": "object"
      },
      "type": "array"
    },
    "AttributesMap": {
      "items": {
        "properties": {
          "key": {
            "$ref": "#/definitions/AttributeKey"
          },
          "value": {
            "$ref": "#/definitions/Value"
          }
        },
        "type": "object"
      },
      "type": "array"
    },
    "AuditCheckConfiguration": {
      "description": "Which audit checks are enabled and disabled for this account.",
      "properties": {
        "enabled": {
          "$ref": "#/definitions/Enabled",
          "description": "True if this audit check is enabled for this account."
        }
      },
      "type": "object"
    },
    "AuditCheckConfigurations": {
      "items": {
        "properties": {
          "key": {
            "$ref": "#/definitions/AuditCheckName"
          },
          "value": {
            "$ref": "#/definitions/AuditCheckConfiguration"
          }
        },
        "type": "object"
      },
      "type": "array"
    },
    "AuditCheckDetails": {
      "description": "Information about the audit check.",
      "properties": {
        "checkCompliant": {
          "$ref": "#/definitions/CheckCompliant",
          "description": "True if the check completed and found all resources compliant."
        },
        "checkRunStatus": {
          "$ref": "#/definitions/AuditCheckRunStatus",
          "description": "The completion status of this check, one of \"IN_PROGRESS\", \"WAITING_FOR_DATA_COLLECTION\", \"CANCELED\", \"COMPLETED_COMPLIANT\", \"COMPLETED_NON_COMPLIANT\", or \"FAILED\"."
        },
        "errorCode": {
          "$ref": "#/definitions/ErrorCode",
          "description": "The code of any error encountered when performing this check during this audit. One of \"INSUFFICIENT_PERMISSIONS\", or \"AUDIT_CHECK_DISABLED\"."
        },
        "message": {
          "$ref": "#/definitions/ErrorMessage",
          "description": "The message associated with any error encountered when performing this check during this audit."
        },
        "nonCompliantResourcesCount": {
          "$ref": "#/definitions/NonCompliantResourcesCount",
          "description": "The number of resources that the check found non-compliant."
        },
        "totalResourcesCount": {
          "$ref": "#/definitions/TotalResourcesCount",
          "description": "The number of resources on which the check was performed."
        }
      },
      "type": "object"
    },
    "AuditCheckName": {
      "description": "An audit check name. Checks must be enabled for your account. (Use <code>DescribeAccountAuditConfiguration</code> to see the list of all checks including those that are enabled or <code>UpdateAccountAuditConfiguration</code> to select which checks are enabled.)",
      "type": "string"
    },
    "AuditCheckRunStatus": {
      "enum": [
        "IN_PROGRESS",
        "WAITING_FOR_DATA_COLLECTION",
        "CANCELED",
        "COMPLETED_COMPLIANT",
        "COMPLETED_NON_COMPLIANT",
        "FAILED"
      ],
      "type": "string"
    },
    "AuditDetails": {
      "items": {
        "properties": {
          "key": {
            "$ref": "#/definitions/AuditCheckName"
          },
          "value": {
            "$ref": "#/definitions/AuditCheckDetails"
          }
        },
        "type": "object"
      },
      "type": "array"
    },
    "AuditFinding": {
      "description": "The findings (results) of the audit.",
      "properties": {
        "checkName": {
          "$ref": "#/definitions/AuditCheckName",
          "description": "The audit check that generated this result."
        },
        "findingTime": {
          "$ref": "#/definitions/Timestamp",
          "description": "The time the result (finding) was discovered."
        },
        "nonCompliantResource": {
          "$ref": "#/definitions/NonCompliantResource",
          "description": "The resource that was found to be non-compliant with the audit check."
        },
        "reasonForNonCompliance": {
          "$ref": "#/definitions/ReasonForNonCompliance",
          "description": "The reason the resource was non-compliant."
        },
        "reasonForNonComplianceCode": {
          "$ref": "#/definitions/ReasonForNonComplianceCode",
          "description": "A code which indicates the reason that the resource was non-compliant."
        },
        "relatedResources": {
          "$ref": "#/definitions/RelatedResources",
          "description": "The list of related resources."
        },
        "severity": {
          "$ref": "#/definitions/AuditFindingSeverity",
          "description": "The severity of the result (finding)."
        },
        "taskId": {
          "$ref": "#/definitions/AuditTaskId",
          "description": "The ID of the audit that generated this result (finding)"
        },
        "taskStartTime": {
          "$ref": "#/definitions/Timestamp",
          "description": "The time the audit started."
        }
      },
      "type": "object"
    },
    "AuditFindingSeverity": {
      "enum": [
        "CRITICAL",
        "HIGH",
        "MEDIUM",
        "LOW"
      ],
      "type": "string"
    },
    "AuditFindings": {
      "items": {
        "$ref": "#/definitions/AuditFinding"
      },
      "type": "array"
    },
    "AuditFrequency": {
      "enum": [
        "DAILY",
        "WEEKLY",
        "BIWEEKLY",
        "MONTHLY"
      ],
      "type": "string"
    },
    "AuditNotificationTarget": {
      "description": "Information about the targets to which audit notifications are sent.",
      "properties": {
        "enabled": {
          "$ref": "#/definitions/Enabled",
          "description": "True if notifications to the target are enabled."
        },
        "roleArn": {
          "$ref": "#/definitions/RoleArn",
          "description": "The ARN of the role that grants permission to send notifications to the target."
        },
        "targetArn": {
          "$ref": "#/definitions/TargetArn",
          "description": "The ARN of the target (SNS topic) to which audit notifications are sent."
        }
      },
      "type": "object"
    },
    "AuditNotificationTargetConfigurations": {
      "items": {
        "properties": {
          "key": {
            "$ref": "#/definitions/AuditNotificationType"
          },
          "value": {
            "$ref": "#/definitions/AuditNotificationTarget"
          }
        },
        "type": "object"
      },
      "type": "array"
    },
    "AuditNotificationType": {
      "enum": [
        "SNS"
      ],
      "type": "string"
    },
    "AuditTaskId": {
      "maxLength": 40,
      "minLength": 1,
      "pattern": "[a-zA-Z0-9\\-]+",
      "type": "string"
    },
    "AuditTaskMetadata": {
      "description": "The audits that were performed.",
      "properties": {
        "taskId": {
          "$ref": "#/definitions/AuditTaskId",
          "description": "The ID of this audit."
        },
        "taskStatus": {
          "$ref": "#/definitions/AuditTaskStatus",
          "description": "The status of this audit: one of \"IN_PROGRESS\", \"COMPLETED\", \"FAILED\" or \"CANCELED\"."
        },
        "taskType": {
          "$ref": "#/definitions/AuditTaskType",
          "description": "The type of this audit: one of \"ON_DEMAND_AUDIT_TASK\" or \"SCHEDULED_AUDIT_TASK\"."
        }
      },
      "type": "object"
    },
    "AuditTaskMetadataList": {
      "items": {
        "$ref": "#/definitions/AuditTaskMetadata"
      },
      "type": "array"
    },
    "AuditTaskStatus": {
      "enum": [
        "IN_PROGRESS",
        "COMPLETED",
        "FAILED",
        "CANCELED"
      ],
      "type": "string"
    },
    "AuditTaskType": {
      "enum": [
        "ON_DEMAND_AUDIT_TASK",
        "SCHEDULED_AUDIT_TASK"
      ],
      "type": "string"
    },
    "AuthDecision": {
      "enum": [
        "ALLOWED",
        "EXPLICIT_DENY",
        "IMPLICIT_DENY"
      ],
      "type": "string"
    },
    "AuthInfo": {
      "description": "A collection of authorization information.",
      "properties": {
        "actionType": {
          "$ref": "#/definitions/ActionType",
          "description": "The type of action for which the principal is being authorized."
        },
        "resources": {
          "$ref": "#/definitions/Resources",
          "description": "The resources for which the principal is being authorized to perform the specified action."
        }
      },
      "type": "object"
    },
    "AuthInfos": {
      "items": {
        "$ref": "#/definitions/AuthInfo"
      },
      "maxItems": 10,
      "minItems": 1,
      "type": "array"
    },
    "AuthResult": {
      "description": "The authorizer result.",
      "properties": {
        "allowed": {
          "$ref": "#/definitions/Allowed",
          "description": "The policies and statements that allowed the specified action."
        },
        "authDecision": {
          "$ref": "#/definitions/AuthDecision",
          "description": "The final authorization decision of this scenario. Multiple statements are taken into account when determining the authorization decision. An explicit deny statement can override multiple allow statements."
        },
        "authInfo": {
          "$ref": "#/definitions/AuthInfo",
          "description": "Authorization information."
        },
        "denied": {
          "$ref": "#/definitions/Denied",
          "description": "The policies and statements that denied the specified action."
        },
        "missingContextValues": {
          "$ref": "#/definitions/MissingContextValues",
          "description": "Contains any missing context values found while evaluating policy."
        }
      },
      "type": "object"
    },
    "AuthResults": {
      "items": {
        "$ref": "#/definitions/AuthResult"
      },
      "type": "array"
    },
    "AuthorizerArn": {
      "type": "string"
    },
    "AuthorizerDescription": {
      "description": "The authorizer description.",
      "properties": {
        "authorizerArn": {
          "$ref": "#/definitions/AuthorizerArn",
          "description": "The authorizer ARN."
        },
        "authorizerFunctionArn": {
          "$ref": "#/definitions/AuthorizerFunctionArn",
          "description": "The authorizer's Lambda function ARN."
        },
        "authorizerName": {
          "$ref": "#/definitions/AuthorizerName",
          "description": "The authorizer name."
        },
        "creationDate": {
          "$ref": "#/definitions/DateType",
          "description": "The UNIX timestamp of when the authorizer was created."
        },
        "lastModifiedDate": {
          "$ref": "#/definitions/DateType",
          "description": "The UNIX timestamp of when the authorizer was last updated."
        },
        "status": {
          "$ref": "#/definitions/AuthorizerStatus",
          "description": "The status of the authorizer."
        },
        "tokenKeyName": {
          "$ref": "#/definitions/TokenKeyName",
          "description": "The key used to extract the token from the HTTP headers."
        },
        "tokenSigningPublicKeys": {
          "$ref": "#/definitions/PublicKeyMap",
          "description": "The public keys used to validate the token signature returned by your custom authentication service."
        }
      },
      "type": "object"
    },
    "AuthorizerFunctionArn": {
      "type": "string"
    },
    "AuthorizerName": {
      "maxLength": 128,
      "minLength": 1,
      "pattern": "[\\w=,@-]+",
      "type": "string"
    },
    "AuthorizerStatus": {
      "enum": [
        "ACTIVE",
        "INACTIVE"
      ],
      "type": "string"
    },
    "AuthorizerSummary": {
      "description": "The authorizer summary.",
      "properties": {
        "authorizerArn": {
          "$ref": "#/definitions/AuthorizerArn",
          "description": "The authorizer ARN."
        },
        "authorizerName": {
          "$ref": "#/definitions/AuthorizerName",
          "description": "The authorizer name."
        }
      },
      "type": "object"
    },
    "Authorizers": {
      "items": {
        "$ref": "#/definitions/AuthorizerSummary"
      },
      "type": "array"
    },
    "AutoRegistrationStatus": {
      "enum": [
        "ENABLE",
        "DISABLE"
      ],
      "type": "string"
    },
    "AwsAccountId": {
      "maxLength": 12,
      "minLength": 12,
      "pattern": "[0-9]+",
      "type": "string"
    },
    "AwsArn": {
      "type": "string"
    },
    "AwsIotJobArn": {
      "type": "string"
    },
    "AwsIotJobId": {
      "type": "string"
    },
    "AwsIotSqlVersion": {
      "type": "string"
    },
    "AwsJobExecutionsRolloutConfig": {
      "description": "Configuration for the rollout of OTA updates.",
      "properties": {
        "maximumPerMinute": {
          "$ref": "#/definitions/MaximumPerMinute",
          "description": "The maximum number of OTA update job executions started per minute."
        }
      },
      "type": "object"
    },
    "Behavior": {
      "description": "A Device Defender security profile behavior.",
      "properties": {
        "criteria": {
          "$ref": "#/definitions/BehaviorCriteria",
          "description": "The criteria that determine if a device is behaving normally in regard to the <code>metric</code>."
        },
        "metric": {
          "$ref": "#/definitions/BehaviorMetric",
          "description": "What is measured by the behavior."
        },
        "name": {
          "$ref": "#/definitions/BehaviorName",
          "description": "The name you have given to the behavior."
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "BehaviorCriteria": {
      "description": "The criteria by which the behavior is determined to be normal.",
      "properties": {
        "comparisonOperator": {
          "$ref": "#/definitions/ComparisonOperator",
          "description": "The operator that relates the thing measured (<code>metric</code>) to the criteria (<code>value</code>)."
        },
        "durationSeconds": {
          "$ref": "#/definitions/DurationSeconds",
          "description": "Use this to specify the period of time over which the behavior is evaluated, for those criteria which have a time dimension (for example, <code>NUM_MESSAGES_SENT</code>)."
        },
        "value": {
          "$ref": "#/definitions/MetricValue",
          "description": "The value to be compared with the <code>metric</code>."
        }
      },
      "type": "object"
    },
    "BehaviorMetric": {
      "type": "string"
    },
    "BehaviorName": {
      "maxLength": 128,
      "minLength": 1,
      "pattern": "[a-zA-Z0-9:_-]+",
      "type": "string"
    },
    "Behaviors": {
      "items": {
        "$ref": "#/definitions/Behavior"
      },
      "maxItems": 100,
      "type": "array"
    },
    "BillingGroupArn": {
      "type": "string"
    },
    "BillingGroupDescription": {
      "maxLength": 2028,
      "pattern": "[\\p{Graph}\\x20]*",
      "type": "string"
    },
    "BillingGroupId": {
      "maxLength": 128,
      "minLength": 1,
      "pattern": "[a-zA-Z0-9\\-]+",
      "type": "string"
    },
    "BillingGroupMetadata": {
      "description": "Additional information about the billing group.",
      "properties": {
        "creationDate": {
          "$ref": "#/definitions/CreationDate",
          "description": "The date the billing group was created."
        }
      },
      "type": "object"
    },
    "BillingGroupName": {
      "maxLength": 128,
      "minLength": 1,
      "pattern": "[a-zA-Z0-9:_-]+",
      "type": "string"
    },
    "BillingGroupNameAndArnList": {
      "items": {
        "$ref": "#/definitions/GroupNameAndArn"
      },
      "type": "array"
    },
    "BillingGroupProperties": {
      "description": "The properties of a billing group.",
      "properties": {
        "billingGroupDescription": {
          "$ref": "#/definitions/BillingGroupDescription",
          "description": "The description of the billing group."
        }
      },
      "type": "object"
    },
    "Boolean": {
      "type": "boolean"
    },
    "BucketName": {
      "type": "string"
    },
    "CACertificate": {
      "description": "A CA certificate.",
      "properties": {
        "certificateArn": {
          "$ref": "#/definitions/CertificateArn",
          "description": "The ARN of the CA certificate."
        },
        "certificateId": {
          "$ref": "#/definitions/CertificateId",
          "description": "The ID of the CA certificate."
        },
        "creationDate": {
          "$ref": "#/definitions/DateType",
          "description": "The date the CA certificate was created."
        },
        "status": {
          "$ref": "#/definitions/CACertificateStatus",
          "description": "<p>The status of the CA certificate.</p> <p>The status value REGISTER_INACTIVE is deprecated and should not be used.</p>"
        }
      },
      "type": "object"
    },
    "CACertificateDescription": {
      "description": "Describes a CA certificate.",
      "properties": {
        "autoRegistrationStatus": {
          "$ref": "#/definitions/AutoRegistrationStatus",
          "description": "Whether the CA certificate configured for auto registration of device certificates. Valid values are \"ENABLE\" and \"DISABLE\""
        },
        "certificateArn": {
          "$ref": "#/definitions/CertificateArn",
          "description": "The CA certificate ARN."
        },
        "certificateId": {
          "$ref": "#/definitions/CertificateId",
          "description": "The CA certificate ID."
        },
        "certificatePem": {
          "$ref": "#/definitions/CertificatePem",
          "description": "The CA certificate data, in PEM format."
        },
        "creationDate": {
          "$ref": "#/definitions/DateType",
          "description": "The date the CA certificate was created."
        },
        "customerVersion": {
          "$ref": "#/definitions/CustomerVersion",
          "description": "The customer version of the CA certificate."
        },
        "generationId": {
          "$ref": "#/definitions/GenerationId",
          "description": "The generation ID of the CA certificate."
        },
        "lastModifiedDate": {
          "$ref": "#/definitions/DateType",
          "description": "The date the CA certificate was last modified."
        },
        "ownedBy": {
          "$ref": "#/definitions/AwsAccountId",
          "description": "The owner of the CA certificate."
        },
        "status": {
          "$ref": "#/definitions/CACertificateStatus",
          "description": "The status of a CA certificate."
        },
        "validity": {
          "$ref": "#/definitions/CertificateValidity",
          "description": "When the CA certificate is valid."
        }
      },
      "type": "object"
    },
    "CACertificateStatus": {
      "enum": [
        "ACTIVE",
        "INACTIVE"
      ],
      "type": "string"
    },
    "CACertificates": {
      "items": {
        "$ref": "#/definitions/CACertificate"
      },
      "type": "array"
    },
    "CancelAuditTaskRequest": {
      "properties": {},
      "type": "object"
    },
    "CancelAuditTaskResponse": {
      "properties": {},
      "type": "object"
    },
    "CancelCertificateTransferRequest": {
      "description": "The input for the CancelCertificateTransfer operation.",
      "properties": {},
      "type": "object"
    },
    "CancelJobExecutionRequest": {
      "properties": {
        "expectedVersion": {
          "$ref": "#/definitions/ExpectedVersion",
          "description": "(Optional) The expected current version of the job execution. Each time you update the job execution, its version is incremented. If the version of the job execution stored in Jobs does not match, the update is rejected with a VersionMismatch error, and an ErrorResponse that contains the current job execution status data is returned. (This makes it unnecessary to perform a separate DescribeJobExecution request in order to obtain the job execution status data.)"
        },
        "statusDetails": {
          "$ref": "#/definitions/DetailsMap",
          "description": "A collection of name/value pairs that describe the status of the job execution. If not specified, the statusDetails are unchanged. You can specify at most 10 name/value pairs."
        }
      },
      "type": "object"
    },
    "CancelJobRequest": {
      "properties": {
        "comment": {
          "$ref": "#/definitions/Comment",
          "description": "An optional comment string describing why the job was canceled."
        },
        "reasonCode": {
          "$ref": "#/definitions/ReasonCode",
          "description": "(Optional)A reason code string that explains why the job was canceled."
        }
      },
      "type": "object"
    },
    "CancelJobResponse": {
      "properties": {
        "description": {
          "$ref": "#/definitions/JobDescription",
          "description": "A short text description of the job."
        },
        "jobArn": {
          "$ref": "#/definitions/JobArn",
          "description": "The job ARN."
        },
        "jobId": {
          "$ref": "#/definitions/JobId",
          "description": "The unique identifier you assigned to this job when it was created."
        }
      },
      "type": "object"
    },
    "CanceledChecksCount": {
      "type": "integer"
    },
    "CanceledThings": {
      "type": "integer"
    },
    "CannedAccessControlList": {
      "enum": [
        "private",
        "public-read",
        "public-read-write",
        "aws-exec-read",
        "authenticated-read",
        "bucket-owner-read",
        "bucket-owner-full-control",
        "log-delivery-write"
      ],
      "type": "string"
    },
    "Certificate": {
      "description": "Information about a certificate.",
      "properties": {
        "certificateArn": {
          "$ref": "#/definitions/CertificateArn",
          "description": "The ARN of the certificate."
        },
        "certificateId": {
          "$ref": "#/definitions/CertificateId",
          "description": "The ID of the certificate. (The last part of the certificate ARN contains the certificate ID.)"
        },
        "creationDate": {
          "$ref": "#/definitions/DateType",
          "description": "The date and time the certificate was created."
        },
        "status": {
          "$ref": "#/definitions/CertificateStatus",
          "description": "<p>The status of the certificate.</p> <p>The status value REGISTER_INACTIVE is deprecated and should not be used.</p>"
        }
      },
      "type": "object"
    },
    "CertificateArn": {
      "type": "string"
    },
    "CertificateConflictException": {},
    "CertificateDescription": {
      "description": "Describes a certificate.",
      "properties": {
        "caCertificateId": {
          "$ref": "#/definitions/CertificateId",
          "description": "The certificate ID of the CA certificate used to sign this certificate."
        },
        "certificateArn": {
          "$ref": "#/definitions/CertificateArn",
          "description": "The ARN of the certificate."
        },
        "certificateId": {
          "$ref": "#/definitions/CertificateId",
          "description": "The ID of the certificate."
        },
        "certificatePem": {
          "$ref": "#/definitions/CertificatePem",
          "description": "The certificate data, in PEM format."
        },
        "creationDate": {
          "$ref": "#/definitions/DateType",
          "description": "The date and time the certificate was created."
        },
        "customerVersion": {
          "$ref": "#/definitions/CustomerVersion",
          "description": "The customer version of the certificate."
        },
        "generationId": {
          "$ref": "#/definitions/GenerationId",
          "description": "The generation ID of the certificate."
        },
        "lastModifiedDate": {
          "$ref": "#/definitions/DateType",
          "description": "The date and time the certificate was last modified."
        },
        "ownedBy": {
          "$ref": "#/definitions/AwsAccountId",
          "description": "The ID of the AWS account that owns the certificate."
        },
        "previousOwnedBy": {
          "$ref": "#/definitions/AwsAccountId",
          "description": "The ID of the AWS account of the previous owner of the certificate."
        },
        "status": {
          "$ref": "#/definitions/CertificateStatus",
          "description": "The status of the certificate."
        },
        "transferData": {
          "$ref": "#/definitions/TransferData",
          "description": "The transfer data."
        },
        "validity": {
          "$ref": "#/definitions/CertificateValidity",
          "description": "When the certificate is valid."
        }
      },
      "type": "object"
    },
    "CertificateId": {
      "maxLength": 64,
      "minLength": 64,
      "pattern": "(0x)?[a-fA-F0-9]+",
      "type": "string"
    },
    "CertificateName": {
      "type": "string"
    },
    "CertificatePathOnDevice": {
      "type": "string"
    },
    "CertificatePem": {
      "description": "The PEM of a certificate.",
      "maxLength": 65536,
      "minLength": 1,
      "type": "string"
    },
    "CertificateSigningRequest": {
      "minLength": 1,
      "type": "string"
    },
    "CertificateStateException": {},
    "CertificateStatus": {
      "enum": [
        "ACTIVE",
        "INACTIVE",
        "REVOKED",
        "PENDING_TRANSFER",
        "REGISTER_INACTIVE",
        "PENDING_ACTIVATION"
      ],
      "type": "string"
    },
    "CertificateValidationException": {},
    "CertificateValidity": {
      "description": "When the certificate is valid.",
      "properties": {
        "notAfter": {
          "$ref": "#/definitions/DateType",
          "description": "The certificate is not valid after this date."
        },
        "notBefore": {
          "$ref": "#/definitions/DateType",
          "description": "The certificate is not valid before this date."
        }
      },
      "type": "object"
    },
    "Certificates": {
      "items": {
        "$ref": "#/definitions/Certificate"
      },
      "type": "array"
    },
    "ChannelName": {
      "type": "string"
    },
    "CheckCompliant": {
      "type": "boolean"
    },
    "Cidr": {
      "maxLength": 43,
      "minLength": 2,
      "pattern": "[a-fA-F0-9:\\.\\/]+",
      "type": "string"
    },
    "Cidrs": {
      "items": {
        "$ref": "#/definitions/Cidr"
      },
      "type": "array"
    },
    "ClearDefaultAuthorizerRequest": {
      "properties": {},
      "type": "object"
    },
    "ClearDefaultAuthorizerResponse": {
      "properties": {},
      "type": "object"
    },
    "ClientId": {
      "type": "string"
    },
    "CloudwatchAlarmAction": {
      "description": "Describes an action that updates a CloudWatch alarm.",
      "properties": {
        "alarmName": {
          "$ref": "#/definitions/AlarmName",
          "description": "The CloudWatch alarm name."
        },
        "roleArn": {
          "$ref": "#/definitions/AwsArn",
          "description": "The IAM role that allows access to the CloudWatch alarm."
        },
        "stateReason": {
          "$ref": "#/definitions/StateReason",
          "description": "The reason for the alarm change."
        },
        "stateValue": {
          "$ref": "#/definitions/StateValue",
          "description": "The value of the alarm state. Acceptable values are: OK, ALARM, INSUFFICIENT_DATA."
        }
      },
      "required": [
        "roleArn",
        "alarmName",
        "stateReason",
        "stateValue"
      ],
      "type": "object"
    },
    "CloudwatchMetricAction": {
      "description": "Describes an action that captures a CloudWatch metric.",
      "properties": {
        "metricName": {
          "$ref": "#/definitions/String",
          "description": "The CloudWatch metric name."
        },
        "metricNamespace": {
          "$ref": "#/definitions/String",
          "description": "The CloudWatch metric namespace name."
        },
        "metricTimestamp": {
          "$ref": "#/definitions/String",
          "description": "An optional <a href=\"http://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/cloudwatch_concepts.html#about_timestamp\">Unix timestamp</a>."
        },
        "metricUnit": {
          "$ref": "#/definitions/String",
          "description": "The <a href=\"http://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/cloudwatch_concepts.html#Unit\">metric unit</a> supported by CloudWatch."
        },
        "metricValue": {
          "$ref": "#/definitions/String",
          "description": "The CloudWatch metric value."
        },
        "roleArn": {
          "$ref": "#/definitions/AwsArn",
          "description": "The IAM role that allows access to the CloudWatch metric."
        }
      },
      "required": [
        "roleArn",
        "metricNamespace",
        "metricName",
        "metricValue",
        "metricUnit"
      ],
      "type": "object"
    },
    "Code": {
      "type": "string"
    },
    "CodeSigning": {
      "description": "Describes the method to use when code signing a file.",
      "properties": {
        "awsSignerJobId": {
          "$ref": "#/definitions/SigningJobId",
          "description": "The ID of the AWSSignerJob which was created to sign the file."
        },
        "customCodeSigning": {
          "$ref": "#/definitions/CustomCodeSigning",
          "description": "A custom method for code signing a file."
        },
        "startSigningJobParameter": {
          "$ref": "#/definitions/StartSigningJobParameter",
          "description": "Describes the code-signing job."
        }
      },
      "type": "object"
    },
    "CodeSigningCertificateChain": {
      "description": "Describes the certificate chain being used when code signing a file.",
      "properties": {
        "certificateName": {
          "$ref": "#/definitions/CertificateName",
          "description": "The name of the certificate."
        },
        "inlineDocument": {
          "$ref": "#/definitions/InlineDocument",
          "description": "A base64 encoded binary representation of the code signing certificate chain."
        }
      },
      "type": "object"
    },
    "CodeSigningSignature": {
      "description": "Describes the signature for a file.",
      "properties": {
        "inlineDocument": {
          "$ref": "#/definitions/Signature",
          "description": "A base64 encoded binary representation of the code signing signature."
        }
      },
      "type": "object"
    },
    "CognitoIdentityPoolId": {
      "type": "string"
    },
    "Comment": {
      "maxLength": 2028,
      "pattern": "[^\\p{C}]+",
      "type": "string"
    },
    "ComparisonOperator": {
      "enum": [
        "less-than",
        "less-than-equals",
        "greater-than",
        "greater-than-equals",
        "in-cidr-set",
        "not-in-cidr-set",
        "in-port-set",
        "not-in-port-set"
      ],
      "type": "string"
    },
    "CompliantChecksCount": {
      "type": "integer"
    },
    "Configuration": {
      "description": "Configuration.",
      "properties": {
        "Enabled": {
          "$ref": "#/definitions/Enabled",
          "description": "True to enable the configuration."
        }
      },
      "type": "object"
    },
    "ConflictingResourceUpdateException": {},
    "ConnectivityTimestamp": {
      "type": "integer"
    },
    "Count": {
      "type": "integer"
    },
    "CreateAuthorizerRequest": {
      "properties": {
        "authorizerFunctionArn": {
          "$ref": "#/definitions/AuthorizerFunctionArn",
          "description": "The ARN of the authorizer's Lambda function."
        },
        "status": {
          "$ref": "#/definitions/AuthorizerStatus",
          "description": "The status of the create authorizer request."
        },
        "tokenKeyName": {
          "$ref": "#/definitions/TokenKeyName",
          "description": "The name of the token key used to extract the token from the HTTP headers."
        },
        "tokenSigningPublicKeys": {
          "$ref": "#/definitions/PublicKeyMap",
          "description": "The public keys used to verify the digital signature returned by your custom authentication service."
        }
      },
      "required": [
        "authorizerFunctionArn",
        "tokenKeyName",
        "tokenSigningPublicKeys"
      ],
      "type": "object"
    },
    "CreateAuthorizerResponse": {
      "properties": {
        "authorizerArn": {
          "$ref": "#/definitions/AuthorizerArn",
          "description": "The authorizer ARN."
        },
        "authorizerName": {
          "$ref": "#/definitions/AuthorizerName",
          "description": "The authorizer's name."
        }
      },
      "type": "object"
    },
    "CreateBillingGroupRequest": {
      "properties": {
        "billingGroupProperties": {
          "$ref": "#/definitions/BillingGroupProperties",
          "description": "The properties of the billing group."
        },
        "tags": {
          "$ref": "#/definitions/TagList",
          "description": "Metadata which can be used to manage the billing group."
        }
      },
      "type": "object"
    },
    "CreateBillingGroupResponse": {
      "properties": {
        "billingGroupArn": {
          "$ref": "#/definitions/BillingGroupArn",
          "description": "The ARN of the billing group."
        },
        "billingGroupId": {
          "$ref": "#/definitions/BillingGroupId",
          "description": "The ID of the billing group."
        },
        "billingGroupName": {
          "$ref": "#/definitions/BillingGroupName",
          "description": "The name you gave to the billing group."
        }
      },
      "type": "object"
    },
    "CreateCertificateFromCsrRequest": {
      "description": "The input for the CreateCertificateFromCsr operation.",
      "properties": {
        "certificateSigningRequest": {
          "$ref": "#/definitions/CertificateSigningRequest",
          "description": "The certificate signing request (CSR)."
        }
      },
      "required": [
        "certificateSigningRequest"
      ],
      "type": "object"
    },
    "CreateCertificateFromCsrResponse": {
      "description": "The output from the CreateCertificateFromCsr operation.",
      "properties": {
        "certificateArn": {
          "$ref": "#/definitions/CertificateArn",
          "description": "The Amazon Resource Name (ARN) of the certificate. You can use the ARN as a principal for policy operations."
        },
        "certificateId": {
          "$ref": "#/definitions/CertificateId",
          "description": "The ID of the certificate. Certificate management operations only take a certificateId."
        },
        "certificatePem": {
          "$ref": "#/definitions/CertificatePem",
          "description": "The certificate data, in PEM format."
        }
      },
      "type": "object"
    },
    "CreateDynamicThingGroupRequest": {
      "properties": {
        "indexName": {
          "$ref": "#/definitions/IndexName",
          "description": "<p>The dynamic thing group index name.</p> <note> <p>Currently one index is supported: \"AWS_Things\".</p> </note>"
        },
        "queryString": {
          "$ref": "#/definitions/QueryString",
          "description": "<p>The dynamic thing group search query string.</p> <p>See <a href=\"http://docs.aws.amazon.com/iot/latest/developerguide/query-syntax.html\">Query Syntax</a> for information about query string syntax.</p>"
        },
        "queryVersion": {
          "$ref": "#/definitions/QueryVersion",
          "description": "<p>The dynamic thing group query version.</p> <note> <p>Currently one query version is supported: \"2017-09-30\". If not specified, the query version defaults to this value.</p> </note>"
        },
        "tags": {
          "$ref": "#/definitions/TagList",
          "description": "Metadata which can be used to manage the dynamic thing group."
        },
        "thingGroupProperties": {
          "$ref": "#/definitions/ThingGroupProperties",
          "description": "The dynamic thing group properties."
        }
      },
      "required": [
        "queryString"
      ],
      "type": "object"
    },
    "CreateDynamicThingGroupResponse": {
      "properties": {
        "indexName": {
          "$ref": "#/definitions/IndexName",
          "description": "The dynamic thing group index name."
        },
        "queryString": {
          "$ref": "#/definitions/QueryString",
          "description": "The dynamic thing group search query string."
        },
        "queryVersion": {
          "$ref": "#/definitions/QueryVersion",
          "description": "The dynamic thing group query version."
        },
        "thingGroupArn": {
          "$ref": "#/definitions/ThingGroupArn",
          "description": "The dynamic thing group ARN."
        },
        "thingGroupId": {
          "$ref": "#/definitions/ThingGroupId",
          "description": "The dynamic thing group ID."
        },
        "thingGroupName": {
          "$ref": "#/definitions/ThingGroupName",
          "description": "The dynamic thing group name."
        }
      },
      "type": "object"
    },
    "CreateJobRequest": {
      "properties": {
        "abortConfig": {
          "$ref": "#/definitions/AbortConfig",
          "description": "Allows you to create criteria to abort a job."
        },
        "description": {
          "$ref": "#/definitions/JobDescription",
          "description": "A short text description of the job."
        },
        "document": {
          "$ref": "#/definitions/JobDocument",
          "description": "<p>The job document.</p> <note> <p>If the job document resides in an S3 bucket, you must use a placeholder link when specifying the document.</p> <p>The placeholder link is of the following form:</p> <p> <code>${aws:iot:s3-presigned-url:https://s3.amazonaws.com/<i>bucket</i>/<i>key</i>}</code> </p> <p>where <i>bucket</i> is your bucket name and <i>key</i> is the object in the bucket to which you are linking.</p> </note>"
        },
        "documentSource": {
          "$ref": "#/definitions/JobDocumentSource",
          "description": "An S3 link to the job document."
        },
        "jobExecutionsRolloutConfig": {
          "$ref": "#/definitions/JobExecutionsRolloutConfig",
          "description": "Allows you to create a staged rollout of the job."
        },
        "presignedUrlConfig": {
          "$ref": "#/definitions/PresignedUrlConfig",
          "description": "Configuration information for pre-signed S3 URLs."
        },
        "tags": {
          "$ref": "#/definitions/TagList",
          "description": "Metadata which can be used to manage the job."
        },
        "targetSelection": {
          "$ref": "#/definitions/TargetSelection",
          "description": "Specifies whether the job will continue to run (CONTINUOUS), or will be complete after all those things specified as targets have completed the job (SNAPSHOT). If continuous, the job may also be run on a thing when a change is detected in a target. For example, a job will run on a thing when the thing is added to a target group, even after the job was completed by all things originally in the group."
        },
        "targets": {
          "$ref": "#/definitions/JobTargets",
          "description": "A list of things and thing groups to which the job should be sent."
        },
        "timeoutConfig": {
          "$ref": "#/definitions/TimeoutConfig",
          "description": "Specifies the amount of time each device has to finish its execution of the job. The timer is started when the job execution status is set to <code>IN_PROGRESS</code>. If the job execution status is not set to another terminal state before the time expires, it will be automatically set to <code>TIMED_OUT</code>."
        }
      },
      "required": [
        "targets"
      ],
      "type": "object"
    },
    "CreateJobResponse": {
      "properties": {
        "description": {
          "$ref": "#/definitions/JobDescription",
          "description": "The job description."
        },
        "jobArn": {
          "$ref": "#/definitions/JobArn",
          "description": "The job ARN."
        },
        "jobId": {
          "$ref": "#/definitions/JobId",
          "description": "The unique identifier you assigned to this job."
        }
      },
      "type": "object"
    },
    "CreateKeysAndCertificateRequest": {
      "description": "The input for the CreateKeysAndCertificate operation.",
      "properties": {},
      "type": "object"
    },
    "CreateKeysAndCertificateResponse": {
      "description": "The output of the CreateKeysAndCertificate operation.",
      "properties": {
        "certificateArn": {
          "$ref": "#/definitions/CertificateArn",
          "description": "The ARN of the certificate."
        },
        "certificateId": {
          "$ref": "#/definitions/CertificateId",
          "description": "The ID of the certificate. AWS IoT issues a default subject name for the certificate (for example, AWS IoT Certificate)."
        },
        "certificatePem": {
          "$ref": "#/definitions/CertificatePem",
          "description": "The certificate data, in PEM format."
        },
        "keyPair": {
          "$ref": "#/definitions/KeyPair",
          "description": "The generated key pair."
        }
      },
      "type": "object"
    },
    "CreateOTAUpdateRequest": {
      "properties": {
        "additionalParameters": {
          "$ref": "#/definitions/AdditionalParameterMap",
          "description": "A list of additional OTA update parameters which are name-value pairs."
        },
        "awsJobExecutionsRolloutConfig": {
          "$ref": "#/definitions/AwsJobExecutionsRolloutConfig",
          "description": "Configuration for the rollout of OTA updates."
        },
        "description": {
          "$ref": "#/definitions/OTAUpdateDescription",
          "description": "The description of the OTA update."
        },
        "files": {
          "$ref": "#/definitions/OTAUpdateFiles",
          "description": "The files to be streamed by the OTA update."
        },
        "roleArn": {
          "$ref": "#/definitions/RoleArn",
          "description": "The IAM role that allows access to the AWS IoT Jobs service."
        },
        "targetSelection": {
          "$ref": "#/definitions/TargetSelection",
          "description": "Specifies whether the update will continue to run (CONTINUOUS), or will be complete after all the things specified as targets have completed the update (SNAPSHOT). If continuous, the update may also be run on a thing when a change is detected in a target. For example, an update will run on a thing when the thing is added to a target group, even after the update was completed by all things originally in the group. Valid values: CONTINUOUS | SNAPSHOT."
        },
        "targets": {
          "$ref": "#/definitions/Targets",
          "description": "The targeted devices to receive OTA updates."
        }
      },
      "required": [
        "targets",
        "files",
        "roleArn"
      ],
      "type": "object"
    },
    "CreateOTAUpdateResponse": {
      "properties": {
        "awsIotJobArn": {
          "$ref": "#/definitions/AwsIotJobArn",
          "description": "The AWS IoT job ARN associated with the OTA update."
        },
        "awsIotJobId": {
          "$ref": "#/definitions/AwsIotJobId",
          "description": "The AWS IoT job ID associated with the OTA update."
        },
        "otaUpdateArn": {
          "$ref": "#/definitions/OTAUpdateArn",
          "description": "The OTA update ARN."
        },
        "otaUpdateId": {
          "$ref": "#/definitions/OTAUpdateId",
          "description": "The OTA update ID."
        },
        "otaUpdateStatus": {
          "$ref": "#/definitions/OTAUpdateStatus",
          "description": "The OTA update status."
        }
      },
      "type": "object"
    },
    "CreatePolicyRequest": {
      "description": "The input for the CreatePolicy operation.",
      "properties": {
        "policyDocument": {
          "$ref": "#/definitions/PolicyDocument",
          "description": "The JSON document that describes the policy. <b>policyDocument</b> must have a minimum length of 1, with a maximum length of 2048, excluding whitespace."
        }
      },
      "required": [
        "policyDocument"
      ],
      "type": "object"
    },
    "CreatePolicyResponse": {
      "description": "The output from the CreatePolicy operation.",
      "properties": {
        "policyArn": {
          "$ref": "#/definitions/PolicyArn",
          "description": "The policy ARN."
        },
        "policyDocument": {
          "$ref": "#/definitions/PolicyDocument",
          "description": "The JSON document that describes the policy."
        },
        "policyName": {
          "$ref": "#/definitions/PolicyName",
          "description": "The policy name."
        },
        "policyVersionId": {
          "$ref": "#/definitions/PolicyVersionId",
          "description": "The policy version ID."
        }
      },
      "type": "object"
    },
    "CreatePolicyVersionRequest": {
      "description": "The input for the CreatePolicyVersion operation.",
      "properties": {
        "policyDocument": {
          "$ref": "#/definitions/PolicyDocument",
          "description": "The JSON document that describes the policy. Minimum length of 1. Maximum length of 2048, excluding whitespace."
        }
      },
      "required": [
        "policyDocument"
      ],
      "type": "object"
    },
    "CreatePolicyVersionResponse": {
      "description": "The output of the CreatePolicyVersion operation.",
      "properties": {
        "isDefaultVersion": {
          "$ref": "#/definitions/IsDefaultVersion",
          "description": "Specifies whether the policy version is the default."
        },
        "policyArn": {
          "$ref": "#/definitions/PolicyArn",
          "description": "The policy ARN."
        },
        "policyDocument": {
          "$ref": "#/definitions/PolicyDocument",
          "description": "The JSON document that describes the policy."
        },
        "policyVersionId": {
          "$ref": "#/definitions/PolicyVersionId",
          "description": "The policy version ID."
        }
      },
      "type": "object"
    },
    "CreateRoleAliasRequest": {
      "properties": {
        "credentialDurationSeconds": {
          "$ref": "#/definitions/CredentialDurationSeconds",
          "description": "How long (in seconds) the credentials will be valid."
        },
        "roleArn": {
          "$ref": "#/definitions/RoleArn",
          "description": "The role ARN."
        }
      },
      "required": [
        "roleArn"
      ],
      "type": "object"
    },
    "CreateRoleAliasResponse": {
      "properties": {
        "roleAlias": {
          "$ref": "#/definitions/RoleAlias",
          "description": "The role alias."
        },
        "roleAliasArn": {
          "$ref": "#/definitions/RoleAliasArn",
          "description": "The role alias ARN."
        }
      },
      "type": "object"
    },
    "CreateScheduledAuditRequest": {
      "properties": {
        "dayOfMonth": {
          "$ref": "#/definitions/DayOfMonth",
          "description": "The day of the month on which the scheduled audit takes place. Can be \"1\" through \"31\" or \"LAST\". This field is required if the \"frequency\" parameter is set to \"MONTHLY\". If days 29-31 are specified, and the month does not have that many days, the audit takes place on the \"LAST\" day of the month."
        },
        "dayOfWeek": {
          "$ref": "#/definitions/DayOfWeek",
          "description": "The day of the week on which the scheduled audit takes place. Can be one of \"SUN\", \"MON\", \"TUE\", \"WED\", \"THU\", \"FRI\" or \"SAT\". This field is required if the \"frequency\" parameter is set to \"WEEKLY\" or \"BIWEEKLY\"."
        },
        "frequency": {
          "$ref": "#/definitions/AuditFrequency",
          "description": "How often the scheduled audit takes place. Can be one of \"DAILY\", \"WEEKLY\", \"BIWEEKLY\" or \"MONTHLY\". The actual start time of each audit is determined by the system."
        },
        "targetCheckNames": {
          "$ref": "#/definitions/TargetAuditCheckNames",
          "description": "Which checks are performed during the scheduled audit. Checks must be enabled for your account. (Use <code>DescribeAccountAuditConfiguration</code> to see the list of all checks including those that are enabled or <code>UpdateAccountAuditConfiguration</code> to select which checks are enabled.)"
        }
      },
      "required": [
        "frequency",
        "targetCheckNames"
      ],
      "type": "object"
    },
    "CreateScheduledAuditResponse": {
      "properties": {
        "scheduledAuditArn": {
          "$ref": "#/definitions/ScheduledAuditArn",
          "description": "The ARN of the scheduled audit."
        }
      },
      "type": "object"
    },
    "CreateSecurityProfileRequest": {
      "properties": {
        "alertTargets": {
          "$ref": "#/definitions/AlertTargets",
          "description": "Specifies the destinations to which alerts are sent. (Alerts are always sent to the console.) Alerts are generated when a device (thing) violates a behavior."
        },
        "behaviors": {
          "$ref": "#/definitions/Behaviors",
          "description": "Specifies the behaviors that, when violated by a device (thing), cause an alert."
        },
        "securityProfileDescription": {
          "$ref": "#/definitions/SecurityProfileDescription",
          "description": "A description of the security profile."
        },
        "tags": {
          "$ref": "#/definitions/TagList",
          "description": "Metadata which can be used to manage the security profile."
        }
      },
      "required": [
        "behaviors"
      ],
      "type": "object"
    },
    "CreateSecurityProfileResponse": {
      "properties": {
        "securityProfileArn": {
          "$ref": "#/definitions/SecurityProfileArn",
          "description": "The ARN of the security profile."
        },
        "securityProfileName": {
          "$ref": "#/definitions/SecurityProfileName",
          "description": "The name you gave to the security profile."
        }
      },
      "type": "object"
    },
    "CreateStreamRequest": {
      "properties": {
        "description": {
          "$ref": "#/definitions/StreamDescription",
          "description": "A description of the stream."
        },
        "files": {
          "$ref": "#/definitions/StreamFiles",
          "description": "The files to stream."
        },
        "roleArn": {
          "$ref": "#/definitions/RoleArn",
          "description": "An IAM role that allows the IoT service principal assumes to access your S3 files."
        }
      },
      "required": [
        "files",
        "roleArn"
      ],
      "type": "object"
    },
    "CreateStreamResponse": {
      "properties": {
        "description": {
          "$ref": "#/definitions/StreamDescription",
          "description": "A description of the stream."
        },
        "streamArn": {
          "$ref": "#/definitions/StreamArn",
          "description": "The stream ARN."
        },
        "streamId": {
          "$ref": "#/definitions/StreamId",
          "description": "The stream ID."
        },
        "streamVersion": {
          "$ref": "#/definitions/StreamVersion",
          "description": "The version of the stream."
        }
      },
      "type": "object"
    },
    "CreateThingGroupRequest": {
      "properties": {
        "parentGroupName": {
          "$ref": "#/definitions/ThingGroupName",
          "description": "The name of the parent thing group."
        },
        "tags": {
          "$ref": "#/definitions/TagList",
          "description": "Metadata which can be used to manage the thing group."
        },
        "thingGroupProperties": {
          "$ref": "#/definitions/ThingGroupProperties",
          "description": "The thing group properties."
        }
      },
      "type": "object"
    },
    "CreateThingGroupResponse": {
      "properties": {
        "thingGroupArn": {
          "$ref": "#/definitions/ThingGroupArn",
          "description": "The thing group ARN."
        },
        "thingGroupId": {
          "$ref": "#/definitions/ThingGroupId",
          "description": "The thing group ID."
        },
        "thingGroupName": {
          "$ref": "#/definitions/ThingGroupName",
          "description": "The thing group name."
        }
      },
      "type": "object"
    },
    "CreateThingRequest": {
      "description": "The input for the CreateThing operation.",
      "properties": {
        "attributePayload": {
          "$ref": "#/definitions/AttributePayload",
          "description": "<p>The attribute payload, which consists of up to three name/value pairs in a JSON document. For example:</p> <p> <code>{\\\"attributes\\\":{\\\"string1\\\":\\\"string2\\\"}}</code> </p>"
        },
        "billingGroupName": {
          "$ref": "#/definitions/BillingGroupName",
          "description": "The name of the billing group the thing will be added to."
        },
        "thingTypeName": {
          "$ref": "#/definitions/ThingTypeName",
          "description": "The name of the thing type associated with the new thing."
        }
      },
      "type": "object"
    },
    "CreateThingResponse": {
      "description": "The output of the CreateThing operation.",
      "properties": {
        "thingArn": {
          "$ref": "#/definitions/ThingArn",
          "description": "The ARN of the new thing."
        },
        "thingId": {
          "$ref": "#/definitions/ThingId",
          "description": "The thing ID."
        },
        "thingName": {
          "$ref": "#/definitions/ThingName",
          "description": "The name of the new thing."
        }
      },
      "type": "object"
    },
    "CreateThingTypeRequest": {
      "description": "The input for the CreateThingType operation.",
      "properties": {
        "tags": {
          "$ref": "#/definitions/TagList",
          "description": "Metadata which can be used to manage the thing type."
        },
        "thingTypeProperties": {
          "$ref": "#/definitions/ThingTypeProperties",
          "description": "The ThingTypeProperties for the thing type to create. It contains information about the new thing type including a description, and a list of searchable thing attribute names."
        }
      },
      "type": "object"
    },
    "CreateThingTypeResponse": {
      "description": "The output of the CreateThingType operation.",
      "properties": {
        "thingTypeArn": {
          "$ref": "#/definitions/ThingTypeArn",
          "description": "The Amazon Resource Name (ARN) of the thing type."
        },
        "thingTypeId": {
          "$ref": "#/definitions/ThingTypeId",
          "description": "The thing type ID."
        },
        "thingTypeName": {
          "$ref": "#/definitions/ThingTypeName",
          "description": "The name of the thing type."
        }
      },
      "type": "object"
    },
    "CreateTopicRuleRequest": {
      "description": "The input for the CreateTopicRule operation.",
      "properties": {
        "topicRulePayload": {
          "$ref": "#/definitions/TopicRulePayload",
          "description": "The rule payload."
        }
      },
      "required": [
        "topicRulePayload"
      ],
      "type": "object"
    },
    "CreatedAtDate": {
      "format": "date-time",
      "type": "string"
    },
    "CreationDate": {
      "format": "date-time",
      "type": "string"
    },
    "CredentialDurationSeconds": {
      "maximum": 3600,
      "minimum": 900,
      "type": "integer"
    },
    "CustomCodeSigning": {
      "description": "Describes a custom method used to code sign a file.",
      "properties": {
        "certificateChain": {
          "$ref": "#/definitions/CodeSigningCertificateChain",
          "description": "The certificate chain."
        },
        "hashAlgorithm": {
          "$ref": "#/definitions/HashAlgorithm",
          "description": "The hash algorithm used to code sign the file."
        },
        "signature": {
          "$ref": "#/definitions/CodeSigningSignature",
          "description": "The signature for the file."
        },
        "signatureAlgorithm": {
          "$ref": "#/definitions/SignatureAlgorithm",
          "description": "The signature algorithm used to code sign the file."
        }
      },
      "type": "object"
    },
    "CustomerVersion": {
      "minimum": 1,
      "type": "integer"
    },
    "DateType": {
      "format": "date-time",
      "type": "string"
    },
    "DayOfMonth": {
      "pattern": "^([1-9]|[12][0-9]|3[01])$|^LAST$",
      "type": "string"
    },
    "DayOfWeek": {
      "enum": [
        "SUN",
        "MON",
        "TUE",
        "WED",
        "THU",
        "FRI",
        "SAT"
      ],
      "type": "string"
    },
    "DeleteAccountAuditConfigurationRequest": {
      "properties": {},
      "type": "object"
    },
    "DeleteAccountAuditConfigurationResponse": {
      "properties": {},
      "type": "object"
    },
    "DeleteAuthorizerRequest": {
      "properties": {},
      "type": "object"
    },
    "DeleteAuthorizerResponse": {
      "properties": {},
      "type": "object"
    },
    "DeleteBillingGroupRequest": {
      "properties": {},
      "type": "object"
    },
    "DeleteBillingGroupResponse": {
      "properties": {},
      "type": "object"
    },
    "DeleteCACertificateRequest": {
      "description": "Input for the DeleteCACertificate operation.",
      "properties": {},
      "type": "object"
    },
    "DeleteCACertificateResponse": {
      "description": "The output for the DeleteCACertificate operation.",
      "properties": {},
      "type": "object"
    },
    "DeleteCertificateRequest": {
      "description": "The input for the DeleteCertificate operation.",
      "properties": {},
      "type": "object"
    },
    "DeleteConflictException": {},
    "DeleteDynamicThingGroupRequest": {
      "properties": {},
      "type": "object"
    },
    "DeleteDynamicThingGroupResponse": {
      "properties": {},
      "type": "object"
    },
    "DeleteJobExecutionRequest": {
      "properties": {},
      "type": "object"
    },
    "DeleteJobRequest": {
      "properties": {},
      "type": "object"
    },
    "DeleteOTAUpdateRequest": {
      "properties": {},
      "type": "object"
    },
    "DeleteOTAUpdateResponse": {
      "properties": {},
      "type": "object"
    },
    "DeletePolicyRequest": {
      "description": "The input for the DeletePolicy operation.",
      "properties": {},
      "type": "object"
    },
    "DeletePolicyVersionRequest": {
      "description": "The input for the DeletePolicyVersion operation.",
      "properties": {},
      "type": "object"
    },
    "DeleteRegistrationCodeRequest": {
      "description": "The input for the DeleteRegistrationCode operation.",
      "properties": {},
      "type": "object"
    },
    "DeleteRegistrationCodeResponse": {
      "description": "The output for the DeleteRegistrationCode operation.",
      "properties": {},
      "type": "object"
    },
    "DeleteRoleAliasRequest": {
      "properties": {},
      "type": "object"
    },
    "DeleteRoleAliasResponse": {
      "properties": {},
      "type": "object"
    },
    "DeleteScheduledAuditRequest": {
      "properties": {},
      "type": "object"
    },
    "DeleteScheduledAuditResponse": {
      "properties": {},
      "type": "object"
    },
    "DeleteScheduledAudits": {
      "type": "boolean"
    },
    "DeleteSecurityProfileRequest": {
      "properties": {},
      "type": "object"
    },
    "DeleteSecurityProfileResponse": {
      "properties": {},
      "type": "object"
    },
    "DeleteStream": {
      "type": "boolean"
    },
    "DeleteStreamRequest": {
      "properties": {},
      "type": "object"
    },
    "DeleteStreamResponse": {
      "properties": {},
      "type": "object"
    },
    "DeleteThingGroupRequest": {
      "properties": {},
      "type": "object"
    },
    "DeleteThingGroupResponse": {
      "properties": {},
      "type": "object"
    },
    "DeleteThingRequest": {
      "description": "The input for the DeleteThing operation.",
      "properties": {},
      "type": "object"
    },
    "DeleteThingResponse": {
      "description": "The output of the DeleteThing operation.",
      "properties": {},
      "type": "object"
    },
    "DeleteThingTypeRequest": {
      "description": "The input for the DeleteThingType operation.",
      "properties": {},
      "type": "object"
    },
    "DeleteThingTypeResponse": {
      "description": "The output for the DeleteThingType operation.",
      "properties": {},
      "type": "object"
    },
    "DeleteTopicRuleRequest": {
      "description": "The input for the DeleteTopicRule operation.",
      "properties": {},
      "type": "object"
    },
    "DeleteV2LoggingLevelRequest": {
      "properties": {},
      "type": "object"
    },
    "DeliveryStreamName": {
      "type": "string"
    },
    "Denied": {
      "description": "Contains information that denied the authorization.",
      "properties": {
        "explicitDeny": {
          "$ref": "#/definitions/ExplicitDeny",
          "description": "Information that explicitly denies the authorization. "
        },
        "implicitDeny": {
          "$ref": "#/definitions/ImplicitDeny",
          "description": "Information that implicitly denies the authorization. When a policy doesn't explicitly deny or allow an action on a resource it is considered an implicit deny."
        }
      },
      "type": "object"
    },
    "DeprecateThingTypeRequest": {
      "description": "The input for the DeprecateThingType operation.",
      "properties": {
        "undoDeprecate": {
          "$ref": "#/definitions/UndoDeprecate",
          "description": "Whether to undeprecate a deprecated thing type. If <b>true</b>, the thing type will not be deprecated anymore and you can associate it with things."
        }
      },
      "type": "object"
    },
    "DeprecateThingTypeResponse": {
      "description": "The output for the DeprecateThingType operation.",
      "properties": {},
      "type": "object"
    },
    "DeprecationDate": {
      "format": "date-time",
      "type": "string"
    },
    "DescribeAccountAuditConfigurationRequest": {
      "properties": {},
      "type": "object"
    },
    "DescribeAccountAuditConfigurationResponse": {
      "properties": {
        "auditCheckConfigurations": {
          "$ref": "#/definitions/AuditCheckConfigurations",
          "description": "Which audit checks are enabled and disabled for this account."
        },
        "auditNotificationTargetConfigurations": {
          "$ref": "#/definitions/AuditNotificationTargetConfigurations",
          "description": "Information about the targets to which audit notifications are sent for this account."
        },
        "roleArn": {
          "$ref": "#/definitions/RoleArn",
          "description": "<p>The ARN of the role that grants permission to AWS IoT to access information about your devices, policies, certificates and other items as necessary when performing an audit.</p> <p>On the first call to <code>UpdateAccountAuditConfiguration</code> this parameter is required.</p>"
        }
      },
      "type": "object"
    },
    "DescribeAuditTaskRequest": {
      "properties": {},
      "type": "object"
    },
    "DescribeAuditTaskResponse": {
      "properties": {
        "auditDetails": {
          "$ref": "#/definitions/AuditDetails",
          "description": "Detailed information about each check performed during this audit."
        },
        "scheduledAuditName": {
          "$ref": "#/definitions/ScheduledAuditName",
          "description": "The name of the scheduled audit (only if the audit was a scheduled audit)."
        },
        "taskStartTime": {
          "$ref": "#/definitions/Timestamp",
          "description": "The time the audit started."
        },
        "taskStatistics": {
          "$ref": "#/definitions/TaskStatistics",
          "description": "Statistical information about the audit."
        },
        "taskStatus": {
          "$ref": "#/definitions/AuditTaskStatus",
          "description": "The status of the audit: one of \"IN_PROGRESS\", \"COMPLETED\", \"FAILED\", or \"CANCELED\"."
        },
        "taskType": {
          "$ref": "#/definitions/AuditTaskType",
          "description": "The type of audit: \"ON_DEMAND_AUDIT_TASK\" or \"SCHEDULED_AUDIT_TASK\"."
        }
      },
      "type": "object"
    },
    "DescribeAuthorizerRequest": {
      "properties": {},
      "type": "object"
    },
    "DescribeAuthorizerResponse": {
      "properties": {
        "authorizerDescription": {
          "$ref": "#/definitions/AuthorizerDescription",
          "description": "The authorizer description."
        }
      },
      "type": "object"
    },
    "DescribeBillingGroupRequest": {
      "properties": {},
      "type": "object"
    },
    "DescribeBillingGroupResponse": {
      "properties": {
        "billingGroupArn": {
          "$ref": "#/definitions/BillingGroupArn",
          "description": "The ARN of the billing group."
        },
        "billingGroupId": {
          "$ref": "#/definitions/BillingGroupId",
          "description": "The ID of the billing group."
        },
        "billingGroupMetadata": {
          "$ref": "#/definitions/BillingGroupMetadata",
          "description": "Additional information about the billing group."
        },
        "billingGroupName": {
          "$ref": "#/definitions/BillingGroupName",
          "description": "The name of the billing group."
        },
        "billingGroupProperties": {
          "$ref": "#/definitions/BillingGroupProperties",
          "description": "The properties of the billing group."
        },
        "version": {
          "$ref": "#/definitions/Version",
          "description": "The version of the billing group."
        }
      },
      "type": "object"
    },
    "DescribeCACertificateRequest": {
      "description": "The input for the DescribeCACertificate operation.",
      "properties": {},
      "type": "object"
    },
    "DescribeCACertificateResponse": {
      "description": "The output from the DescribeCACertificate operation.",
      "properties": {
        "certificateDescription": {
          "$ref": "#/definitions/CACertificateDescription",
          "description": "The CA certificate description."
        },
        "registrationConfig": {
          "$ref": "#/definitions/RegistrationConfig",
          "description": "Information about the registration configuration."
        }
      },
      "type": "object"
    },
    "DescribeCertificateRequest": {
      "description": "The input for the DescribeCertificate operation.",
      "properties": {},
      "type": "object"
    },
    "DescribeCertificateResponse": {
      "description": "The output of the DescribeCertificate operation.",
      "properties": {
        "certificateDescription": {
          "$ref": "#/definitions/CertificateDescription",
          "description": "The description of the certificate."
        }
      },
      "type": "object"
    },
    "DescribeDefaultAuthorizerRequest": {
      "properties": {},
      "type": "object"
    },
    "DescribeDefaultAuthorizerResponse": {
      "properties": {
        "authorizerDescription": {
          "$ref": "#/definitions/AuthorizerDescription",
          "description": "The default authorizer's description."
        }
      },
      "type": "object"
    },
    "DescribeEndpointRequest": {
      "description": "The input for the DescribeEndpoint operation.",
      "properties": {},
      "type": "object"
    },
    "DescribeEndpointResponse": {
      "description": "The output from the DescribeEndpoint operation.",
      "properties": {
        "endpointAddress": {
          "$ref": "#/definitions/EndpointAddress",
          "description": "The endpoint. The format of the endpoint is as follows: <i>identifier</i>.iot.<i>region</i>.amazonaws.com."
        }
      },
      "type": "object"
    },
    "DescribeEventConfigurationsRequest": {
      "properties": {},
      "type": "object"
    },
    "DescribeEventConfigurationsResponse": {
      "properties": {
        "creationDate": {
          "$ref": "#/definitions/CreationDate",
          "description": "The creation date of the event configuration."
        },
        "eventConfigurations": {
          "$ref": "#/definitions/EventConfigurations",
          "description": "The event configurations."
        },
        "lastModifiedDate": {
          "$ref": "#/definitions/LastModifiedDate",
          "description": "The date the event configurations were last modified."
        }
      },
      "type": "object"
    },
    "DescribeIndexRequest": {
      "properties": {},
      "type": "object"
    },
    "DescribeIndexResponse": {
      "properties": {
        "indexName": {
          "$ref": "#/definitions/IndexName",
          "description": "The index name."
        },
        "indexStatus": {
          "$ref": "#/definitions/IndexStatus",
          "description": "The index status."
        },
        "schema": {
          "$ref": "#/definitions/IndexSchema",
          "description": "<p>Contains a value that specifies the type of indexing performed. Valid values are:</p> <ul> <li> <p>REGISTRY – Your thing index will contain only registry data.</p> </li> <li> <p>REGISTRY_AND_SHADOW - Your thing index will contain registry data and shadow data.</p> </li> <li> <p>REGISTRY_AND_CONNECTIVITY_STATUS - Your thing index will contain registry data and thing connectivity status data.</p> </li> <li> <p>REGISTRY_AND_SHADOW_AND_CONNECTIVITY_STATUS - Your thing index will contain registry data, shadow data, and thing connectivity status data.</p> </li> </ul>"
        }
      },
      "type": "object"
    },
    "DescribeJobExecutionRequest": {
      "properties": {},
      "type": "object"
    },
    "DescribeJobExecutionResponse": {
      "properties": {
        "execution": {
          "$ref": "#/definitions/JobExecution",
          "description": "Information about the job execution."
        }
      },
      "type": "object"
    },
    "DescribeJobRequest": {
      "properties": {},
      "type": "object"
    },
    "DescribeJobResponse": {
      "properties": {
        "documentSource": {
          "$ref": "#/definitions/JobDocumentSource",
          "description": "An S3 link to the job document."
        },
        "job": {
          "$ref": "#/definitions/Job",
          "description": "Information about the job."
        }
      },
      "type": "object"
    },
    "DescribeRoleAliasRequest": {
      "properties": {},
      "type": "object"
    },
    "DescribeRoleAliasResponse": {
      "properties": {
        "roleAliasDescription": {
          "$ref": "#/definitions/RoleAliasDescription",
          "description": "The role alias description."
        }
      },
      "type": "object"
    },
    "DescribeScheduledAuditRequest": {
      "properties": {},
      "type": "object"
    },
    "DescribeScheduledAuditResponse": {
      "properties": {
        "dayOfMonth": {
          "$ref": "#/definitions/DayOfMonth",
          "description": "The day of the month on which the scheduled audit takes place. Will be \"1\" through \"31\" or \"LAST\". If days 29-31 are specified, and the month does not have that many days, the audit takes place on the \"LAST\" day of the month."
        },
        "dayOfWeek": {
          "$ref": "#/definitions/DayOfWeek",
          "description": "The day of the week on which the scheduled audit takes place. One of \"SUN\", \"MON\", \"TUE\", \"WED\", \"THU\", \"FRI\" or \"SAT\"."
        },
        "frequency": {
          "$ref": "#/definitions/AuditFrequency",
          "description": "How often the scheduled audit takes place. One of \"DAILY\", \"WEEKLY\", \"BIWEEKLY\" or \"MONTHLY\". The actual start time of each audit is determined by the system."
        },
        "scheduledAuditArn": {
          "$ref": "#/definitions/ScheduledAuditArn",
          "description": "The ARN of the scheduled audit."
        },
        "scheduledAuditName": {
          "$ref": "#/definitions/ScheduledAuditName",
          "description": "The name of the scheduled audit."
        },
        "targetCheckNames": {
          "$ref": "#/definitions/TargetAuditCheckNames",
          "description": "Which checks are performed during the scheduled audit. (Note that checks must be enabled for your account. (Use <code>DescribeAccountAuditConfiguration</code> to see the list of all checks including those that are enabled or <code>UpdateAccountAuditConfiguration</code> to select which checks are enabled.)"
        }
      },
      "type": "object"
    },
    "DescribeSecurityProfileRequest": {
      "properties": {},
      "type": "object"
    },
    "DescribeSecurityProfileResponse": {
      "properties": {
        "alertTargets": {
          "$ref": "#/definitions/AlertTargets",
          "description": "Where the alerts are sent. (Alerts are always sent to the console.)"
        },
        "behaviors": {
          "$ref": "#/definitions/Behaviors",
          "description": "Specifies the behaviors that, when violated by a device (thing), cause an alert."
        },
        "creationDate": {
          "$ref": "#/definitions/Timestamp",
          "description": "The time the security profile was created."
        },
        "lastModifiedDate": {
          "$ref": "#/definitions/Timestamp",
          "description": "The time the security profile was last modified."
        },
        "securityProfileArn": {
          "$ref": "#/definitions/SecurityProfileArn",
          "description": "The ARN of the security profile."
        },
        "securityProfileDescription": {
          "$ref": "#/definitions/SecurityProfileDescription",
          "description": "A description of the security profile (associated with the security profile when it was created or updated)."
        },
        "securityProfileName": {
          "$ref": "#/definitions/SecurityProfileName",
          "description": "The name of the security profile."
        },
        "version": {
          "$ref": "#/definitions/Version",
          "description": "The version of the security profile. A new version is generated whenever the security profile is updated."
        }
      },
      "type": "object"
    },
    "DescribeStreamRequest": {
      "properties": {},
      "type": "object"
    },
    "DescribeStreamResponse": {
      "properties": {
        "streamInfo": {
          "$ref": "#/definitions/StreamInfo",
          "description": "Information about the stream."
        }
      },
      "type": "object"
    },
    "DescribeThingGroupRequest": {
      "properties": {},
      "type": "object"
    },
    "DescribeThingGroupResponse": {
      "properties": {
        "indexName": {
          "$ref": "#/definitions/IndexName",
          "description": "The dynamic thing group index name."
        },
        "queryString": {
          "$ref": "#/definitions/QueryString",
          "description": "The dynamic thing group search query string."
        },
        "queryVersion": {
          "$ref": "#/definitions/QueryVersion",
          "description": "The dynamic thing group query version."
        },
        "status": {
          "$ref": "#/definitions/DynamicGroupStatus",
          "description": "The dynamic thing group status."
        },
        "thingGroupArn": {
          "$ref": "#/definitions/ThingGroupArn",
          "description": "The thing group ARN."
        },
        "thingGroupId": {
          "$ref": "#/definitions/ThingGroupId",
          "description": "The thing group ID."
        },
        "thingGroupMetadata": {
          "$ref": "#/definitions/ThingGroupMetadata",
          "description": "Thing group metadata."
        },
        "thingGroupName": {
          "$ref": "#/definitions/ThingGroupName",
          "description": "The name of the thing group."
        },
        "thingGroupProperties": {
          "$ref": "#/definitions/ThingGroupProperties",
          "description": "The thing group properties."
        },
        "version": {
          "$ref": "#/definitions/Version",
          "description": "The version of the thing group."
        }
      },
      "type": "object"
    },
    "DescribeThingRegistrationTaskRequest": {
      "properties": {},
      "type": "object"
    },
    "DescribeThingRegistrationTaskResponse": {
      "properties": {
        "creationDate": {
          "$ref": "#/definitions/CreationDate",
          "description": "The task creation date."
        },
        "failureCount": {
          "$ref": "#/definitions/Count",
          "description": "The number of things that failed to be provisioned."
        },
        "inputFileBucket": {
          "$ref": "#/definitions/RegistryS3BucketName",
          "description": "The S3 bucket that contains the input file."
        },
        "inputFileKey": {
          "$ref": "#/definitions/RegistryS3KeyName",
          "description": "The input file key."
        },
        "lastModifiedDate": {
          "$ref": "#/definitions/LastModifiedDate",
          "description": "The date when the task was last modified."
        },
        "message": {
          "$ref": "#/definitions/ErrorMessage",
          "description": "The message."
        },
        "percentageProgress": {
          "$ref": "#/definitions/Percentage",
          "description": "The progress of the bulk provisioning task expressed as a percentage."
        },
        "roleArn": {
          "$ref": "#/definitions/RoleArn",
          "description": "The role ARN that grants access to the input file bucket."
        },
        "status": {
          "$ref": "#/definitions/Status",
          "description": "The status of the bulk thing provisioning task."
        },
        "successCount": {
          "$ref": "#/definitions/Count",
          "description": "The number of things successfully provisioned."
        },
        "taskId": {
          "$ref": "#/definitions/TaskId",
          "description": "The task ID."
        },
        "templateBody": {
          "$ref": "#/definitions/TemplateBody",
          "description": "The task's template."
        }
      },
      "type": "object"
    },
    "DescribeThingRequest": {
      "description": "The input for the DescribeThing operation.",
      "properties": {},
      "type": "object"
    },
    "DescribeThingResponse": {
      "description": "The output from the DescribeThing operation.",
      "properties": {
        "attributes": {
          "$ref": "#/definitions/Attributes",
          "description": "The thing attributes."
        },
        "billingGroupName": {
          "$ref": "#/definitions/BillingGroupName",
          "description": "The name of the billing group the thing belongs to."
        },
        "defaultClientId": {
          "$ref": "#/definitions/ClientId",
          "description": "The default client ID."
        },
        "thingArn": {
          "$ref": "#/definitions/ThingArn",
          "description": "The ARN of the thing to describe."
        },
        "thingId": {
          "$ref": "#/definitions/ThingId",
          "description": "The ID of the thing to describe."
        },
        "thingName": {
          "$ref": "#/definitions/ThingName",
          "description": "The name of the thing."
        },
        "thingTypeName": {
          "$ref": "#/definitions/ThingTypeName",
          "description": "The thing type name."
        },
        "version": {
          "$ref": "#/definitions/Version",
          "description": "<p>The current version of the thing record in the registry.</p> <note> <p>To avoid unintentional changes to the information in the registry, you can pass the version information in the <code>expectedVersion</code> parameter of the <code>UpdateThing</code> and <code>DeleteThing</code> calls.</p> </note>"
        }
      },
      "type": "object"
    },
    "DescribeThingTypeRequest": {
      "description": "The input for the DescribeThingType operation.",
      "properties": {},
      "type": "object"
    },
    "DescribeThingTypeResponse": {
      "description": "The output for the DescribeThingType operation.",
      "properties": {
        "thingTypeArn": {
          "$ref": "#/definitions/ThingTypeArn",
          "description": "The thing type ARN."
        },
        "thingTypeId": {
          "$ref": "#/definitions/ThingTypeId",
          "description": "The thing type ID."
        },
        "thingTypeMetadata": {
          "$ref": "#/definitions/ThingTypeMetadata",
          "description": "The ThingTypeMetadata contains additional information about the thing type including: creation date and time, a value indicating whether the thing type is deprecated, and a date and time when it was deprecated."
        },
        "thingTypeName": {
          "$ref": "#/definitions/ThingTypeName",
          "description": "The name of the thing type."
        },
        "thingTypeProperties": {
          "$ref": "#/definitions/ThingTypeProperties",
          "description": "The ThingTypeProperties contains information about the thing type including description, and a list of searchable thing attribute names."
        }
      },
      "type": "object"
    },
    "Description": {
      "type": "string"
    },
    "Destination": {
      "description": "Describes the location of the updated firmware.",
      "properties": {
        "s3Destination": {
          "$ref": "#/definitions/S3Destination",
          "description": "Describes the location in S3 of the updated firmware."
        }
      },
      "type": "object"
    },
    "DetachPolicyRequest": {
      "properties": {
        "target": {
          "$ref": "#/definitions/PolicyTarget",
          "description": "The target from which the policy will be detached."
        }
      },
      "required": [
        "target"
      ],
      "type": "object"
    },
    "DetachPrincipalPolicyRequest": {
      "description": "The input for the DetachPrincipalPolicy operation.",
      "properties": {},
      "type": "object"
    },
    "DetachSecurityProfileRequest": {
      "properties": {},
      "type": "object"
    },
    "DetachSecurityProfileResponse": {
      "properties": {},
      "type": "object"
    },
    "DetachThingPrincipalRequest": {
      "description": "The input for the DetachThingPrincipal operation.",
      "properties": {},
      "type": "object"
    },
    "DetachThingPrincipalResponse": {
      "description": "The output from the DetachThingPrincipal operation.",
      "properties": {},
      "type": "object"
    },
    "DetailsKey": {
      "maxLength": 128,
      "minLength": 1,
      "pattern": "[a-zA-Z0-9:_-]+",
      "type": "string"
    },
    "DetailsMap": {
      "items": {
        "properties": {
          "key": {
            "$ref": "#/definitions/DetailsKey"
          },
          "value": {
            "$ref": "#/definitions/DetailsValue"
          }
        },
        "type": "object"
      },
      "type": "array"
    },
    "DetailsValue": {
      "maxLength": 1024,
      "minLength": 1,
      "pattern": "[^\\p\\{C\\}]*\\+",
      "type": "string"
    },
    "DisableAllLogs": {
      "type": "boolean"
    },
    "DisableTopicRuleRequest": {
      "description": "The input for the DisableTopicRuleRequest operation.",
      "properties": {},
      "type": "object"
    },
    "DurationSeconds": {
      "type": "integer"
    },
    "DynamicGroupStatus": {
      "enum": [
        "ACTIVE",
        "BUILDING",
        "REBUILDING"
      ],
      "type": "string"
    },
    "DynamoDBAction": {
      "description": "<p>Describes an action to write to a DynamoDB table.</p> <p>The <code>tableName</code>, <code>hashKeyField</code>, and <code>rangeKeyField</code> values must match the values used when you created the table.</p> <p>The <code>hashKeyValue</code> and <code>rangeKeyvalue</code> fields use a substitution template syntax. These templates provide data at runtime. The syntax is as follows: ${<i>sql-expression</i>}.</p> <p>You can specify any valid expression in a WHERE or SELECT clause, including JSON properties, comparisons, calculations, and functions. For example, the following field uses the third level of the topic:</p> <p> <code>\"hashKeyValue\": \"${topic(3)}\"</code> </p> <p>The following field uses the timestamp:</p> <p> <code>\"rangeKeyValue\": \"${timestamp()}\"</code> </p>",
      "properties": {
        "hashKeyField": {
          "$ref": "#/definitions/HashKeyField",
          "description": "The hash key name."
        },
        "hashKeyType": {
          "$ref": "#/definitions/DynamoKeyType",
          "description": "The hash key type. Valid values are \"STRING\" or \"NUMBER\""
        },
        "hashKeyValue": {
          "$ref": "#/definitions/HashKeyValue",
          "description": "The hash key value."
        },
        "operation": {
          "$ref": "#/definitions/DynamoOperation",
          "description": "The type of operation to be performed. This follows the substitution template, so it can be <code>${operation}</code>, but the substitution must result in one of the following: <code>INSERT</code>, <code>UPDATE</code>, or <code>DELETE</code>."
        },
        "payloadField": {
          "$ref": "#/definitions/PayloadField",
          "description": "The action payload. This name can be customized."
        },
        "rangeKeyField": {
          "$ref": "#/definitions/RangeKeyField",
          "description": "The range key name."
        },
        "rangeKeyType": {
          "$ref": "#/definitions/DynamoKeyType",
          "description": "The range key type. Valid values are \"STRING\" or \"NUMBER\""
        },
        "rangeKeyValue": {
          "$ref": "#/definitions/RangeKeyValue",
          "description": "The range key value."
        },
        "roleArn": {
          "$ref": "#/definitions/AwsArn",
          "description": "The ARN of the IAM role that grants access to the DynamoDB table."
        },
        "tableName": {
          "$ref": "#/definitions/TableName",
          "description": "The name of the DynamoDB table."
        }
      },
      "required": [
        "tableName",
        "roleArn",
        "hashKeyField",
        "hashKeyValue"
      ],
      "type": "object"
    },
    "DynamoDBv2Action": {
      "description": "<p>Describes an action to write to a DynamoDB table.</p> <p>This DynamoDB action writes each attribute in the message payload into it's own column in the DynamoDB table.</p>",
      "properties": {
        "putItem": {
          "$ref": "#/definitions/PutItemInput",
          "description": "<p>Specifies the DynamoDB table to which the message data will be written. For example:</p> <p> <code>{ \"dynamoDBv2\": { \"roleArn\": \"aws:iam:12341251:my-role\" \"putItem\": { \"tableName\": \"my-table\" } } }</code> </p> <p>Each attribute in the message payload will be written to a separate column in the DynamoDB database.</p>"
        },
        "roleArn": {
          "$ref": "#/definitions/AwsArn",
          "description": "The ARN of the IAM role that grants access to the DynamoDB table."
        }
      },
      "type": "object"
    },
    "DynamoKeyType": {
      "enum": [
        "STRING",
        "NUMBER"
      ],
      "type": "string"
    },
    "DynamoOperation": {
      "type": "string"
    },
    "EffectivePolicies": {
      "items": {
        "$ref": "#/definitions/EffectivePolicy"
      },
      "type": "array"
    },
    "EffectivePolicy": {
      "description": "The policy that has the effect on the authorization results.",
      "properties": {
        "policyArn": {
          "$ref": "#/definitions/PolicyArn",
          "description": "The policy ARN."
        },
        "policyDocument": {
          "$ref": "#/definitions/PolicyDocument",
          "description": "The IAM policy document."
        },
        "policyName": {
          "$ref": "#/definitions/PolicyName",
          "description": "The policy name."
        }
      },
      "type": "object"
    },
    "ElasticsearchAction": {
      "description": "Describes an action that writes data to an Amazon Elasticsearch Service domain.",
      "properties": {
        "endpoint": {
          "$ref": "#/definitions/ElasticsearchEndpoint",
          "description": "The endpoint of your Elasticsearch domain."
        },
        "id": {
          "$ref": "#/definitions/ElasticsearchId",
          "description": "The unique identifier for the document you are storing."
        },
        "index": {
          "$ref": "#/definitions/ElasticsearchIndex",
          "description": "The Elasticsearch index where you want to store your data."
        },
        "roleArn": {
          "$ref": "#/definitions/AwsArn",
          "description": "The IAM role ARN that has access to Elasticsearch."
        },
        "type": {
          "$ref": "#/definitions/ElasticsearchType",
          "description": "The type of document you are storing."
        }
      },
      "required": [
        "roleArn",
        "endpoint",
        "index",
        "type",
        "id"
      ],
      "type": "object"
    },
    "ElasticsearchEndpoint": {
      "pattern": "https?://.*",
      "type": "string"
    },
    "ElasticsearchId": {
      "type": "string"
    },
    "ElasticsearchIndex": {
      "type": "string"
    },
    "ElasticsearchType": {
      "type": "string"
    },
    "EnableTopicRuleRequest": {
      "description": "The input for the EnableTopicRuleRequest operation.",
      "properties": {},
      "type": "object"
    },
    "Enabled": {
      "type": "boolean"
    },
    "EndpointAddress": {
      "type": "string"
    },
    "EndpointType": {
      "type": "string"
    },
    "ErrorCode": {
      "type": "string"
    },
    "ErrorInfo": {
      "description": "Error information.",
      "properties": {
        "code": {
          "$ref": "#/definitions/Code",
          "description": "The error code."
        },
        "message": {
          "$ref": "#/definitions/OTAUpdateErrorMessage",
          "description": "The error message."
        }
      },
      "type": "object"
    },
    "ErrorMessage": {
      "maxLength": 2048,
      "type": "string"
    },
    "EventConfigurations": {
      "items": {
        "properties": {
          "key": {
            "$ref": "#/definitions/EventType"
          },
          "value": {
            "$ref": "#/definitions/Configuration"
          }
        },
        "type": "object"
      },
      "type": "array"
    },
    "EventType": {
      "enum": [
        "THING",
        "THING_GROUP",
        "THING_TYPE",
        "THING_GROUP_MEMBERSHIP",
        "THING_GROUP_HIERARCHY",
        "THING_TYPE_ASSOCIATION",
        "JOB",
        "JOB_EXECUTION",
        "POLICY",
        "CERTIFICATE",
        "CA_CERTIFICATE"
      ],
      "type": "string"
    },
    "ExecutionNamePrefix": {
      "type": "string"
    },
    "ExecutionNumber": {
      "type": "integer"
    },
    "ExpectedVersion": {
      "type": "integer"
    },
    "ExpiresInSec": {
      "maximum": 3600,
      "minimum": 60,
      "type": "integer"
    },
    "ExplicitDeny": {
      "description": "Information that explicitly denies authorization.",
      "properties": {
        "policies": {
          "$ref": "#/definitions/Policies",
          "description": "The policies that denied the authorization."
        }
      },
      "type": "object"
    },
    "ExponentialRolloutRate": {
      "description": "Allows you to create an exponential rate of rollout for a job.",
      "properties": {
        "baseRatePerMinute": {
          "$ref": "#/definitions/RolloutRatePerMinute",
          "description": "The minimum number of things that will be notified of a pending job, per minute at the start of job rollout. This parameter allows you to define the initial rate of rollout."
        },
        "incrementFactor": {
          "$ref": "#/definitions/IncrementFactor",
          "description": "The exponential factor to increase the rate of rollout for a job."
        },
        "rateIncreaseCriteria": {
          "$ref": "#/definitions/RateIncreaseCriteria",
          "description": "<p>The criteria to initiate the increase in rate of rollout for a job.</p> <p>AWS IoT supports up to one digit after the decimal (for example, 1.5, but not 1.55).</p>"
        }
      },
      "required": [
        "baseRatePerMinute",
        "incrementFactor",
        "rateIncreaseCriteria"
      ],
      "type": "object"
    },
    "FailedChecksCount": {
      "type": "integer"
    },
    "FailedThings": {
      "type": "integer"
    },
    "FileId": {
      "maximum": 255,
      "minimum": 0,
      "type": "integer"
    },
    "FileLocation": {
      "description": "The location of the OTA update.",
      "properties": {
        "s3Location": {
          "$ref": "#/definitions/S3Location",
          "description": "The location of the updated firmware in S3."
        },
        "stream": {
          "$ref": "#/definitions/Stream",
          "description": "The stream that contains the OTA update."
        }
      },
      "type": "object"
    },
    "FileName": {
      "type": "string"
    },
    "FirehoseAction": {
      "description": "Describes an action that writes data to an Amazon Kinesis Firehose stream.",
      "properties": {
        "deliveryStreamName": {
          "$ref": "#/definitions/DeliveryStreamName",
          "description": "The delivery stream name."
        },
        "roleArn": {
          "$ref": "#/definitions/AwsArn",
          "description": "The IAM role that grants access to the Amazon Kinesis Firehose stream."
        },
        "separator": {
          "$ref": "#/definitions/FirehoseSeparator",
          "description": "A character separator that will be used to separate records written to the Firehose stream. Valid values are: '\\n' (newline), '\\t' (tab), '\\r\\n' (Windows newline), ',' (comma)."
        }
      },
      "required": [
        "roleArn",
        "deliveryStreamName"
      ],
      "type": "object"
    },
    "FirehoseSeparator": {
      "pattern": "([\\n\\t])|(\\r\\n)|(,)",
      "type": "string"
    },
    "Flag": {
      "type": "boolean"
    },
    "ForceDelete": {
      "type": "boolean"
    },
    "ForceDeleteAWSJob": {
      "type": "boolean"
    },
    "ForceFlag": {
      "type": "boolean"
    },
    "Forced": {
      "type": "boolean"
    },
    "FunctionArn": {
      "type": "string"
    },
    "GEMaxResults": {
      "maximum": 10000,
      "minimum": 1,
      "type": "integer"
    },
    "GenerationId": {
      "type": "string"
    },
    "GetEffectivePoliciesRequest": {
      "properties": {
        "cognitoIdentityPoolId": {
          "$ref": "#/definitions/CognitoIdentityPoolId",
          "description": "The Cognito identity pool ID."
        },
        "principal": {
          "$ref": "#/definitions/Principal",
          "description": "The principal."
        }
      },
      "type": "object"
    },
    "GetEffectivePoliciesResponse": {
      "properties": {
        "effectivePolicies": {
          "$ref": "#/definitions/EffectivePolicies",
          "description": "The effective policies."
        }
      },
      "type": "object"
    },
    "GetIndexingConfigurationRequest": {
      "properties": {},
      "type": "object"
    },
    "GetIndexingConfigurationResponse": {
      "properties": {
        "thingGroupIndexingConfiguration": {
          "$ref": "#/definitions/ThingGroupIndexingConfiguration",
          "description": "The index configuration."
        },
        "thingIndexingConfiguration": {
          "$ref": "#/definitions/ThingIndexingConfiguration",
          "description": "Thing indexing configuration."
        }
      },
      "type": "object"
    },
    "GetJobDocumentRequest": {
      "properties": {},
      "type": "object"
    },
    "GetJobDocumentResponse": {
      "properties": {
        "document": {
          "$ref": "#/definitions/JobDocument",
          "description": "The job document content."
        }
      },
      "type": "object"
    },
    "GetLoggingOptionsRequest": {
      "description": "The input for the GetLoggingOptions operation.",
      "properties": {},
      "type": "object"
    },
    "GetLoggingOptionsResponse": {
      "description": "The output from the GetLoggingOptions operation.",
      "properties": {
        "logLevel": {
          "$ref": "#/definitions/LogLevel",
          "description": "The logging level."
        },
        "roleArn": {
          "$ref": "#/definitions/AwsArn",
          "description": "The ARN of the IAM role that grants access."
        }
      },
      "type": "object"
    },
    "GetOTAUpdateRequest": {
      "properties": {},
      "type": "object"
    },
    "GetOTAUpdateResponse": {
      "properties": {
        "otaUpdateInfo": {
          "$ref": "#/definitions/OTAUpdateInfo",
          "description": "The OTA update info."
        }
      },
      "type": "object"
    },
    "GetPolicyRequest": {
      "description": "The input for the GetPolicy operation.",
      "properties": {},
      "type": "object"
    },
    "GetPolicyResponse": {
      "description": "The output from the GetPolicy operation.",
      "properties": {
        "creationDate": {
          "$ref": "#/definitions/DateType",
          "description": "The date the policy was created."
        },
        "defaultVersionId": {
          "$ref": "#/definitions/PolicyVersionId",
          "description": "The default policy version ID."
        },
        "generationId": {
          "$ref": "#/definitions/GenerationId",
          "description": "The generation ID of the policy."
        },
        "lastModifiedDate": {
          "$ref": "#/definitions/DateType",
          "description": "The date the policy was last modified."
        },
        "policyArn": {
          "$ref": "#/definitions/PolicyArn",
          "description": "The policy ARN."
        },
        "policyDocument": {
          "$ref": "#/definitions/PolicyDocument",
          "description": "The JSON document that describes the policy."
        },
        "policyName": {
          "$ref": "#/definitions/PolicyName",
          "description": "The policy name."
        }
      },
      "type": "object"
    },
    "GetPolicyVersionRequest": {
      "description": "The input for the GetPolicyVersion operation.",
      "properties": {},
      "type": "object"
    },
    "GetPolicyVersionResponse": {
      "description": "The output from the GetPolicyVersion operation.",
      "properties": {
        "creationDate": {
          "$ref": "#/definitions/DateType",
          "description": "The date the policy version was created."
        },
        "generationId": {
          "$ref": "#/definitions/GenerationId",
          "description": "The generation ID of the policy version."
        },
        "isDefaultVersion": {
          "$ref": "#/definitions/IsDefaultVersion",
          "description": "Specifies whether the policy version is the default."
        },
        "lastModifiedDate": {
          "$ref": "#/definitions/DateType",
          "description": "The date the policy version was last modified."
        },
        "policyArn": {
          "$ref": "#/definitions/PolicyArn",
          "description": "The policy ARN."
        },
        "policyDocument": {
          "$ref": "#/definitions/PolicyDocument",
          "description": "The JSON document that describes the policy."
        },
        "policyName": {
          "$ref": "#/definitions/PolicyName",
          "description": "The policy name."
        },
        "policyVersionId": {
          "$ref": "#/definitions/PolicyVersionId",
          "description": "The policy version ID."
        }
      },
      "type": "object"
    },
    "GetRegistrationCodeRequest": {
      "description": "The input to the GetRegistrationCode operation.",
      "properties": {},
      "type": "object"
    },
    "GetRegistrationCodeResponse": {
      "description": "The output from the GetRegistrationCode operation.",
      "properties": {
        "registrationCode": {
          "$ref": "#/definitions/RegistrationCode",
          "description": "The CA certificate registration code."
        }
      },
      "type": "object"
    },
    "GetTopicRuleRequest": {
      "description": "The input for the GetTopicRule operation.",
      "properties": {},
      "type": "object"
    },
    "GetTopicRuleResponse": {
      "description": "The output from the GetTopicRule operation.",
      "properties": {
        "rule": {
          "$ref": "#/definitions/TopicRule",
          "description": "The rule."
        },
        "ruleArn": {
          "$ref": "#/definitions/RuleArn",
          "description": "The rule ARN."
        }
      },
      "type": "object"
    },
    "GetV2LoggingOptionsRequest": {
      "properties": {},
      "type": "object"
    },
    "GetV2LoggingOptionsResponse": {
      "properties": {
        "defaultLogLevel": {
          "$ref": "#/definitions/LogLevel",
          "description": "The default log level."
        },
        "disableAllLogs": {
          "$ref": "#/definitions/DisableAllLogs",
          "description": "Disables all logs."
        },
        "roleArn": {
          "$ref": "#/definitions/AwsArn",
          "description": "The IAM role ARN AWS IoT uses to write to your CloudWatch logs."
        }
      },
      "type": "object"
    },
    "GroupNameAndArn": {
      "description": "The name and ARN of a group.",
      "properties": {
        "groupArn": {
          "$ref": "#/definitions/ThingGroupArn",
          "description": "The group ARN."
        },
        "groupName": {
          "$ref": "#/definitions/ThingGroupName",
          "description": "The group name."
        }
      },
      "type": "object"
    },
    "HashAlgorithm": {
      "type": "string"
    },
    "HashKeyField": {
      "type": "string"
    },
    "HashKeyValue": {
      "type": "string"
    },
    "ImplicitDeny": {
      "description": "Information that implicitly denies authorization. When policy doesn't explicitly deny or allow an action on a resource it is considered an implicit deny.",
      "properties": {
        "policies": {
          "$ref": "#/definitions/Policies",
          "description": "Policies that don't contain a matching allow or deny statement for the specified action on the specified resource. "
        }
      },
      "type": "object"
    },
    "InProgressChecksCount": {
      "type": "integer"
    },
    "InProgressThings": {
      "type": "integer"
    },
    "InProgressTimeoutInMinutes": {
      "type": "integer"
    },
    "IncrementFactor": {
      "format": "double",
      "maximum": 5,
      "minimum": 1,
      "type": "number"
    },
    "IndexName": {
      "maxLength": 128,
      "minLength": 1,
      "pattern": "[a-zA-Z0-9:_-]+",
      "type": "string"
    },
    "IndexNamesList": {
      "items": {
        "$ref": "#/definitions/IndexName"
      },
      "type": "array"
    },
    "IndexNotReadyException": {},
    "IndexSchema": {
      "type": "string"
    },
    "IndexStatus": {
      "enum": [
        "ACTIVE",
        "BUILDING",
        "REBUILDING"
      ],
      "type": "string"
    },
    "InlineDocument": {
      "type": "string"
    },
    "InputName": {
      "maxLength": 128,
      "minLength": 1,
      "type": "string"
    },
    "InternalException": {},
    "InternalFailureException": {},
    "InvalidQueryException": {},
    "InvalidRequestException": {},
    "InvalidResponseException": {},
    "InvalidStateTransitionException": {},
    "IotAnalyticsAction": {
      "description": "Sends messge data to an AWS IoT Analytics channel.",
      "properties": {
        "channelArn": {
          "$ref": "#/definitions/AwsArn",
          "description": "(deprecated) The ARN of the IoT Analytics channel to which message data will be sent."
        },
        "channelName": {
          "$ref": "#/definitions/ChannelName",
          "description": "The name of the IoT Analytics channel to which message data will be sent."
        },
        "roleArn": {
          "$ref": "#/definitions/AwsArn",
          "description": "The ARN of the role which has a policy that grants IoT Analytics permission to send message data via IoT Analytics (iotanalytics:BatchPutMessage)."
        }
      },
      "type": "object"
    },
    "IotEventsAction": {
      "description": "Sends an input to an AWS IoT Events detector.",
      "properties": {
        "inputName": {
          "$ref": "#/definitions/InputName",
          "description": "The name of the AWS IoT Events input."
        },
        "messageId": {
          "$ref": "#/definitions/MessageId",
          "description": "[Optional] Use this to ensure that only one input (message) with a given messageId will be processed by an AWS IoT Events detector."
        },
        "roleArn": {
          "$ref": "#/definitions/AwsArn",
          "description": "The ARN of the role that grants AWS IoT permission to send an input to an AWS IoT Events detector. (\"Action\":\"iotevents:BatchPutMessage\")."
        }
      },
      "required": [
        "inputName",
        "roleArn"
      ],
      "type": "object"
    },
    "IsAuthenticated": {
      "type": "boolean"
    },
    "IsDefaultVersion": {
      "type": "boolean"
    },
    "IsDisabled": {
      "type": "boolean"
    },
    "Job": {
      "description": "The <code>Job</code> object contains details about a job.",
      "properties": {
        "abortConfig": {
          "$ref": "#/definitions/AbortConfig",
          "description": "Configuration for criteria to abort the job."
        },
        "comment": {
          "$ref": "#/definitions/Comment",
          "description": "If the job was updated, describes the reason for the update."
        },
        "completedAt": {
          "$ref": "#/definitions/DateType",
          "description": "The time, in milliseconds since the epoch, when the job was completed."
        },
        "createdAt": {
          "$ref": "#/definitions/DateType",
          "description": "The time, in milliseconds since the epoch, when the job was created."
        },
        "description": {
          "$ref": "#/definitions/JobDescription",
          "description": "A short text description of the job."
        },
        "forceCanceled": {
          "$ref": "#/definitions/Forced",
          "description": "Will be <code>true</code> if the job was canceled with the optional <code>force</code> parameter set to <code>true</code>."
        },
        "jobArn": {
          "$ref": "#/definitions/JobArn",
          "description": "An ARN identifying the job with format \"arn:aws:iot:region:account:job/jobId\"."
        },
        "jobExecutionsRolloutConfig": {
          "$ref": "#/definitions/JobExecutionsRolloutConfig",
          "description": "Allows you to create a staged rollout of a job."
        },
        "jobId": {
          "$ref": "#/definitions/JobId",
          "description": "The unique identifier you assigned to this job when it was created."
        },
        "jobProcessDetails": {
          "$ref": "#/definitions/JobProcessDetails",
          "description": "Details about the job process."
        },
        "lastUpdatedAt": {
          "$ref": "#/definitions/DateType",
          "description": "The time, in milliseconds since the epoch, when the job was last updated."
        },
        "presignedUrlConfig": {
          "$ref": "#/definitions/PresignedUrlConfig",
          "description": "Configuration for pre-signed S3 URLs."
        },
        "reasonCode": {
          "$ref": "#/definitions/ReasonCode",
          "description": "If the job was updated, provides the reason code for the update."
        },
        "status": {
          "$ref": "#/definitions/JobStatus",
          "description": "The status of the job, one of <code>IN_PROGRESS</code>, <code>CANCELED</code>, <code>DELETION_IN_PROGRESS</code> or <code>COMPLETED</code>. "
        },
        "targetSelection": {
          "$ref": "#/definitions/TargetSelection",
          "description": "Specifies whether the job will continue to run (CONTINUOUS), or will be complete after all those things specified as targets have completed the job (SNAPSHOT). If continuous, the job may also be run on a thing when a change is detected in a target. For example, a job will run on a device when the thing representing the device is added to a target group, even after the job was completed by all things originally in the group. "
        },
        "targets": {
          "$ref": "#/definitions/JobTargets",
          "description": "A list of IoT things and thing groups to which the job should be sent."
        },
        "timeoutConfig": {
          "$ref": "#/definitions/TimeoutConfig",
          "description": "Specifies the amount of time each device has to finish its execution of the job. A timer is started when the job execution status is set to <code>IN_PROGRESS</code>. If the job execution status is not set to another terminal state before the timer expires, it will be automatically set to <code>TIMED_OUT</code>."
        }
      },
      "type": "object"
    },
    "JobArn": {
      "type": "string"
    },
    "JobDescription": {
      "maxLength": 2028,
      "pattern": "[^\\p{C}]+",
      "type": "string"
    },
    "JobDocument": {
      "maxLength": 32768,
      "type": "string"
    },
    "JobDocumentSource": {
      "maxLength": 1350,
      "minLength": 1,
      "type": "string"
    },
    "JobExecution": {
      "description": "The job execution object represents the execution of a job on a particular device.",
      "properties": {
        "approximateSecondsBeforeTimedOut": {
          "$ref": "#/definitions/ApproximateSecondsBeforeTimedOut",
          "description": "The estimated number of seconds that remain before the job execution status will be changed to <code>TIMED_OUT</code>. The timeout interval can be anywhere between 1 minute and 7 days (1 to 10080 minutes). The actual job execution timeout can occur up to 60 seconds later than the estimated duration. This value will not be included if the job execution has reached a terminal status."
        },
        "executionNumber": {
          "$ref": "#/definitions/ExecutionNumber",
          "description": "A string (consisting of the digits \"0\" through \"9\") which identifies this particular job execution on this particular device. It can be used in commands which return or update job execution information. "
        },
        "forceCanceled": {
          "$ref": "#/definitions/Forced",
          "description": "Will be <code>true</code> if the job execution was canceled with the optional <code>force</code> parameter set to <code>true</code>."
        },
        "jobId": {
          "$ref": "#/definitions/JobId",
          "description": "The unique identifier you assigned to the job when it was created."
        },
        "lastUpdatedAt": {
          "$ref": "#/definitions/DateType",
          "description": "The time, in milliseconds since the epoch, when the job execution was last updated."
        },
        "queuedAt": {
          "$ref": "#/definitions/DateType",
          "description": "The time, in milliseconds since the epoch, when the job execution was queued."
        },
        "startedAt": {
          "$ref": "#/definitions/DateType",
          "description": "The time, in milliseconds since the epoch, when the job execution started."
        },
        "status": {
          "$ref": "#/definitions/JobExecutionStatus",
          "description": "The status of the job execution (IN_PROGRESS, QUEUED, FAILED, SUCCEEDED, TIMED_OUT, CANCELED, or REJECTED)."
        },
        "statusDetails": {
          "$ref": "#/definitions/JobExecutionStatusDetails",
          "description": "A collection of name/value pairs that describe the status of the job execution."
        },
        "thingArn": {
          "$ref": "#/definitions/ThingArn",
          "description": "The ARN of the thing on which the job execution is running."
        },
        "versionNumber": {
          "$ref": "#/definitions/VersionNumber",
          "description": "The version of the job execution. Job execution versions are incremented each time they are updated by a device."
        }
      },
      "type": "object"
    },
    "JobExecutionFailureType": {
      "enum": [
        "FAILED",
        "REJECTED",
        "TIMED_OUT",
        "ALL"
      ],
      "type": "string"
    },
    "JobExecutionStatus": {
      "enum": [
        "QUEUED",
        "IN_PROGRESS",
        "SUCCEEDED",
        "FAILED",
        "TIMED_OUT",
        "REJECTED",
        "REMOVED",
        "CANCELED"
      ],
      "type": "string"
    },
    "JobExecutionStatusDetails": {
      "description": "Details of the job execution status.",
      "properties": {
        "detailsMap": {
          "$ref": "#/definitions/DetailsMap",
          "description": "The job execution status."
        }
      },
      "type": "object"
    },
    "JobExecutionSummary": {
      "description": "The job execution summary.",
      "properties": {
        "executionNumber": {
          "$ref": "#/definitions/ExecutionNumber",
          "description": "A string (consisting of the digits \"0\" through \"9\") which identifies this particular job execution on this particular device. It can be used later in commands which return or update job execution information."
        },
        "lastUpdatedAt": {
          "$ref": "#/definitions/DateType",
          "description": "The time, in milliseconds since the epoch, when the job execution was last updated."
        },
        "queuedAt": {
          "$ref": "#/definitions/DateType",
          "description": "The time, in milliseconds since the epoch, when the job execution was queued."
        },
        "startedAt": {
          "$ref": "#/definitions/DateType",
          "description": "The time, in milliseconds since the epoch, when the job execution started."
        },
        "status": {
          "$ref": "#/definitions/JobExecutionStatus",
          "description": "The status of the job execution."
        }
      },
      "type": "object"
    },
    "JobExecutionSummaryForJob": {
      "description": "Contains a summary of information about job executions for a specific job.",
      "properties": {
        "jobExecutionSummary": {
          "$ref": "#/definitions/JobExecutionSummary",
          "description": "Contains a subset of information about a job execution."
        },
        "thingArn": {
          "$ref": "#/definitions/ThingArn",
          "description": "The ARN of the thing on which the job execution is running."
        }
      },
      "type": "object"
    },
    "JobExecutionSummaryForJobList": {
      "items": {
        "$ref": "#/definitions/JobExecutionSummaryForJob"
      },
      "type": "array"
    },
    "JobExecutionSummaryForThing": {
      "description": "The job execution summary for a thing.",
      "properties": {
        "jobExecutionSummary": {
          "$ref": "#/definitions/JobExecutionSummary",
          "description": "Contains a subset of information about a job execution."
        },
        "jobId": {
          "$ref": "#/definitions/JobId",
          "description": "The unique identifier you assigned to this job when it was created."
        }
      },
      "type": "object"
    },
    "JobExecutionSummaryForThingList": {
      "items": {
        "$ref": "#/definitions/JobExecutionSummaryForThing"
      },
      "type": "array"
    },
    "JobExecutionsRolloutConfig": {
      "description": "Allows you to create a staged rollout of a job.",
      "properties": {
        "exponentialRate": {
          "$ref": "#/definitions/ExponentialRolloutRate",
          "description": "The rate of increase for a job rollout. This parameter allows you to define an exponential rate for a job rollout."
        },
        "maximumPerMinute": {
          "$ref": "#/definitions/MaxJobExecutionsPerMin",
          "description": "The maximum number of things that will be notified of a pending job, per minute. This parameter allows you to create a staged rollout."
        }
      },
      "type": "object"
    },
    "JobId": {
      "maxLength": 64,
      "minLength": 1,
      "pattern": "[a-zA-Z0-9_-]+",
      "type": "string"
    },
    "JobProcessDetails": {
      "description": "The job process details.",
      "properties": {
        "numberOfCanceledThings": {
          "$ref": "#/definitions/CanceledThings",
          "description": "The number of things that cancelled the job."
        },
        "numberOfFailedThings": {
          "$ref": "#/definitions/FailedThings",
          "description": "The number of things that failed executing the job."
        },
        "numberOfInProgressThings": {
          "$ref": "#/definitions/InProgressThings",
          "description": "The number of things currently executing the job."
        },
        "numberOfQueuedThings": {
          "$ref": "#/definitions/QueuedThings",
          "description": "The number of things that are awaiting execution of the job."
        },
        "numberOfRejectedThings": {
          "$ref": "#/definitions/RejectedThings",
          "description": "The number of things that rejected the job."
        },
        "numberOfRemovedThings": {
          "$ref": "#/definitions/RemovedThings",
          "description": "The number of things that are no longer scheduled to execute the job because they have been deleted or have been removed from the group that was a target of the job."
        },
        "numberOfSucceededThings": {
          "$ref": "#/definitions/SucceededThings",
          "description": "The number of things which successfully completed the job."
        },
        "numberOfTimedOutThings": {
          "$ref": "#/definitions/TimedOutThings",
          "description": "The number of things whose job execution status is <code>TIMED_OUT</code>."
        },
        "processingTargets": {
          "$ref": "#/definitions/ProcessingTargetNameList",
          "description": "The target devices to which the job execution is being rolled out. This value will be null after the job execution has finished rolling out to all the target devices."
        }
      },
      "type": "object"
    },
    "JobStatus": {
      "enum": [
        "IN_PROGRESS",
        "CANCELED",
        "COMPLETED",
        "DELETION_IN_PROGRESS"
      ],
      "type": "string"
    },
    "JobSummary": {
      "description": "The job summary.",
      "properties": {
        "completedAt": {
          "$ref": "#/definitions/DateType",
          "description": "The time, in milliseconds since the epoch, when the job completed."
        },
        "createdAt": {
          "$ref": "#/definitions/DateType",
          "description": "The time, in milliseconds since the epoch, when the job was created."
        },
        "jobArn": {
          "$ref": "#/definitions/JobArn",
          "description": "The job ARN."
        },
        "jobId": {
          "$ref": "#/definitions/JobId",
          "description": "The unique identifier you assigned to this job when it was created."
        },
        "lastUpdatedAt": {
          "$ref": "#/definitions/DateType",
          "description": "The time, in milliseconds since the epoch, when the job was last updated."
        },
        "status": {
          "$ref": "#/definitions/JobStatus",
          "description": "The job summary status."
        },
        "targetSelection": {
          "$ref": "#/definitions/TargetSelection",
          "description": "Specifies whether the job will continue to run (CONTINUOUS), or will be complete after all those things specified as targets have completed the job (SNAPSHOT). If continuous, the job may also be run on a thing when a change is detected in a target. For example, a job will run on a thing when the thing is added to a target group, even after the job was completed by all things originally in the group."
        },
        "thingGroupId": {
          "$ref": "#/definitions/ThingGroupId",
          "description": "The ID of the thing group."
        }
      },
      "type": "object"
    },
    "JobSummaryList": {
      "items": {
        "$ref": "#/definitions/JobSummary"
      },
      "type": "array"
    },
    "JobTargets": {
      "items": {
        "$ref": "#/definitions/TargetArn"
      },
      "minItems": 1,
      "type": "array"
    },
    "JsonDocument": {
      "type": "string"
    },
    "Key": {
      "type": "string"
    },
    "KeyName": {
      "maxLength": 128,
      "minLength": 1,
      "pattern": "[a-zA-Z0-9:_-]+",
      "type": "string"
    },
    "KeyPair": {
      "description": "Describes a key pair.",
      "properties": {
        "PrivateKey": {
          "$ref": "#/definitions/PrivateKey",
          "description": "The private key."
        },
        "PublicKey": {
          "$ref": "#/definitions/PublicKey",
          "description": "The public key."
        }
      },
      "type": "object"
    },
    "KeyValue": {
      "maxLength": 5120,
      "type": "string"
    },
    "KinesisAction": {
      "description": "Describes an action to write data to an Amazon Kinesis stream.",
      "properties": {
        "partitionKey": {
          "$ref": "#/definitions/PartitionKey",
          "description": "The partition key."
        },
        "roleArn": {
          "$ref": "#/definitions/AwsArn",
          "description": "The ARN of the IAM role that grants access to the Amazon Kinesis stream."
        },
        "streamName": {
          "$ref": "#/definitions/StreamName",
          "description": "The name of the Amazon Kinesis stream."
        }
      },
      "required": [
        "roleArn",
        "streamName"
      ],
      "type": "object"
    },
    "LambdaAction": {
      "description": "Describes an action to invoke a Lambda function.",
      "properties": {
        "functionArn": {
          "$ref": "#/definitions/FunctionArn",
          "description": "The ARN of the Lambda function."
        }
      },
      "required": [
        "functionArn"
      ],
      "type": "object"
    },
    "LaserMaxResults": {
      "maximum": 250,
      "minimum": 1,
      "type": "integer"
    },
    "LastModifiedDate": {
      "format": "date-time",
      "type": "string"
    },
    "LimitExceededException": {},
    "ListActiveViolationsRequest": {
      "properties": {},
      "type": "object"
    },
    "ListActiveViolationsResponse": {
      "properties": {
        "activeViolations": {
          "$ref": "#/definitions/ActiveViolations",
          "description": "The list of active violations."
        },
        "nextToken": {
          "$ref": "#/definitions/NextToken",
          "description": "A token that can be used to retrieve the next set of results, or <code>null</code> if there are no additional results."
        }
      },
      "type": "object"
    },
    "ListAttachedPoliciesRequest": {
      "properties": {},
      "type": "object"
    },
    "ListAttachedPoliciesResponse": {
      "properties": {
        "nextMarker": {
          "$ref": "#/definitions/Marker",
          "description": "The token to retrieve the next set of results, or ``null`` if there are no more results."
        },
        "policies": {
          "$ref": "#/definitions/Policies",
          "description": "The policies."
        }
      },
      "type": "object"
    },
    "ListAuditFindingsRequest": {
      "properties": {
        "checkName": {
          "$ref": "#/definitions/AuditCheckName",
          "description": "A filter to limit results to the findings for the specified audit check."
        },
        "endTime": {
          "$ref": "#/definitions/Timestamp",
          "description": "A filter to limit results to those found before the specified time. You must specify either the startTime and endTime or the taskId, but not both."
        },
        "maxResults": {
          "$ref": "#/definitions/MaxResults",
          "description": "The maximum number of results to return at one time. The default is 25."
        },
        "nextToken": {
          "$ref": "#/definitions/NextToken",
          "description": "The token for the next set of results."
        },
        "resourceIdentifier": {
          "$ref": "#/definitions/ResourceIdentifier",
          "description": "Information identifying the non-compliant resource."
        },
        "startTime": {
          "$ref": "#/definitions/Timestamp",
          "description": "A filter to limit results to those found after the specified time. You must specify either the startTime and endTime or the taskId, but not both."
        },
        "taskId": {
          "$ref": "#/definitions/AuditTaskId",
          "description": "A filter to limit results to the audit with the specified ID. You must specify either the taskId or the startTime and endTime, but not both."
        }
      },
      "type": "object"
    },
    "ListAuditFindingsResponse": {
      "properties": {
        "findings": {
          "$ref": "#/definitions/AuditFindings",
          "description": "The findings (results) of the audit."
        },
        "nextToken": {
          "$ref": "#/definitions/NextToken",
          "description": "A token that can be used to retrieve the next set of results, or <code>null</code> if there are no additional results."
        }
      },
      "type": "object"
    },
    "ListAuditTasksRequest": {
      "properties": {},
      "type": "object"
    },
    "ListAuditTasksResponse": {
      "properties": {
        "nextToken": {
          "$ref": "#/definitions/NextToken",
          "description": "A token that can be used to retrieve the next set of results, or <code>null</code> if there are no additional results."
        },
        "tasks": {
          "$ref": "#/definitions/AuditTaskMetadataList",
          "description": "The audits that were performed during the specified time period."
        }
      },
      "type": "object"
    },
    "ListAuthorizersRequest": {
      "properties": {},
      "type": "object"
    },
    "ListAuthorizersResponse": {
      "properties": {
        "authorizers": {
          "$ref": "#/definitions/Authorizers",
          "description": "The authorizers."
        },
        "nextMarker": {
          "$ref": "#/definitions/Marker",
          "description": "A marker used to get the next set of results."
        }
      },
      "type": "object"
    },
    "ListBillingGroupsRequest": {
      "properties": {},
      "type": "object"
    },
    "ListBillingGroupsResponse": {
      "properties": {
        "billingGroups": {
          "$ref": "#/definitions/BillingGroupNameAndArnList",
          "description": "The list of billing groups."
        },
        "nextToken": {
          "$ref": "#/definitions/NextToken",
          "description": "The token used to get the next set of results, or <b>null</b> if there are no additional results."
        }
      },
      "type": "object"
    },
    "ListCACertificatesRequest": {
      "description": "Input for the ListCACertificates operation.",
      "properties": {},
      "type": "object"
    },
    "ListCACertificatesResponse": {
      "description": "The output from the ListCACertificates operation.",
      "properties": {
        "certificates": {
          "$ref": "#/definitions/CACertificates",
          "description": "The CA certificates registered in your AWS account."
        },
        "nextMarker": {
          "$ref": "#/definitions/Marker",
          "description": "The current position within the list of CA certificates."
        }
      },
      "type": "object"
    },
    "ListCertificatesByCARequest": {
      "description": "The input to the ListCertificatesByCA operation.",
      "properties": {},
      "type": "object"
    },
    "ListCertificatesByCAResponse": {
      "description": "The output of the ListCertificatesByCA operation.",
      "properties": {
        "certificates": {
          "$ref": "#/definitions/Certificates",
          "description": "The device certificates signed by the specified CA certificate."
        },
        "nextMarker": {
          "$ref": "#/definitions/Marker",
          "description": "The marker for the next set of results, or null if there are no additional results."
        }
      },
      "type": "object"
    },
    "ListCertificatesRequest": {
      "description": "The input for the ListCertificates operation.",
      "properties": {},
      "type": "object"
    },
    "ListCertificatesResponse": {
      "description": "The output of the ListCertificates operation.",
      "properties": {
        "certificates": {
          "$ref": "#/definitions/Certificates",
          "description": "The descriptions of the certificates."
        },
        "nextMarker": {
          "$ref": "#/definitions/Marker",
          "description": "The marker for the next set of results, or null if there are no additional results."
        }
      },
      "type": "object"
    },
    "ListIndicesRequest": {
      "properties": {},
      "type": "object"
    },
    "ListIndicesResponse": {
      "properties": {
        "indexNames": {
          "$ref": "#/definitions/IndexNamesList",
          "description": "The index names."
        },
        "nextToken": {
          "$ref": "#/definitions/NextToken",
          "description": "The token used to get the next set of results, or <b>null</b> if there are no additional results."
        }
      },
      "type": "object"
    },
    "ListJobExecutionsForJobRequest": {
      "properties": {},
      "type": "object"
    },
    "ListJobExecutionsForJobResponse": {
      "properties": {
        "executionSummaries": {
          "$ref": "#/definitions/JobExecutionSummaryForJobList",
          "description": "A list of job execution summaries."
        },
        "nextToken": {
          "$ref": "#/definitions/NextToken",
          "description": "The token for the next set of results, or <b>null</b> if there are no additional results."
        }
      },
      "type": "object"
    },
    "ListJobExecutionsForThingRequest": {
      "properties": {},
      "type": "object"
    },
    "ListJobExecutionsForThingResponse": {
      "properties": {
        "executionSummaries": {
          "$ref": "#/definitions/JobExecutionSummaryForThingList",
          "description": "A list of job execution summaries."
        },
        "nextToken": {
          "$ref": "#/definitions/NextToken",
          "description": "The token for the next set of results, or <b>null</b> if there are no additional results."
        }
      },
      "type": "object"
    },
    "ListJobsRequest": {
      "properties": {},
      "type": "object"
    },
    "ListJobsResponse": {
      "properties": {
        "jobs": {
          "$ref": "#/definitions/JobSummaryList",
          "description": "A list of jobs."
        },
        "nextToken": {
          "$ref": "#/definitions/NextToken",
          "description": "The token for the next set of results, or <b>null</b> if there are no additional results."
        }
      },
      "type": "object"
    },
    "ListOTAUpdatesRequest": {
      "properties": {},
      "type": "object"
    },
    "ListOTAUpdatesResponse": {
      "properties": {
        "nextToken": {
          "$ref": "#/definitions/NextToken",
          "description": "A token to use to get the next set of results."
        },
        "otaUpdates": {
          "$ref": "#/definitions/OTAUpdatesSummary",
          "description": "A list of OTA update jobs."
        }
      },
      "type": "object"
    },
    "ListOutgoingCertificatesRequest": {
      "description": "The input to the ListOutgoingCertificates operation.",
      "properties": {},
      "type": "object"
    },
    "ListOutgoingCertificatesResponse": {
      "description": "The output from the ListOutgoingCertificates operation.",
      "properties": {
        "nextMarker": {
          "$ref": "#/definitions/Marker",
          "description": "The marker for the next set of results."
        },
        "outgoingCertificates": {
          "$ref": "#/definitions/OutgoingCertificates",
          "description": "The certificates that are being transferred but not yet accepted."
        }
      },
      "type": "object"
    },
    "ListPoliciesRequest": {
      "description": "The input for the ListPolicies operation.",
      "properties": {},
      "type": "object"
    },
    "ListPoliciesResponse": {
      "description": "The output from the ListPolicies operation.",
      "properties": {
        "nextMarker": {
          "$ref": "#/definitions/Marker",
          "description": "The marker for the next set of results, or null if there are no additional results."
        },
        "policies": {
          "$ref": "#/definitions/Policies",
          "description": "The descriptions of the policies."
        }
      },
      "type": "object"
    },
    "ListPolicyPrincipalsRequest": {
      "description": "The input for the ListPolicyPrincipals operation.",
      "properties": {},
      "type": "object"
    },
    "ListPolicyPrincipalsResponse": {
      "description": "The output from the ListPolicyPrincipals operation.",
      "properties": {
        "nextMarker": {
          "$ref": "#/definitions/Marker",
          "description": "The marker for the next set of results, or null if there are no additional results."
        },
        "principals": {
          "$ref": "#/definitions/Principals",
          "description": "The descriptions of the principals."
        }
      },
      "type": "object"
    },
    "ListPolicyVersionsRequest": {
      "description": "The input for the ListPolicyVersions operation.",
      "properties": {},
      "type": "object"
    },
    "ListPolicyVersionsResponse": {
      "description": "The output from the ListPolicyVersions operation.",
      "properties": {
        "policyVersions": {
          "$ref": "#/definitions/PolicyVersions",
          "description": "The policy versions."
        }
      },
      "type": "object"
    },
    "ListPrincipalPoliciesRequest": {
      "description": "The input for the ListPrincipalPolicies operation.",
      "properties": {},
      "type": "object"
    },
    "ListPrincipalPoliciesResponse": {
      "description": "The output from the ListPrincipalPolicies operation.",
      "properties": {
        "nextMarker": {
          "$ref": "#/definitions/Marker",
          "description": "The marker for the next set of results, or null if there are no additional results."
        },
        "policies": {
          "$ref": "#/definitions/Policies",
          "description": "The policies."
        }
      },
      "type": "object"
    },
    "ListPrincipalThingsRequest": {
      "description": "The input for the ListPrincipalThings operation.",
      "properties": {},
      "type": "object"
    },
    "ListPrincipalThingsResponse": {
      "description": "The output from the ListPrincipalThings operation.",
      "properties": {
        "nextToken": {
          "$ref": "#/definitions/NextToken",
          "description": "The token used to get the next set of results, or <b>null</b> if there are no additional results."
        },
        "things": {
          "$ref": "#/definitions/ThingNameList",
          "description": "The things."
        }
      },
      "type": "object"
    },
    "ListRoleAliasesRequest": {
      "properties": {},
      "type": "object"
    },
    "ListRoleAliasesResponse": {
      "properties": {
        "nextMarker": {
          "$ref": "#/definitions/Marker",
          "description": "A marker used to get the next set of results."
        },
        "roleAliases": {
          "$ref": "#/definitions/RoleAliases",
          "description": "The role aliases."
        }
      },
      "type": "object"
    },
    "ListScheduledAuditsRequest": {
      "properties": {},
      "type": "object"
    },
    "ListScheduledAuditsResponse": {
      "properties": {
        "nextToken": {
          "$ref": "#/definitions/NextToken",
          "description": "A token that can be used to retrieve the next set of results, or <code>null</code> if there are no additional results."
        },
        "scheduledAudits": {
          "$ref": "#/definitions/ScheduledAuditMetadataList",
          "description": "The list of scheduled audits."
        }
      },
      "type": "object"
    },
    "ListSecurityProfilesForTargetRequest": {
      "properties": {},
      "type": "object"
    },
    "ListSecurityProfilesForTargetResponse": {
      "properties": {
        "nextToken": {
          "$ref": "#/definitions/NextToken",
          "description": "A token that can be used to retrieve the next set of results, or <code>null</code> if there are no additional results."
        },
        "securityProfileTargetMappings": {
          "$ref": "#/definitions/SecurityProfileTargetMappings",
          "description": "A list of security profiles and their associated targets."
        }
      },
      "type": "object"
    },
    "ListSecurityProfilesRequest": {
      "properties": {},
      "type": "object"
    },
    "ListSecurityProfilesResponse": {
      "properties": {
        "nextToken": {
          "$ref": "#/definitions/NextToken",
          "description": "A token that can be used to retrieve the next set of results, or <code>null</code> if there are no additional results."
        },
        "securityProfileIdentifiers": {
          "$ref": "#/definitions/SecurityProfileIdentifiers",
          "description": "A list of security profile identifiers (names and ARNs)."
        }
      },
      "type": "object"
    },
    "ListStreamsRequest": {
      "properties": {},
      "type": "object"
    },
    "ListStreamsResponse": {
      "properties": {
        "nextToken": {
          "$ref": "#/definitions/NextToken",
          "description": "A token used to get the next set of results."
        },
        "streams": {
          "$ref": "#/definitions/StreamsSummary",
          "description": "A list of streams."
        }
      },
      "type": "object"
    },
    "ListTagsForResourceRequest": {
      "properties": {},
      "type": "object"
    },
    "ListTagsForResourceResponse": {
      "properties": {
        "nextToken": {
          "$ref": "#/definitions/NextToken",
          "description": "The token used to get the next set of results, or <b>null</b> if there are no additional results."
        },
        "tags": {
          "$ref": "#/definitions/TagList",
          "description": "The list of tags assigned to the resource."
        }
      },
      "type": "object"
    },
    "ListTargetsForPolicyRequest": {
      "properties": {},
      "type": "object"
    },
    "ListTargetsForPolicyResponse": {
      "properties": {
        "nextMarker": {
          "$ref": "#/definitions/Marker",
          "description": "A marker used to get the next set of results."
        },
        "targets": {
          "$ref": "#/definitions/PolicyTargets",
          "description": "The policy targets."
        }
      },
      "type": "object"
    },
    "ListTargetsForSecurityProfileRequest": {
      "properties": {},
      "type": "object"
    },
    "ListTargetsForSecurityProfileResponse": {
      "properties": {
        "nextToken": {
          "$ref": "#/definitions/NextToken",
          "description": "A token that can be used to retrieve the next set of results, or <code>null</code> if there are no additional results."
        },
        "securityProfileTargets": {
          "$ref": "#/definitions/SecurityProfileTargets",
          "description": "The thing groups to which the security profile is attached."
        }
      },
      "type": "object"
    },
    "ListThingGroupsForThingRequest": {
      "properties": {},
      "type": "object"
    },
    "ListThingGroupsForThingResponse": {
      "properties": {
        "nextToken": {
          "$ref": "#/definitions/NextToken",
          "description": "The token used to get the next set of results, or <b>null</b> if there are no additional results."
        },
        "thingGroups": {
          "$ref": "#/definitions/ThingGroupNameAndArnList",
          "description": "The thing groups."
        }
      },
      "type": "object"
    },
    "ListThingGroupsRequest": {
      "properties": {},
      "type": "object"
    },
    "ListThingGroupsResponse": {
      "properties": {
        "nextToken": {
          "$ref": "#/definitions/NextToken",
          "description": "The token used to get the next set of results, or <b>null</b> if there are no additional results."
        },
        "thingGroups": {
          "$ref": "#/definitions/ThingGroupNameAndArnList",
          "description": "The thing groups."
        }
      },
      "type": "object"
    },
    "ListThingPrincipalsRequest": {
      "description": "The input for the ListThingPrincipal operation.",
      "properties": {},
      "type": "object"
    },
    "ListThingPrincipalsResponse": {
      "description": "The output from the ListThingPrincipals operation.",
      "properties": {
        "principals": {
          "$ref": "#/definitions/Principals",
          "description": "The principals associated with the thing."
        }
      },
      "type": "object"
    },
    "ListThingRegistrationTaskReportsRequest": {
      "properties": {},
      "type": "object"
    },
    "ListThingRegistrationTaskReportsResponse": {
      "properties": {
        "nextToken": {
          "$ref": "#/definitions/NextToken",
          "description": "The token used to get the next set of results, or <b>null</b> if there are no additional results."
        },
        "reportType": {
          "$ref": "#/definitions/ReportType",
          "description": "The type of task report."
        },
        "resourceLinks": {
          "$ref": "#/definitions/S3FileUrlList",
          "description": "Links to the task resources."
        }
      },
      "type": "object"
    },
    "ListThingRegistrationTasksRequest": {
      "properties": {},
      "type": "object"
    },
    "ListThingRegistrationTasksResponse": {
      "properties": {
        "nextToken": {
          "$ref": "#/definitions/NextToken",
          "description": "The token used to get the next set of results, or <b>null</b> if there are no additional results."
        },
        "taskIds": {
          "$ref": "#/definitions/TaskIdList",
          "description": "A list of bulk thing provisioning task IDs."
        }
      },
      "type": "object"
    },
    "ListThingTypesRequest": {
      "description": "The input for the ListThingTypes operation.",
      "properties": {},
      "type": "object"
    },
    "ListThingTypesResponse": {
      "description": "The output for the ListThingTypes operation.",
      "properties": {
        "nextToken": {
          "$ref": "#/definitions/NextToken",
          "description": "The token for the next set of results, or <b>null</b> if there are no additional results."
        },
        "thingTypes": {
          "$ref": "#/definitions/ThingTypeList",
          "description": "The thing types."
        }
      },
      "type": "object"
    },
    "ListThingsInBillingGroupRequest": {
      "properties": {},
      "type": "object"
    },
    "ListThingsInBillingGroupResponse": {
      "properties": {
        "nextToken": {
          "$ref": "#/definitions/NextToken",
          "description": "The token used to get the next set of results, or <b>null</b> if there are no additional results."
        },
        "things": {
          "$ref": "#/definitions/ThingNameList",
          "description": "A list of things in the billing group."
        }
      },
      "type": "object"
    },
    "ListThingsInThingGroupRequest": {
      "properties": {},
      "type": "object"
    },
    "ListThingsInThingGroupResponse": {
      "properties": {
        "nextToken": {
          "$ref": "#/definitions/NextToken",
          "description": "The token used to get the next set of results, or <b>null</b> if there are no additional results."
        },
        "things": {
          "$ref": "#/definitions/ThingNameList",
          "description": "The things in the specified thing group."
        }
      },
      "type": "object"
    },
    "ListThingsRequest": {
      "description": "The input for the ListThings operation.",
      "properties": {},
      "type": "object"
    },
    "ListThingsResponse": {
      "description": "The output from the ListThings operation.",
      "properties": {
        "nextToken": {
          "$ref": "#/definitions/NextToken",
          "description": "The token used to get the next set of results, or <b>null</b> if there are no additional results."
        },
        "things": {
          "$ref": "#/definitions/ThingAttributeList",
          "description": "The things."
        }
      },
      "type": "object"
    },
    "ListTopicRulesRequest": {
      "description": "The input for the ListTopicRules operation.",
      "properties": {},
      "type": "object"
    },
    "ListTopicRulesResponse": {
      "description": "The output from the ListTopicRules operation.",
      "properties": {
        "nextToken": {
          "$ref": "#/definitions/NextToken",
          "description": "A token used to retrieve the next value."
        },
        "rules": {
          "$ref": "#/definitions/TopicRuleList",
          "description": "The rules."
        }
      },
      "type": "object"
    },
    "ListV2LoggingLevelsRequest": {
      "properties": {},
      "type": "object"
    },
    "ListV2LoggingLevelsResponse": {
      "properties": {
        "logTargetConfigurations": {
          "$ref": "#/definitions/LogTargetConfigurations",
          "description": "The logging configuration for a target."
        },
        "nextToken": {
          "$ref": "#/definitions/NextToken",
          "description": "The token used to get the next set of results, or <b>null</b> if there are no additional results."
        }
      },
      "type": "object"
    },
    "ListViolationEventsRequest": {
      "properties": {},
      "type": "object"
    },
    "ListViolationEventsResponse": {
      "properties": {
        "nextToken": {
          "$ref": "#/definitions/NextToken",
          "description": "A token that can be used to retrieve the next set of results, or <code>null</code> if there are no additional results."
        },
        "violationEvents": {
          "$ref": "#/definitions/ViolationEvents",
          "description": "The security profile violation alerts issued for this account during the given time frame, potentially filtered by security profile, behavior violated, or thing (device) violating."
        }
      },
      "type": "object"
    },
    "LogLevel": {
      "enum": [
        "DEBUG",
        "INFO",
        "ERROR",
        "WARN",
        "DISABLED"
      ],
      "type": "string"
    },
    "LogTarget": {
      "description": "A log target.",
      "properties": {
        "targetName": {
          "$ref": "#/definitions/LogTargetName",
          "description": "The target name."
        },
        "targetType": {
          "$ref": "#/definitions/LogTargetType",
          "description": "The target type."
        }
      },
      "required": [
        "targetType"
      ],
      "type": "object"
    },
    "LogTargetConfiguration": {
      "description": "The target configuration.",
      "properties": {
        "logLevel": {
          "$ref": "#/definitions/LogLevel",
          "description": "The logging level."
        },
        "logTarget": {
          "$ref": "#/definitions/LogTarget",
          "description": "A log target"
        }
      },
      "type": "object"
    },
    "LogTargetConfigurations": {
      "items": {
        "$ref": "#/definitions/LogTargetConfiguration"
      },
      "type": "array"
    },
    "LogTargetName": {
      "type": "string"
    },
    "LogTargetType": {
      "enum": [
        "DEFAULT",
        "THING_GROUP"
      ],
      "type": "string"
    },
    "LoggingOptionsPayload": {
      "description": "Describes the logging options payload.",
      "properties": {
        "logLevel": {
          "$ref": "#/definitions/LogLevel",
          "description": "The log level."
        },
        "roleArn": {
          "$ref": "#/definitions/AwsArn",
          "description": "The ARN of the IAM role that grants access."
        }
      },
      "required": [
        "roleArn"
      ],
      "type": "object"
    },
    "MalformedPolicyException": {},
    "Marker": {
      "pattern": "[A-Za-z0-9+/]+={0,2}",
      "type": "string"
    },
    "MaxJobExecutionsPerMin": {
      "minimum": 1,
      "type": "integer"
    },
    "MaxResults": {
      "maximum": 250,
      "minimum": 1,
      "type": "integer"
    },
    "MaximumPerMinute": {
      "maximum": 1000,
      "minimum": 1,
      "type": "integer"
    },
    "Message": {
      "maxLength": 128,
      "type": "string"
    },
    "MessageFormat": {
      "enum": [
        "RAW",
        "JSON"
      ],
      "type": "string"
    },
    "MessageId": {
      "maxLength": 128,
      "type": "string"
    },
    "MetricValue": {
      "description": "The value to be compared with the <code>metric</code>.",
      "properties": {
        "cidrs": {
          "$ref": "#/definitions/Cidrs",
          "description": "If the <code>comparisonOperator</code> calls for a set of CIDRs, use this to specify that set to be compared with the <code>metric</code>."
        },
        "count": {
          "$ref": "#/definitions/UnsignedLong",
          "description": "If the <code>comparisonOperator</code> calls for a numeric value, use this to specify that numeric value to be compared with the <code>metric</code>."
        },
        "ports": {
          "$ref": "#/definitions/Ports",
          "description": "If the <code>comparisonOperator</code> calls for a set of ports, use this to specify that set to be compared with the <code>metric</code>."
        }
      },
      "type": "object"
    },
    "MinimumNumberOfExecutedThings": {
      "minimum": 1,
      "type": "integer"
    },
    "MissingContextValue": {
      "type": "string"
    },
    "MissingContextValues": {
      "items": {
        "$ref": "#/definitions/MissingContextValue"
      },
      "type": "array"
    },
    "NextToken": {
      "type": "string"
    },
    "NonCompliantChecksCount": {
      "type": "integer"
    },
    "NonCompliantResource": {
      "description": "Information about the resource that was non-compliant with the audit check.",
      "properties": {
        "additionalInfo": {
          "$ref": "#/definitions/StringMap",
          "description": "Additional information about the non-compliant resource."
        },
        "resourceIdentifier": {
          "$ref": "#/definitions/ResourceIdentifier",
          "description": "Information identifying the non-compliant resource."
        },
        "resourceType": {
          "$ref": "#/definitions/ResourceType",
          "description": "The type of the non-compliant resource."
        }
      },
      "type": "object"
    },
    "NonCompliantResourcesCount": {
      "type": "integer"
    },
    "NotConfiguredException": {},
    "NumberOfThings": {
      "minimum": 1,
      "type": "integer"
    },
    "OTAUpdateArn": {
      "type": "string"
    },
    "OTAUpdateDescription": {
      "maxLength": 2028,
      "pattern": "[^\\p{C}]+",
      "type": "string"
    },
    "OTAUpdateErrorMessage": {
      "type": "string"
    },
    "OTAUpdateFile": {
      "description": "Describes a file to be associated with an OTA update.",
      "properties": {
        "attributes": {
          "$ref": "#/definitions/AttributesMap",
          "description": "A list of name/attribute pairs."
        },
        "codeSigning": {
          "$ref": "#/definitions/CodeSigning",
          "description": "The code signing method of the file."
        },
        "fileLocation": {
          "$ref": "#/definitions/FileLocation",
          "description": "The location of the updated firmware."
        },
        "fileName": {
          "$ref": "#/definitions/FileName",
          "description": "The name of the file."
        },
        "fileVersion": {
          "$ref": "#/definitions/OTAUpdateFileVersion",
          "description": "The file version."
        }
      },
      "type": "object"
    },
    "OTAUpdateFileVersion": {
      "type": "string"
    },
    "OTAUpdateFiles": {
      "items": {
        "$ref": "#/definitions/OTAUpdateFile"
      },
      "maxItems": 50,
      "minItems": 1,
      "type": "array"
    },
    "OTAUpdateId": {
      "maxLength": 128,
      "minLength": 1,
      "pattern": "[a-zA-Z0-9_-]+",
      "type": "string"
    },
    "OTAUpdateInfo": {
      "description": "Information about an OTA update.",
      "properties": {
        "additionalParameters": {
          "$ref": "#/definitions/AdditionalParameterMap",
          "description": "A collection of name/value pairs"
        },
        "awsIotJobArn": {
          "$ref": "#/definitions/AwsIotJobArn",
          "description": "The AWS IoT job ARN associated with the OTA update."
        },
        "awsIotJobId": {
          "$ref": "#/definitions/AwsIotJobId",
          "description": "The AWS IoT job ID associated with the OTA update."
        },
        "awsJobExecutionsRolloutConfig": {
          "$ref": "#/definitions/AwsJobExecutionsRolloutConfig",
          "description": "Configuration for the rollout of OTA updates."
        },
        "creationDate": {
          "$ref": "#/definitions/DateType",
          "description": "The date when the OTA update was created."
        },
        "description": {
          "$ref": "#/definitions/OTAUpdateDescription",
          "description": "A description of the OTA update."
        },
        "errorInfo": {
          "$ref": "#/definitions/ErrorInfo",
          "description": "Error information associated with the OTA update."
        },
        "lastModifiedDate": {
          "$ref": "#/definitions/DateType",
          "description": "The date when the OTA update was last updated."
        },
        "otaUpdateArn": {
          "$ref": "#/definitions/OTAUpdateArn",
          "description": "The OTA update ARN."
        },
        "otaUpdateFiles": {
          "$ref": "#/definitions/OTAUpdateFiles",
          "description": "A list of files associated with the OTA update."
        },
        "otaUpdateId": {
          "$ref": "#/definitions/OTAUpdateId",
          "description": "The OTA update ID."
        },
        "otaUpdateStatus": {
          "$ref": "#/definitions/OTAUpdateStatus",
          "description": "The status of the OTA update."
        },
        "targetSelection": {
          "$ref": "#/definitions/TargetSelection",
          "description": "Specifies whether the OTA update will continue to run (CONTINUOUS), or will be complete after all those things specified as targets have completed the OTA update (SNAPSHOT). If continuous, the OTA update may also be run on a thing when a change is detected in a target. For example, an OTA update will run on a thing when the thing is added to a target group, even after the OTA update was completed by all things originally in the group. "
        },
        "targets": {
          "$ref": "#/definitions/Targets",
          "description": "The targets of the OTA update."
        }
      },
      "type": "object"
    },
    "OTAUpdateStatus": {
      "enum": [
        "CREATE_PENDING",
        "CREATE_IN_PROGRESS",
        "CREATE_COMPLETE",
        "CREATE_FAILED"
      ],
      "type": "string"
    },
    "OTAUpdateSummary": {
      "description": "An OTA update summary.",
      "properties": {
        "creationDate": {
          "$ref": "#/definitions/DateType",
          "description": "The date when the OTA update was created."
        },
        "otaUpdateArn": {
          "$ref": "#/definitions/OTAUpdateArn",
          "description": "The OTA update ARN."
        },
        "otaUpdateId": {
          "$ref": "#/definitions/OTAUpdateId",
          "description": "The OTA update ID."
        }
      },
      "type": "object"
    },
    "OTAUpdatesSummary": {
      "items": {
        "$ref": "#/definitions/OTAUpdateSummary"
      },
      "type": "array"
    },
    "OptionalVersion": {
      "type": "integer"
    },
    "OutgoingCertificate": {
      "description": "A certificate that has been transferred but not yet accepted.",
      "properties": {
        "certificateArn": {
          "$ref": "#/definitions/CertificateArn",
          "description": "The certificate ARN."
        },
        "certificateId": {
          "$ref": "#/definitions/CertificateId",
          "description": "The certificate ID."
        },
        "creationDate": {
          "$ref": "#/definitions/DateType",
          "description": "The certificate creation date."
        },
        "transferDate": {
          "$ref": "#/definitions/DateType",
          "description": "The date the transfer was initiated."
        },
        "transferMessage": {
          "$ref": "#/definitions/Message",
          "description": "The transfer message."
        },
        "transferredTo": {
          "$ref": "#/definitions/AwsAccountId",
          "description": "The AWS account to which the transfer was made."
        }
      },
      "type": "object"
    },
    "OutgoingCertificates": {
      "items": {
        "$ref": "#/definitions/OutgoingCertificate"
      },
      "type": "array"
    },
    "OverrideDynamicGroups": {
      "type": "boolean"
    },
    "PageSize": {
      "maximum": 250,
      "minimum": 1,
      "type": "integer"
    },
    "Parameter": {
      "type": "string"
    },
    "Parameters": {
      "items": {
        "properties": {
          "key": {
            "$ref": "#/definitions/Parameter"
          },
          "value": {
            "$ref": "#/definitions/Value"
          }
        },
        "type": "object"
      },
      "type": "array"
    },
    "PartitionKey": {
      "type": "string"
    },
    "PayloadField": {
      "type": "string"
    },
    "Percentage": {
      "maximum": 100,
      "minimum": 0,
      "type": "integer"
    },
    "Platform": {
      "type": "string"
    },
    "Policies": {
      "items": {
        "$ref": "#/definitions/Policy"
      },
      "type": "array"
    },
    "Policy": {
      "description": "Describes an AWS IoT policy.",
      "properties": {
        "policyArn": {
          "$ref": "#/definitions/PolicyArn",
          "description": "The policy ARN."
        },
        "policyName": {
          "$ref": "#/definitions/PolicyName",
          "description": "The policy name."
        }
      },
      "type": "object"
    },
    "PolicyArn": {
      "type": "string"
    },
    "PolicyDocument": {
      "type": "string"
    },
    "PolicyDocuments": {
      "items": {
        "$ref": "#/definitions/PolicyDocument"
      },
      "type": "array"
    },
    "PolicyName": {
      "maxLength": 128,
      "minLength": 1,
      "pattern": "[\\w+=,.@-]+",
      "type": "string"
    },
    "PolicyNames": {
      "items": {
        "$ref": "#/definitions/PolicyName"
      },
      "type": "array"
    },
    "PolicyTarget": {
      "type": "string"
    },
    "PolicyTargets": {
      "items": {
        "$ref": "#/definitions/PolicyTarget"
      },
      "type": "array"
    },
    "PolicyVersion": {
      "description": "Describes a policy version.",
      "properties": {
        "createDate": {
          "$ref": "#/definitions/DateType",
          "description": "The date and time the policy was created."
        },
        "isDefaultVersion": {
          "$ref": "#/definitions/IsDefaultVersion",
          "description": "Specifies whether the policy version is the default."
        },
        "versionId": {
          "$ref": "#/definitions/PolicyVersionId",
          "description": "The policy version ID."
        }
      },
      "type": "object"
    },
    "PolicyVersionId": {
      "pattern": "[0-9]+",
      "type": "string"
    },
    "PolicyVersionIdentifier": {
      "description": "Information about the version of the policy associated with the resource.",
      "properties": {
        "policyName": {
          "$ref": "#/definitions/PolicyName",
          "description": "The name of the policy."
        },
        "policyVersionId": {
          "$ref": "#/definitions/PolicyVersionId",
          "description": "The ID of the version of the policy associated with the resource."
        }
      },
      "type": "object"
    },
    "PolicyVersions": {
      "items": {
        "$ref": "#/definitions/PolicyVersion"
      },
      "type": "array"
    },
    "Port": {
      "maximum": 65535,
      "minimum": 0,
      "type": "integer"
    },
    "Ports": {
      "items": {
        "$ref": "#/definitions/Port"
      },
      "type": "array"
    },
    "Prefix": {
      "type": "string"
    },
    "PresignedUrlConfig": {
      "description": "Configuration for pre-signed S3 URLs.",
      "properties": {
        "expiresInSec": {
          "$ref": "#/definitions/ExpiresInSec",
          "description": "How long (in seconds) pre-signed URLs are valid. Valid values are 60 - 3600, the default value is 3600 seconds. Pre-signed URLs are generated when Jobs receives an MQTT request for the job document."
        },
        "roleArn": {
          "$ref": "#/definitions/RoleArn",
          "description": "The ARN of an IAM role that grants grants permission to download files from the S3 bucket where the job data/updates are stored. The role must also grant permission for IoT to download the files."
        }
      },
      "type": "object"
    },
    "Principal": {
      "type": "string"
    },
    "PrincipalArn": {
      "type": "string"
    },
    "PrincipalId": {
      "maxLength": 128,
      "minLength": 1,
      "pattern": "[a-zA-Z0-9]+",
      "type": "string"
    },
    "Principals": {
      "items": {
        "$ref": "#/definitions/PrincipalArn"
      },
      "type": "array"
    },
    "PrivateKey": {
      "format": "password",
      "minLength": 1,
      "type": "string"
    },
    "ProcessingTargetName": {
      "type": "string"
    },
    "ProcessingTargetNameList": {
      "items": {
        "$ref": "#/definitions/ProcessingTargetName"
      },
      "type": "array"
    },
    "PublicKey": {
      "minLength": 1,
      "type": "string"
    },
    "PublicKeyMap": {
      "items": {
        "properties": {
          "key": {
            "$ref": "#/definitions/KeyName"
          },
          "value": {
            "$ref": "#/definitions/KeyValue"
          }
        },
        "type": "object"
      },
      "type": "array"
    },
    "PutItemInput": {
      "description": "The input for the DynamoActionVS action that specifies the DynamoDB table to which the message data will be written.",
      "properties": {
        "tableName": {
          "$ref": "#/definitions/TableName",
          "description": "The table where the message data will be written"
        }
      },
      "required": [
        "tableName"
      ],
      "type": "object"
    },
    "QueryMaxResults": {
      "maximum": 500,
      "minimum": 1,
      "type": "integer"
    },
    "QueryString": {
      "minLength": 1,
      "type": "string"
    },
    "QueryVersion": {
      "type": "string"
    },
    "QueueUrl": {
      "type": "string"
    },
    "QueuedThings": {
      "type": "integer"
    },
    "RangeKeyField": {
      "type": "string"
    },
    "RangeKeyValue": {
      "type": "string"
    },
    "RateIncreaseCriteria": {
      "description": "Allows you to define a criteria to initiate the increase in rate of rollout for a job.",
      "properties": {
        "numberOfNotifiedThings": {
          "$ref": "#/definitions/NumberOfThings",
          "description": "The threshold for number of notified things that will initiate the increase in rate of rollout."
        },
        "numberOfSucceededThings": {
          "$ref": "#/definitions/NumberOfThings",
          "description": "The threshold for number of succeeded things that will initiate the increase in rate of rollout."
        }
      },
      "type": "object"
    },
    "ReasonCode": {
      "maxLength": 128,
      "pattern": "[\\p{Upper}\\p{Digit}_]+",
      "type": "string"
    },
    "ReasonForNonCompliance": {
      "type": "string"
    },
    "ReasonForNonComplianceCode": {
      "type": "string"
    },
    "Recursive": {
      "type": "boolean"
    },
    "RecursiveWithoutDefault": {
      "type": "boolean"
    },
    "RegisterCACertificateRequest": {
      "description": "The input to the RegisterCACertificate operation.",
      "properties": {
        "caCertificate": {
          "$ref": "#/definitions/CertificatePem",
          "description": "The CA certificate."
        },
        "registrationConfig": {
          "$ref": "#/definitions/RegistrationConfig",
          "description": "Information about the registration configuration."
        },
        "verificationCertificate": {
          "$ref": "#/definitions/CertificatePem",
          "description": "The private key verification certificate."
        }
      },
      "required": [
        "caCertificate",
        "verificationCertificate"
      ],
      "type": "object"
    },
    "RegisterCACertificateResponse": {
      "description": "The output from the RegisterCACertificateResponse operation.",
      "properties": {
        "certificateArn": {
          "$ref": "#/definitions/CertificateArn",
          "description": "The CA certificate ARN."
        },
        "certificateId": {
          "$ref": "#/definitions/CertificateId",
          "description": "The CA certificate identifier."
        }
      },
      "type": "object"
    },
    "RegisterCertificateRequest": {
      "description": "The input to the RegisterCertificate operation.",
      "properties": {
        "caCertificatePem": {
          "$ref": "#/definitions/CertificatePem",
          "description": "The CA certificate used to sign the device certificate being registered."
        },
        "certificatePem": {
          "$ref": "#/definitions/CertificatePem",
          "description": "The certificate data, in PEM format."
        },
        "status": {
          "$ref": "#/definitions/CertificateStatus",
          "description": "The status of the register certificate request."
        }
      },
      "required": [
        "certificatePem"
      ],
      "type": "object"
    },
    "RegisterCertificateResponse": {
      "description": "The output from the RegisterCertificate operation.",
      "properties": {
        "certificateArn": {
          "$ref": "#/definitions/CertificateArn",
          "description": "The certificate ARN."
        },
        "certificateId": {
          "$ref": "#/definitions/CertificateId",
          "description": "The certificate identifier."
        }
      },
      "type": "object"
    },
    "RegisterThingRequest": {
      "properties": {
        "parameters": {
          "$ref": "#/definitions/Parameters",
          "description": "The parameters for provisioning a thing. See <a href=\"http://docs.aws.amazon.com/iot/latest/developerguide/programmatic-provisioning.html\">Programmatic Provisioning</a> for more information."
        },
        "templateBody": {
          "$ref": "#/definitions/TemplateBody",
          "description": "The provisioning template. See <a href=\"http://docs.aws.amazon.com/iot/latest/developerguide/programmatic-provisioning.html\">Programmatic Provisioning</a> for more information."
        }
      },
      "required": [
        "templateBody"
      ],
      "type": "object"
    },
    "RegisterThingResponse": {
      "properties": {
        "certificatePem": {
          "$ref": "#/definitions/CertificatePem",
          "description": "."
        },
        "resourceArns": {
          "$ref": "#/definitions/ResourceArns",
          "description": "ARNs for the generated resources."
        }
      },
      "type": "object"
    },
    "RegistrationCode": {
      "maxLength": 64,
      "minLength": 64,
      "pattern": "(0x)?[a-fA-F0-9]+",
      "type": "string"
    },
    "RegistrationCodeValidationException": {},
    "RegistrationConfig": {
      "description": "The registration configuration.",
      "properties": {
        "roleArn": {
          "$ref": "#/definitions/RoleArn",
          "description": "The ARN of the role."
        },
        "templateBody": {
          "$ref": "#/definitions/TemplateBody",
          "description": "The template body."
        }
      },
      "type": "object"
    },
    "RegistryMaxResults": {
      "maximum": 250,
      "minimum": 1,
      "type": "integer"
    },
    "RegistryS3BucketName": {
      "maxLength": 256,
      "minLength": 3,
      "pattern": "[a-zA-Z0-9._-]+",
      "type": "string"
    },
    "RegistryS3KeyName": {
      "maxLength": 1024,
      "minLength": 1,
      "pattern": "[a-zA-Z0-9!_.*'()-\\/]+",
      "type": "string"
    },
    "RejectCertificateTransferRequest": {
      "description": "The input for the RejectCertificateTransfer operation.",
      "properties": {
        "rejectReason": {
          "$ref": "#/definitions/Message",
          "description": "The reason the certificate transfer was rejected."
        }
      },
      "type": "object"
    },
    "RejectedThings": {
      "type": "integer"
    },
    "RelatedResource": {
      "description": "Information about a related resource.",
      "properties": {
        "additionalInfo": {
          "$ref": "#/definitions/StringMap",
          "description": "Additional information about the resource."
        },
        "resourceIdentifier": {
          "$ref": "#/definitions/ResourceIdentifier",
          "description": "Information identifying the resource."
        },
        "resourceType": {
          "$ref": "#/definitions/ResourceType",
          "description": "The type of resource."
        }
      },
      "type": "object"
    },
    "RelatedResources": {
      "items": {
        "$ref": "#/definitions/RelatedResource"
      },
      "type": "array"
    },
    "RemoveAutoRegistration": {
      "type": "boolean"
    },
    "RemoveThingFromBillingGroupRequest": {
      "properties": {
        "billingGroupArn": {
          "$ref": "#/definitions/BillingGroupArn",
          "description": "The ARN of the billing group."
        },
        "billingGroupName": {
          "$ref": "#/definitions/BillingGroupName",
          "description": "The name of the billing group."
        },
        "thingArn": {
          "$ref": "#/definitions/ThingArn",
          "description": "The ARN of the thing to be removed from the billing group."
        },
        "thingName": {
          "$ref": "#/definitions/ThingName",
          "description": "The name of the thing to be removed from the billing group."
        }
      },
      "type": "object"
    },
    "RemoveThingFromBillingGroupResponse": {
      "properties": {},
      "type": "object"
    },
    "RemoveThingFromThingGroupRequest": {
      "properties": {
        "thingArn": {
          "$ref": "#/definitions/ThingArn",
          "description": "The ARN of the thing to remove from the group."
        },
        "thingGroupArn": {
          "$ref": "#/definitions/ThingGroupArn",
          "description": "The group ARN."
        },
        "thingGroupName": {
          "$ref": "#/definitions/ThingGroupName",
          "description": "The group name."
        },
        "thingName": {
          "$ref": "#/definitions/ThingName",
          "description": "The name of the thing to remove from the group."
        }
      },
      "type": "object"
    },
    "RemoveThingFromThingGroupResponse": {
      "properties": {},
      "type": "object"
    },
    "RemoveThingType": {
      "type": "boolean"
    },
    "RemovedThings": {
      "type": "integer"
    },
    "ReplaceTopicRuleRequest": {
      "description": "The input for the ReplaceTopicRule operation.",
      "properties": {
        "topicRulePayload": {
          "$ref": "#/definitions/TopicRulePayload",
          "description": "The rule payload."
        }
      },
      "required": [
        "topicRulePayload"
      ],
      "type": "object"
    },
    "ReportType": {
      "enum": [
        "ERRORS",
        "RESULTS"
      ],
      "type": "string"
    },
    "RepublishAction": {
      "description": "Describes an action to republish to another topic.",
      "properties": {
        "roleArn": {
          "$ref": "#/definitions/AwsArn",
          "description": "The ARN of the IAM role that grants access."
        },
        "topic": {
          "$ref": "#/definitions/TopicPattern",
          "description": "The name of the MQTT topic."
        }
      },
      "required": [
        "roleArn",
        "topic"
      ],
      "type": "object"
    },
    "Resource": {
      "type": "string"
    },
    "ResourceAlreadyExistsException": {},
    "ResourceArn": {
      "type": "string"
    },
    "ResourceArns": {
      "items": {
        "properties": {
          "key": {
            "$ref": "#/definitions/ResourceLogicalId"
          },
          "value": {
            "$ref": "#/definitions/ResourceArn"
          }
        },
        "type": "object"
      },
      "type": "array"
    },
    "ResourceIdentifier": {
      "description": "Information identifying the non-compliant resource.",
      "properties": {
        "account": {
          "$ref": "#/definitions/AwsAccountId",
          "description": "The account with which the resource is associated."
        },
        "caCertificateId": {
          "$ref": "#/definitions/CertificateId",
          "description": "The ID of the CA certificate used to authorize the certificate."
        },
        "clientId": {
          "$ref": "#/definitions/ClientId",
          "description": "The client ID."
        },
        "cognitoIdentityPoolId": {
          "$ref": "#/definitions/CognitoIdentityPoolId",
          "description": "The ID of the Cognito Identity Pool."
        },
        "deviceCertificateId": {
          "$ref": "#/definitions/CertificateId",
          "description": "The ID of the certificate attached to the resource."
        },
        "policyVersionIdentifier": {
          "$ref": "#/definitions/PolicyVersionIdentifier",
          "description": "The version of the policy associated with the resource."
        }
      },
      "type": "object"
    },
    "ResourceLogicalId": {
      "type": "string"
    },
    "ResourceNotFoundException": {},
    "ResourceRegistrationFailureException": {},
    "ResourceType": {
      "enum": [
        "DEVICE_CERTIFICATE",
        "CA_CERTIFICATE",
        "IOT_POLICY",
        "COGNITO_IDENTITY_POOL",
        "CLIENT_ID",
        "ACCOUNT_SETTINGS"
      ],
      "type": "string"
    },
    "Resources": {
      "items": {
        "$ref": "#/definitions/Resource"
      },
      "type": "array"
    },
    "RoleAlias": {
      "maxLength": 128,
      "minLength": 1,
      "pattern": "[\\w=,@-]+",
      "type": "string"
    },
    "RoleAliasArn": {
      "type": "string"
    },
    "RoleAliasDescription": {
      "description": "Role alias description.",
      "properties": {
        "creationDate": {
          "$ref": "#/definitions/DateType",
          "description": "The UNIX timestamp of when the role alias was created."
        },
        "credentialDurationSeconds": {
          "$ref": "#/definitions/CredentialDurationSeconds",
          "description": "The number of seconds for which the credential is valid."
        },
        "lastModifiedDate": {
          "$ref": "#/definitions/DateType",
          "description": "The UNIX timestamp of when the role alias was last modified."
        },
        "owner": {
          "$ref": "#/definitions/AwsAccountId",
          "description": "The role alias owner."
        },
        "roleAlias": {
          "$ref": "#/definitions/RoleAlias",
          "description": "The role alias."
        },
        "roleAliasArn": {
          "$ref": "#/definitions/RoleAliasArn",
          "description": "The ARN of the role alias."
        },
        "roleArn": {
          "$ref": "#/definitions/RoleArn",
          "description": "The role ARN."
        }
      },
      "type": "object"
    },
    "RoleAliases": {
      "items": {
        "$ref": "#/definitions/RoleAlias"
      },
      "type": "array"
    },
    "RoleArn": {
      "maxLength": 2048,
      "minLength": 20,
      "type": "string"
    },
    "RolloutRatePerMinute": {
      "maximum": 1000,
      "minimum": 1,
      "type": "integer"
    },
    "RuleArn": {
      "type": "string"
    },
    "RuleName": {
      "maxLength": 128,
      "minLength": 1,
      "pattern": "^[a-zA-Z0-9_]+$",
      "type": "string"
    },
    "S3Action": {
      "description": "Describes an action to write data to an Amazon S3 bucket.",
      "properties": {
        "bucketName": {
          "$ref": "#/definitions/BucketName",
          "description": "The Amazon S3 bucket."
        },
        "cannedAcl": {
          "$ref": "#/definitions/CannedAccessControlList",
          "description": "The Amazon S3 canned ACL that controls access to the object identified by the object key. For more information, see <a href=\"http://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#canned-acl\">S3 canned ACLs</a>."
        },
        "key": {
          "$ref": "#/definitions/Key",
          "description": "The object key."
        },
        "roleArn": {
          "$ref": "#/definitions/AwsArn",
          "description": "The ARN of the IAM role that grants access."
        }
      },
      "required": [
        "roleArn",
        "bucketName",
        "key"
      ],
      "type": "object"
    },
    "S3Bucket": {
      "minLength": 1,
      "type": "string"
    },
    "S3Destination": {
      "description": "Describes the location of updated firmware in S3.",
      "properties": {
        "bucket": {
          "$ref": "#/definitions/S3Bucket",
          "description": "The S3 bucket that contains the updated firmware."
        },
        "prefix": {
          "$ref": "#/definitions/Prefix",
          "description": "The S3 prefix."
        }
      },
      "type": "object"
    },
    "S3FileUrl": {
      "maxLength": 65535,
      "type": "string"
    },
    "S3FileUrlList": {
      "items": {
        "$ref": "#/definitions/S3FileUrl"
      },
      "type": "array"
    },
    "S3Key": {
      "minLength": 1,
      "type": "string"
    },
    "S3Location": {
      "description": "The S3 location.",
      "properties": {
        "bucket": {
          "$ref": "#/definitions/S3Bucket",
          "description": "The S3 bucket."
        },
        "key": {
          "$ref": "#/definitions/S3Key",
          "description": "The S3 key."
        },
        "version": {
          "$ref": "#/definitions/S3Version",
          "description": "The S3 bucket version."
        }
      },
      "type": "object"
    },
    "S3Version": {
      "type": "string"
    },
    "SQL": {
      "type": "string"
    },
    "SalesforceAction": {
      "description": "Describes an action to write a message to a Salesforce IoT Cloud Input Stream.",
      "properties": {
        "token": {
          "$ref": "#/definitions/SalesforceToken",
          "description": "The token used to authenticate access to the Salesforce IoT Cloud Input Stream. The token is available from the Salesforce IoT Cloud platform after creation of the Input Stream."
        },
        "url": {
          "$ref": "#/definitions/SalesforceEndpoint",
          "description": "The URL exposed by the Salesforce IoT Cloud Input Stream. The URL is available from the Salesforce IoT Cloud platform after creation of the Input Stream."
        }
      },
      "required": [
        "token",
        "url"
      ],
      "type": "object"
    },
    "SalesforceEndpoint": {
      "maxLength": 2000,
      "pattern": "https://ingestion-[a-zA-Z0-9]{1,12}\\.[a-zA-Z0-9]+\\.((sfdc-matrix\\.net)|(sfdcnow\\.com))/streams/\\w{1,20}/\\w{1,20}/event",
      "type": "string"
    },
    "SalesforceToken": {
      "minLength": 40,
      "type": "string"
    },
    "ScheduledAuditArn": {
      "type": "string"
    },
    "ScheduledAuditMetadata": {
      "description": "Information about the scheduled audit.",
      "properties": {
        "dayOfMonth": {
          "$ref": "#/definitions/DayOfMonth",
          "description": "The day of the month on which the scheduled audit is run (if the <code>frequency</code> is \"MONTHLY\"). If days 29-31 are specified, and the month does not have that many days, the audit takes place on the \"LAST\" day of the month."
        },
        "dayOfWeek": {
          "$ref": "#/definitions/DayOfWeek",
          "description": "The day of the week on which the scheduled audit is run (if the <code>frequency</code> is \"WEEKLY\" or \"BIWEEKLY\")."
        },
        "frequency": {
          "$ref": "#/definitions/AuditFrequency",
          "description": "How often the scheduled audit takes place."
        },
        "scheduledAuditArn": {
          "$ref": "#/definitions/ScheduledAuditArn",
          "description": "The ARN of the scheduled audit."
        },
        "scheduledAuditName": {
          "$ref": "#/definitions/ScheduledAuditName",
          "description": "The name of the scheduled audit."
        }
      },
      "type": "object"
    },
    "ScheduledAuditMetadataList": {
      "items": {
        "$ref": "#/definitions/ScheduledAuditMetadata"
      },
      "type": "array"
    },
    "ScheduledAuditName": {
      "maxLength": 128,
      "minLength": 1,
      "pattern": "[a-zA-Z0-9_-]+",
      "type": "string"
    },
    "SearchIndexRequest": {
      "properties": {
        "indexName": {
          "$ref": "#/definitions/IndexName",
          "description": "The search index name."
        },
        "maxResults": {
          "$ref": "#/definitions/QueryMaxResults",
          "description": "The maximum number of results to return at one time."
        },
        "nextToken": {
          "$ref": "#/definitions/NextToken",
          "description": "The token used to get the next set of results, or <b>null</b> if there are no additional results."
        },
        "queryString": {
          "$ref": "#/definitions/QueryString",
          "description": "The search query string."
        },
        "queryVersion": {
          "$ref": "#/definitions/QueryVersion",
          "description": "The query version."
        }
      },
      "required": [
        "queryString"
      ],
      "type": "object"
    },
    "SearchIndexResponse": {
      "properties": {
        "nextToken": {
          "$ref": "#/definitions/NextToken",
          "description": "The token used to get the next set of results, or <b>null</b> if there are no additional results."
        },
        "thingGroups": {
          "$ref": "#/definitions/ThingGroupDocumentList",
          "description": "The thing groups that match the search query."
        },
        "things": {
          "$ref": "#/definitions/ThingDocumentList",
          "description": "The things that match the search query."
        }
      },
      "type": "object"
    },
    "SearchableAttributes": {
      "items": {
        "$ref": "#/definitions/AttributeName"
      },
      "type": "array"
    },
    "Seconds": {
      "type": "integer"
    },
    "SecurityProfileArn": {
      "type": "string"
    },
    "SecurityProfileDescription": {
      "maxLength": 1000,
      "pattern": "[\\p{Graph}\\x20]*",
      "type": "string"
    },
    "SecurityProfileIdentifier": {
      "description": "Identifying information for a Device Defender security profile.",
      "properties": {
        "arn": {
          "$ref": "#/definitions/SecurityProfileArn",
          "description": "The ARN of the security profile."
        },
        "name": {
          "$ref": "#/definitions/SecurityProfileName",
          "description": "The name you have given to the security profile."
        }
      },
      "required": [
        "name",
        "arn"
      ],
      "type": "object"
    },
    "SecurityProfileIdentifiers": {
      "items": {
        "$ref": "#/definitions/SecurityProfileIdentifier"
      },
      "type": "array"
    },
    "SecurityProfileName": {
      "maxLength": 128,
      "minLength": 1,
      "pattern": "[a-zA-Z0-9:_-]+",
      "type": "string"
    },
    "SecurityProfileTarget": {
      "description": "A target to which an alert is sent when a security profile behavior is violated.",
      "properties": {
        "arn": {
          "$ref": "#/definitions/SecurityProfileTargetArn",
          "description": "The ARN of the security profile."
        }
      },
      "required": [
        "arn"
      ],
      "type": "object"
    },
    "SecurityProfileTargetArn": {
      "type": "string"
    },
    "SecurityProfileTargetMapping": {
      "description": "Information about a security profile and the target associated with it.",
      "properties": {
        "securityProfileIdentifier": {
          "$ref": "#/definitions/SecurityProfileIdentifier",
          "description": "Information that identifies the security profile."
        },
        "target": {
          "$ref": "#/definitions/SecurityProfileTarget",
          "description": "Information about the target (thing group) associated with the security profile."
        }
      },
      "type": "object"
    },
    "SecurityProfileTargetMappings": {
      "items": {
        "$ref": "#/definitions/SecurityProfileTargetMapping"
      },
      "type": "array"
    },
    "SecurityProfileTargets": {
      "items": {
        "$ref": "#/definitions/SecurityProfileTarget"
      },
      "type": "array"
    },
    "ServiceUnavailableException": {},
    "SetAsActive": {
      "type": "boolean"
    },
    "SetAsActiveFlag": {
      "type": "boolean"
    },
    "SetAsDefault": {
      "type": "boolean"
    },
    "SetDefaultAuthorizerRequest": {
      "properties": {
        "authorizerName": {
          "$ref": "#/definitions/AuthorizerName",
          "description": "The authorizer name."
        }
      },
      "required": [
        "authorizerName"
      ],
      "type": "object"
    },
    "SetDefaultAuthorizerResponse": {
      "properties": {
        "authorizerArn": {
          "$ref": "#/definitions/AuthorizerArn",
          "description": "The authorizer ARN."
        },
        "authorizerName": {
          "$ref": "#/definitions/AuthorizerName",
          "description": "The authorizer name."
        }
      },
      "type": "object"
    },
    "SetDefaultPolicyVersionRequest": {
      "description": "The input for the SetDefaultPolicyVersion operation.",
      "properties": {},
      "type": "object"
    },
    "SetLoggingOptionsRequest": {
      "description": "The input for the SetLoggingOptions operation.",
      "properties": {
        "loggingOptionsPayload": {
          "$ref": "#/definitions/LoggingOptionsPayload",
          "description": "The logging options payload."
        }
      },
      "required": [
        "loggingOptionsPayload"
      ],
      "type": "object"
    },
    "SetV2LoggingLevelRequest": {
      "properties": {
        "logLevel": {
          "$ref": "#/definitions/LogLevel",
          "description": "The log level."
        },
        "logTarget": {
          "$ref": "#/definitions/LogTarget",
          "description": "The log target."
        }
      },
      "required": [
        "logTarget",
        "logLevel"
      ],
      "type": "object"
    },
    "SetV2LoggingOptionsRequest": {
      "properties": {
        "defaultLogLevel": {
          "$ref": "#/definitions/LogLevel",
          "description": "The default logging level."
        },
        "disableAllLogs": {
          "$ref": "#/definitions/DisableAllLogs",
          "description": "If true all logs are disabled. The default is false."
        },
        "roleArn": {
          "$ref": "#/definitions/AwsArn",
          "description": "The ARN of the role that allows IoT to write to Cloudwatch logs."
        }
      },
      "type": "object"
    },
    "Signature": {
      "type": "string"
    },
    "SignatureAlgorithm": {
      "type": "string"
    },
    "SigningJobId": {
      "type": "string"
    },
    "SigningProfileName": {
      "type": "string"
    },
    "SigningProfileParameter": {
      "description": "Describes the code-signing profile.",
      "properties": {
        "certificateArn": {
          "$ref": "#/definitions/CertificateArn",
          "description": "Certificate ARN."
        },
        "certificatePathOnDevice": {
          "$ref": "#/definitions/CertificatePathOnDevice",
          "description": "The location of the code-signing certificate on your device."
        },
        "platform": {
          "$ref": "#/definitions/Platform",
          "description": "The hardware platform of your device."
        }
      },
      "type": "object"
    },
    "SkyfallMaxResults": {
      "maximum": 250,
      "minimum": 1,
      "type": "integer"
    },
    "SnsAction": {
      "description": "Describes an action to publish to an Amazon SNS topic.",
      "properties": {
        "messageFormat": {
          "$ref": "#/definitions/MessageFormat",
          "description": "(Optional) The message format of the message to publish. Accepted values are \"JSON\" and \"RAW\". The default value of the attribute is \"RAW\". SNS uses this setting to determine if the payload should be parsed and relevant platform-specific bits of the payload should be extracted. To read more about SNS message formats, see <a href=\"http://docs.aws.amazon.com/sns/latest/dg/json-formats.html\">http://docs.aws.amazon.com/sns/latest/dg/json-formats.html</a> refer to their official documentation."
        },
        "roleArn": {
          "$ref": "#/definitions/AwsArn",
          "description": "The ARN of the IAM role that grants access."
        },
        "targetArn": {
          "$ref": "#/definitions/AwsArn",
          "description": "The ARN of the SNS topic."
        }
      },
      "required": [
        "targetArn",
        "roleArn"
      ],
      "type": "object"
    },
    "SqlParseException": {},
    "SqsAction": {
      "description": "Describes an action to publish data to an Amazon SQS queue.",
      "properties": {
        "queueUrl": {
          "$ref": "#/definitions/QueueUrl",
          "description": "The URL of the Amazon SQS queue."
        },
        "roleArn": {
          "$ref": "#/definitions/AwsArn",
          "description": "The ARN of the IAM role that grants access."
        },
        "useBase64": {
          "$ref": "#/definitions/UseBase64",
          "description": "Specifies whether to use Base64 encoding."
        }
      },
      "required": [
        "roleArn",
        "queueUrl"
      ],
      "type": "object"
    },
    "StartOnDemandAuditTaskRequest": {
      "properties": {
        "targetCheckNames": {
          "$ref": "#/definitions/TargetAuditCheckNames",
          "description": "Which checks are performed during the audit. The checks you specify must be enabled for your account or an exception occurs. Use <code>DescribeAccountAuditConfiguration</code> to see the list of all checks including those that are enabled or <code>UpdateAccountAuditConfiguration</code> to select which checks are enabled."
        }
      },
      "required": [
        "targetCheckNames"
      ],
      "type": "object"
    },
    "StartOnDemandAuditTaskResponse": {
      "properties": {
        "taskId": {
          "$ref": "#/definitions/AuditTaskId",
          "description": "The ID of the on-demand audit you started."
        }
      },
      "type": "object"
    },
    "StartSigningJobParameter": {
      "description": "Information required to start a signing job.",
      "properties": {
        "destination": {
          "$ref": "#/definitions/Destination",
          "description": "The location to write the code-signed file."
        },
        "signingProfileName": {
          "$ref": "#/definitions/SigningProfileName",
          "description": "The code-signing profile name."
        },
        "signingProfileParameter": {
          "$ref": "#/definitions/SigningProfileParameter",
          "description": "Describes the code-signing profile."
        }
      },
      "type": "object"
    },
    "StartThingRegistrationTaskRequest": {
      "properties": {
        "inputFileBucket": {
          "$ref": "#/definitions/RegistryS3BucketName",
          "description": "The S3 bucket that contains the input file."
        },
        "inputFileKey": {
          "$ref": "#/definitions/RegistryS3KeyName",
          "description": "The name of input file within the S3 bucket. This file contains a newline delimited JSON file. Each line contains the parameter values to provision one device (thing)."
        },
        "roleArn": {
          "$ref": "#/definitions/RoleArn",
          "description": "The IAM role ARN that grants permission the input file."
        },
        "templateBody": {
          "$ref": "#/definitions/TemplateBody",
          "description": "The provisioning template."
        }
      },
      "required": [
        "templateBody",
        "inputFileBucket",
        "inputFileKey",
        "roleArn"
      ],
      "type": "object"
    },
    "StartThingRegistrationTaskResponse": {
      "properties": {
        "taskId": {
          "$ref": "#/definitions/TaskId",
          "description": "The bulk thing provisioning task ID."
        }
      },
      "type": "object"
    },
    "StateMachineName": {
      "type": "string"
    },
    "StateReason": {
      "type": "string"
    },
    "StateValue": {
      "type": "string"
    },
    "Status": {
      "enum": [
        "InProgress",
        "Completed",
        "Failed",
        "Cancelled",
        "Cancelling"
      ],
      "type": "string"
    },
    "StepFunctionsAction": {
      "description": "Starts execution of a Step Functions state machine.",
      "properties": {
        "executionNamePrefix": {
          "$ref": "#/definitions/ExecutionNamePrefix",
          "description": "(Optional) A name will be given to the state machine execution consisting of this prefix followed by a UUID. Step Functions automatically creates a unique name for each state machine execution if one is not provided."
        },
        "roleArn": {
          "$ref": "#/definitions/AwsArn",
          "description": "The ARN of the role that grants IoT permission to start execution of a state machine (\"Action\":\"states:StartExecution\")."
        },
        "stateMachineName": {
          "$ref": "#/definitions/StateMachineName",
          "description": "The name of the Step Functions state machine whose execution will be started."
        }
      },
      "required": [
        "stateMachineName",
        "roleArn"
      ],
      "type": "object"
    },
    "StopThingRegistrationTaskRequest": {
      "properties": {},
      "type": "object"
    },
    "StopThingRegistrationTaskResponse": {
      "properties": {},
      "type": "object"
    },
    "Stream": {
      "description": "Describes a group of files that can be streamed.",
      "properties": {
        "fileId": {
          "$ref": "#/definitions/FileId",
          "description": "The ID of a file associated with a stream."
        },
        "streamId": {
          "$ref": "#/definitions/StreamId",
          "description": "The stream ID."
        }
      },
      "type": "object"
    },
    "StreamArn": {
      "type": "string"
    },
    "StreamDescription": {
      "maxLength": 2028,
      "pattern": "[^\\p{C}]+",
      "type": "string"
    },
    "StreamFile": {
      "description": "Represents a file to stream.",
      "properties": {
        "fileId": {
          "$ref": "#/definitions/FileId",
          "description": "The file ID."
        },
        "s3Location": {
          "$ref": "#/definitions/S3Location",
          "description": "The location of the file in S3."
        }
      },
      "type": "object"
    },
    "StreamFiles": {
      "items": {
        "$ref": "#/definitions/StreamFile"
      },
      "maxItems": 50,
      "minItems": 1,
      "type": "array"
    },
    "StreamId": {
      "maxLength": 128,
      "minLength": 1,
      "pattern": "[a-zA-Z0-9_-]+",
      "type": "string"
    },
    "StreamInfo": {
      "description": "Information about a stream.",
      "properties": {
        "createdAt": {
          "$ref": "#/definitions/DateType",
          "description": "The date when the stream was created."
        },
        "description": {
          "$ref": "#/definitions/StreamDescription",
          "description": "The description of the stream."
        },
        "files": {
          "$ref": "#/definitions/StreamFiles",
          "description": "The files to stream."
        },
        "lastUpdatedAt": {
          "$ref": "#/definitions/DateType",
          "description": "The date when the stream was last updated."
        },
        "roleArn": {
          "$ref": "#/definitions/RoleArn",
          "description": "An IAM role AWS IoT assumes to access your S3 files."
        },
        "streamArn": {
          "$ref": "#/definitions/StreamArn",
          "description": "The stream ARN."
        },
        "streamId": {
          "$ref": "#/definitions/StreamId",
          "description": "The stream ID."
        },
        "streamVersion": {
          "$ref": "#/definitions/StreamVersion",
          "description": "The stream version."
        }
      },
      "type": "object"
    },
    "StreamName": {
      "type": "string"
    },
    "StreamSummary": {
      "description": "A summary of a stream.",
      "properties": {
        "description": {
          "$ref": "#/definitions/StreamDescription",
          "description": "A description of the stream."
        },
        "streamArn": {
          "$ref": "#/definitions/StreamArn",
          "description": "The stream ARN."
        },
        "streamId": {
          "$ref": "#/definitions/StreamId",
          "description": "The stream ID."
        },
        "streamVersion": {
          "$ref": "#/definitions/StreamVersion",
          "description": "The stream version."
        }
      },
      "type": "object"
    },
    "StreamVersion": {
      "maximum": 65535,
      "minimum": 0,
      "type": "integer"
    },
    "StreamsSummary": {
      "items": {
        "$ref": "#/definitions/StreamSummary"
      },
      "type": "array"
    },
    "String": {
      "type": "string"
    },
    "StringMap": {
      "items": {
        "properties": {
          "key": {
            "$ref": "#/definitions/String"
          },
          "value": {
            "$ref": "#/definitions/String"
          }
        },
        "type": "object"
      },
      "type": "array"
    },
    "SucceededThings": {
      "type": "integer"
    },
    "TableName": {
      "type": "string"
    },
    "Tag": {
      "description": "A set of key/value pairs that are used to manage the resource.",
      "properties": {
        "Key": {
          "$ref": "#/definitions/TagKey",
          "description": "The tag's key."
        },
        "Value": {
          "$ref": "#/definitions/TagValue",
          "description": "The tag's value."
        }
      },
      "type": "object"
    },
    "TagKey": {
      "type": "string"
    },
    "TagKeyList": {
      "items": {
        "$ref": "#/definitions/TagKey"
      },
      "type": "array"
    },
    "TagList": {
      "items": {
        "$ref": "#/definitions/Tag"
      },
      "type": "array"
    },
    "TagResourceRequest": {
      "properties": {
        "resourceArn": {
          "$ref": "#/definitions/ResourceArn",
          "description": "The ARN of the resource."
        },
        "tags": {
          "$ref": "#/definitions/TagList",
          "description": "The new or modified tags for the resource."
        }
      },
      "required": [
        "resourceArn",
        "tags"
      ],
      "type": "object"
    },
    "TagResourceResponse": {
      "properties": {},
      "type": "object"
    },
    "TagValue": {
      "type": "string"
    },
    "Target": {
      "type": "string"
    },
    "TargetArn": {
      "type": "string"
    },
    "TargetAuditCheckNames": {
      "items": {
        "$ref": "#/definitions/AuditCheckName"
      },
      "type": "array"
    },
    "TargetSelection": {
      "enum": [
        "CONTINUOUS",
        "SNAPSHOT"
      ],
      "type": "string"
    },
    "Targets": {
      "items": {
        "$ref": "#/definitions/Target"
      },
      "minItems": 1,
      "type": "array"
    },
    "TaskId": {
      "maxLength": 40,
      "type": "string"
    },
    "TaskIdList": {
      "items": {
        "$ref": "#/definitions/TaskId"
      },
      "type": "array"
    },
    "TaskStatistics": {
      "description": "Statistics for the checks performed during the audit.",
      "properties": {
        "canceledChecks": {
          "$ref": "#/definitions/CanceledChecksCount",
          "description": "The number of checks that did not run because the audit was canceled."
        },
        "compliantChecks": {
          "$ref": "#/definitions/CompliantChecksCount",
          "description": "The number of checks that found compliant resources."
        },
        "failedChecks": {
          "$ref": "#/definitions/FailedChecksCount",
          "description": "The number of checks "
        },
        "inProgressChecks": {
          "$ref": "#/definitions/InProgressChecksCount",
          "description": "The number of checks in progress."
        },
        "nonCompliantChecks": {
          "$ref": "#/definitions/NonCompliantChecksCount",
          "description": "The number of checks that found non-compliant resources."
        },
        "totalChecks": {
          "$ref": "#/definitions/TotalChecksCount",
          "description": "The number of checks in this audit."
        },
        "waitingForDataCollectionChecks": {
          "$ref": "#/definitions/WaitingForDataCollectionChecksCount",
          "description": "The number of checks waiting for data collection."
        }
      },
      "type": "object"
    },
    "TemplateBody": {
      "type": "string"
    },
    "TestAuthorizationRequest": {
      "properties": {
        "authInfos": {
          "$ref": "#/definitions/AuthInfos",
          "description": "A list of authorization info objects. Simulating authorization will create a response for each <code>authInfo</code> object in the list."
        },
        "cognitoIdentityPoolId": {
          "$ref": "#/definitions/CognitoIdentityPoolId",
          "description": "The Cognito identity pool ID."
        },
        "policyNamesToAdd": {
          "$ref": "#/definitions/PolicyNames",
          "description": "When testing custom authorization, the policies specified here are treated as if they are attached to the principal being authorized."
        },
        "policyNamesToSkip": {
          "$ref": "#/definitions/PolicyNames",
          "description": "When testing custom authorization, the policies specified here are treated as if they are not attached to the principal being authorized."
        },
        "principal": {
          "$ref": "#/definitions/Principal",
          "description": "The principal."
        }
      },
      "required": [
        "authInfos"
      ],
      "type": "object"
    },
    "TestAuthorizationResponse": {
      "properties": {
        "authResults": {
          "$ref": "#/definitions/AuthResults",
          "description": "The authentication results."
        }
      },
      "type": "object"
    },
    "TestInvokeAuthorizerRequest": {
      "properties": {
        "token": {
          "$ref": "#/definitions/Token",
          "description": "The token returned by your custom authentication service."
        },
        "tokenSignature": {
          "$ref": "#/definitions/TokenSignature",
          "description": "The signature made with the token and your custom authentication service's private key."
        }
      },
      "required": [
        "token",
        "tokenSignature"
      ],
      "type": "object"
    },
    "TestInvokeAuthorizerResponse": {
      "properties": {
        "disconnectAfterInSeconds": {
          "$ref": "#/definitions/Seconds",
          "description": "The number of seconds after which the connection is terminated."
        },
        "isAuthenticated": {
          "$ref": "#/definitions/IsAuthenticated",
          "description": "True if the token is authenticated, otherwise false."
        },
        "policyDocuments": {
          "$ref": "#/definitions/PolicyDocuments",
          "description": "IAM policy documents."
        },
        "principalId": {
          "$ref": "#/definitions/PrincipalId",
          "description": "The principal ID."
        },
        "refreshAfterInSeconds": {
          "$ref": "#/definitions/Seconds",
          "description": "The number of seconds after which the temporary credentials are refreshed."
        }
      },
      "type": "object"
    },
    "ThingArn": {
      "type": "string"
    },
    "ThingAttribute": {
      "description": "The properties of the thing, including thing name, thing type name, and a list of thing attributes.",
      "properties": {
        "attributes": {
          "$ref": "#/definitions/Attributes",
          "description": "A list of thing attributes which are name-value pairs."
        },
        "thingArn": {
          "$ref": "#/definitions/ThingArn",
          "description": "The thing ARN."
        },
        "thingName": {
          "$ref": "#/definitions/ThingName",
          "description": "The name of the thing."
        },
        "thingTypeName": {
          "$ref": "#/definitions/ThingTypeName",
          "description": "The name of the thing type, if the thing has been associated with a type."
        },
        "version": {
          "$ref": "#/definitions/Version",
          "description": "The version of the thing record in the registry."
        }
      },
      "type": "object"
    },
    "ThingAttributeList": {
      "items": {
        "$ref": "#/definitions/ThingAttribute"
      },
      "type": "array"
    },
    "ThingConnectivity": {
      "description": "The connectivity status of the thing.",
      "properties": {
        "connected": {
          "$ref": "#/definitions/Boolean",
          "description": "True if the thing is connected to the AWS IoT service, false if it is not connected."
        },
        "timestamp": {
          "$ref": "#/definitions/ConnectivityTimestamp",
          "description": "The epoch time (in milliseconds) when the thing last connected or disconnected. Note that if the thing has been disconnected for more than a few weeks, the time value can be missing."
        }
      },
      "type": "object"
    },
    "ThingConnectivityIndexingMode": {
      "enum": [
        "OFF",
        "STATUS"
      ],
      "type": "string"
    },
    "ThingDocument": {
      "description": "The thing search index document.",
      "properties": {
        "attributes": {
          "$ref": "#/definitions/Attributes",
          "description": "The attributes."
        },
        "connectivity": {
          "$ref": "#/definitions/ThingConnectivity",
          "description": "Indicates whether or not the thing is connected to the AWS IoT service."
        },
        "shadow": {
          "$ref": "#/definitions/JsonDocument",
          "description": "The shadow."
        },
        "thingGroupNames": {
          "$ref": "#/definitions/ThingGroupNameList",
          "description": "Thing group names."
        },
        "thingId": {
          "$ref": "#/definitions/ThingId",
          "description": "The thing ID."
        },
        "thingName": {
          "$ref": "#/definitions/ThingName",
          "description": "The thing name."
        },
        "thingTypeName": {
          "$ref": "#/definitions/ThingTypeName",
          "description": "The thing type name."
        }
      },
      "type": "object"
    },
    "ThingDocumentList": {
      "items": {
        "$ref": "#/definitions/ThingDocument"
      },
      "type": "array"
    },
    "ThingGroupArn": {
      "type": "string"
    },
    "ThingGroupDescription": {
      "maxLength": 2028,
      "pattern": "[\\p{Graph}\\x20]*",
      "type": "string"
    },
    "ThingGroupDocument": {
      "description": "The thing group search index document.",
      "properties": {
        "attributes": {
          "$ref": "#/definitions/Attributes",
          "description": "The thing group attributes."
        },
        "parentGroupNames": {
          "$ref": "#/definitions/ThingGroupNameList",
          "description": "Parent group names."
        },
        "thingGroupDescription": {
          "$ref": "#/definitions/ThingGroupDescription",
          "description": "The thing group description."
        },
        "thingGroupId": {
          "$ref": "#/definitions/ThingGroupId",
          "description": "The thing group ID."
        },
        "thingGroupName": {
          "$ref": "#/definitions/ThingGroupName",
          "description": "The thing group name."
        }
      },
      "type": "object"
    },
    "ThingGroupDocumentList": {
      "items": {
        "$ref": "#/definitions/ThingGroupDocument"
      },
      "type": "array"
    },
    "ThingGroupId": {
      "maxLength": 128,
      "minLength": 1,
      "pattern": "[a-zA-Z0-9\\-]+",
      "type": "string"
    },
    "ThingGroupIndexingConfiguration": {
      "description": "Thing group indexing configuration.",
      "properties": {
        "thingGroupIndexingMode": {
          "$ref": "#/definitions/ThingGroupIndexingMode",
          "description": "Thing group indexing mode."
        }
      },
      "required": [
        "thingGroupIndexingMode"
      ],
      "type": "object"
    },
    "ThingGroupIndexingMode": {
      "enum": [
        "OFF",
        "ON"
      ],
      "type": "string"
    },
    "ThingGroupList": {
      "items": {
        "$ref": "#/definitions/ThingGroupName"
      },
      "type": "array"
    },
    "ThingGroupMetadata": {
      "description": "Thing group metadata.",
      "properties": {
        "creationDate": {
          "$ref": "#/definitions/CreationDate",
          "description": "The UNIX timestamp of when the thing group was created."
        },
        "parentGroupName": {
          "$ref": "#/definitions/ThingGroupName",
          "description": "The parent thing group name."
        },
        "rootToParentThingGroups": {
          "$ref": "#/definitions/ThingGroupNameAndArnList",
          "description": "The root parent thing group."
        }
      },
      "type": "object"
    },
    "ThingGroupName": {
      "maxLength": 128,
      "minLength": 1,
      "pattern": "[a-zA-Z0-9:_-]+",
      "type": "string"
    },
    "ThingGroupNameAndArnList": {
      "items": {
        "$ref": "#/definitions/GroupNameAndArn"
      },
      "type": "array"
    },
    "ThingGroupNameList": {
      "items": {
        "$ref": "#/definitions/ThingGroupName"
      },
      "type": "array"
    },
    "ThingGroupProperties": {
      "description": "Thing group properties.",
      "properties": {
        "attributePayload": {
          "$ref": "#/definitions/AttributePayload",
          "description": "The thing group attributes in JSON format."
        },
        "thingGroupDescription": {
          "$ref": "#/definitions/ThingGroupDescription",
          "description": "The thing group description."
        }
      },
      "type": "object"
    },
    "ThingId": {
      "type": "string"
    },
    "ThingIndexingConfiguration": {
      "description": "The thing indexing configuration. For more information, see <a href=\"https://docs.aws.amazon.com/iot/latest/developerguide/managing-index.html\">Managing Thing Indexing</a>.",
      "properties": {
        "thingConnectivityIndexingMode": {
          "$ref": "#/definitions/ThingConnectivityIndexingMode",
          "description": "<p>Thing connectivity indexing mode. Valid values are: </p> <ul> <li> <p>STATUS – Your thing index will contain connectivity status. In order to enable thing connectivity indexing, thingIndexMode must not be set to OFF.</p> </li> <li> <p>OFF - Thing connectivity status indexing is disabled.</p> </li> </ul>"
        },
        "thingIndexingMode": {
          "$ref": "#/definitions/ThingIndexingMode",
          "description": "<p>Thing indexing mode. Valid values are:</p> <ul> <li> <p>REGISTRY – Your thing index will contain only registry data.</p> </li> <li> <p>REGISTRY_AND_SHADOW - Your thing index will contain registry and shadow data.</p> </li> <li> <p>OFF - Thing indexing is disabled.</p> </li> </ul>"
        }
      },
      "required": [
        "thingIndexingMode"
      ],
      "type": "object"
    },
    "ThingIndexingMode": {
      "enum": [
        "OFF",
        "REGISTRY",
        "REGISTRY_AND_SHADOW"
      ],
      "type": "string"
    },
    "ThingName": {
      "maxLength": 128,
      "minLength": 1,
      "pattern": "[a-zA-Z0-9:_-]+",
      "type": "string"
    },
    "ThingNameList": {
      "items": {
        "$ref": "#/definitions/ThingName"
      },
      "type": "array"
    },
    "ThingTypeArn": {
      "type": "string"
    },
    "ThingTypeDefinition": {
      "description": "The definition of the thing type, including thing type name and description.",
      "properties": {
        "thingTypeArn": {
          "$ref": "#/definitions/ThingTypeArn",
          "description": "The thing type ARN."
        },
        "thingTypeMetadata": {
          "$ref": "#/definitions/ThingTypeMetadata",
          "description": "The ThingTypeMetadata contains additional information about the thing type including: creation date and time, a value indicating whether the thing type is deprecated, and a date and time when it was deprecated."
        },
        "thingTypeName": {
          "$ref": "#/definitions/ThingTypeName",
          "description": "The name of the thing type."
        },
        "thingTypeProperties": {
          "$ref": "#/definitions/ThingTypeProperties",
          "description": "The ThingTypeProperties for the thing type."
        }
      },
      "type": "object"
    },
    "ThingTypeDescription": {
      "maxLength": 2028,
      "pattern": "[\\p{Graph}\\x20]*",
      "type": "string"
    },
    "ThingTypeId": {
      "type": "string"
    },
    "ThingTypeList": {
      "items": {
        "$ref": "#/definitions/ThingTypeDefinition"
      },
      "type": "array"
    },
    "ThingTypeMetadata": {
      "description": "The ThingTypeMetadata contains additional information about the thing type including: creation date and time, a value indicating whether the thing type is deprecated, and a date and time when time was deprecated.",
      "properties": {
        "creationDate": {
          "$ref": "#/definitions/CreationDate",
          "description": "The date and time when the thing type was created."
        },
        "deprecationDate": {
          "$ref": "#/definitions/DeprecationDate",
          "description": "The date and time when the thing type was deprecated."
        }
      },
      "type": "object"
    },
    "ThingTypeName": {
      "maxLength": 128,
      "minLength": 1,
      "pattern": "[a-zA-Z0-9:_-]+",
      "type": "string"
    },
    "ThingTypeProperties": {
      "description": "The ThingTypeProperties contains information about the thing type including: a thing type description, and a list of searchable thing attribute names.",
      "properties": {
        "searchableAttributes": {
          "$ref": "#/definitions/SearchableAttributes",
          "description": "A list of searchable thing attribute names."
        },
        "thingTypeDescription": {
          "$ref": "#/definitions/ThingTypeDescription",
          "description": "The description of the thing type."
        }
      },
      "type": "object"
    },
    "ThrottlingException": {},
    "TimedOutThings": {
      "type": "integer"
    },
    "TimeoutConfig": {
      "description": "Specifies the amount of time each device has to finish its execution of the job. A timer is started when the job execution status is set to <code>IN_PROGRESS</code>. If the job execution status is not set to another terminal state before the timer expires, it will be automatically set to <code>TIMED_OUT</code>.",
      "properties": {
        "inProgressTimeoutInMinutes": {
          "$ref": "#/definitions/InProgressTimeoutInMinutes",
          "description": "Specifies the amount of time, in minutes, this device has to finish execution of this job. The timeout interval can be anywhere between 1 minute and 7 days (1 to 10080 minutes). The in progress timer can't be updated and will apply to all job executions for the job. Whenever a job execution remains in the IN_PROGRESS status for longer than this interval, the job execution will fail and switch to the terminal <code>TIMED_OUT</code> status."
        }
      },
      "type": "object"
    },
    "Timestamp": {
      "format": "date-time",
      "type": "string"
    },
    "Token": {
      "maxLength": 6144,
      "minLength": 1,
      "type": "string"
    },
    "TokenKeyName": {
      "maxLength": 128,
      "minLength": 1,
      "pattern": "[a-zA-Z0-9_-]+",
      "type": "string"
    },
    "TokenSignature": {
      "maxLength": 2560,
      "minLength": 1,
      "pattern": "[A-Za-z0-9+/]+={0,2}",
      "type": "string"
    },
    "Topic": {
      "type": "string"
    },
    "TopicPattern": {
      "type": "string"
    },
    "TopicRule": {
      "description": "Describes a rule.",
      "properties": {
        "actions": {
          "$ref": "#/definitions/ActionList",
          "description": "The actions associated with the rule."
        },
        "awsIotSqlVersion": {
          "$ref": "#/definitions/AwsIotSqlVersion",
          "description": "The version of the SQL rules engine to use when evaluating the rule."
        },
        "createdAt": {
          "$ref": "#/definitions/CreatedAtDate",
          "description": "The date and time the rule was created."
        },
        "description": {
          "$ref": "#/definitions/Description",
          "description": "The description of the rule."
        },
        "errorAction": {
          "$ref": "#/definitions/Action",
          "description": "The action to perform when an error occurs."
        },
        "ruleDisabled": {
          "$ref": "#/definitions/IsDisabled",
          "description": "Specifies whether the rule is disabled."
        },
        "ruleName": {
          "$ref": "#/definitions/RuleName",
          "description": "The name of the rule."
        },
        "sql": {
          "$ref": "#/definitions/SQL",
          "description": "The SQL statement used to query the topic. When using a SQL query with multiple lines, be sure to escape the newline characters."
        }
      },
      "type": "object"
    },
    "TopicRuleList": {
      "items": {
        "$ref": "#/definitions/TopicRuleListItem"
      },
      "type": "array"
    },
    "TopicRuleListItem": {
      "description": "Describes a rule.",
      "properties": {
        "createdAt": {
          "$ref": "#/definitions/CreatedAtDate",
          "description": "The date and time the rule was created."
        },
        "ruleArn": {
          "$ref": "#/definitions/RuleArn",
          "description": "The rule ARN."
        },
        "ruleDisabled": {
          "$ref": "#/definitions/IsDisabled",
          "description": "Specifies whether the rule is disabled."
        },
        "ruleName": {
          "$ref": "#/definitions/RuleName",
          "description": "The name of the rule."
        },
        "topicPattern": {
          "$ref": "#/definitions/TopicPattern",
          "description": "The pattern for the topic names that apply."
        }
      },
      "type": "object"
    },
    "TopicRulePayload": {
      "description": "Describes a rule.",
      "properties": {
        "actions": {
          "$ref": "#/definitions/ActionList",
          "description": "The actions associated with the rule."
        },
        "awsIotSqlVersion": {
          "$ref": "#/definitions/AwsIotSqlVersion",
          "description": "The version of the SQL rules engine to use when evaluating the rule."
        },
        "description": {
          "$ref": "#/definitions/Description",
          "description": "The description of the rule."
        },
        "errorAction": {
          "$ref": "#/definitions/Action",
          "description": "The action to take when an error occurs."
        },
        "ruleDisabled": {
          "$ref": "#/definitions/IsDisabled",
          "description": "Specifies whether the rule is disabled."
        },
        "sql": {
          "$ref": "#/definitions/SQL",
          "description": "The SQL statement used to query the topic. For more information, see <a href=\"http://docs.aws.amazon.com/iot/latest/developerguide/iot-rules.html#aws-iot-sql-reference\">AWS IoT SQL Reference</a> in the <i>AWS IoT Developer Guide</i>."
        }
      },
      "required": [
        "sql",
        "actions"
      ],
      "type": "object"
    },
    "TotalChecksCount": {
      "type": "integer"
    },
    "TotalResourcesCount": {
      "type": "integer"
    },
    "TransferAlreadyCompletedException": {},
    "TransferCertificateRequest": {
      "description": "The input for the TransferCertificate operation.",
      "properties": {
        "transferMessage": {
          "$ref": "#/definitions/Message",
          "description": "The transfer message."
        }
      },
      "type": "object"
    },
    "TransferCertificateResponse": {
      "description": "The output from the TransferCertificate operation.",
      "properties": {
        "transferredCertificateArn": {
          "$ref": "#/definitions/CertificateArn",
          "description": "The ARN of the certificate."
        }
      },
      "type": "object"
    },
    "TransferConflictException": {},
    "TransferData": {
      "description": "Data used to transfer a certificate to an AWS account.",
      "properties": {
        "acceptDate": {
          "$ref": "#/definitions/DateType",
          "description": "The date the transfer was accepted."
        },
        "rejectDate": {
          "$ref": "#/definitions/DateType",
          "description": "The date the transfer was rejected."
        },
        "rejectReason": {
          "$ref": "#/definitions/Message",
          "description": "The reason why the transfer was rejected."
        },
        "transferDate": {
          "$ref": "#/definitions/DateType",
          "description": "The date the transfer took place."
        },
        "transferMessage": {
          "$ref": "#/definitions/Message",
          "description": "The transfer message."
        }
      },
      "type": "object"
    },
    "UnauthorizedException": {},
    "UndoDeprecate": {
      "type": "boolean"
    },
    "UnsignedLong": {
      "minimum": 0,
      "type": "integer"
    },
    "UntagResourceRequest": {
      "properties": {
        "resourceArn": {
          "$ref": "#/definitions/ResourceArn",
          "description": "The ARN of the resource."
        },
        "tagKeys": {
          "$ref": "#/definitions/TagKeyList",
          "description": "A list of the keys of the tags to be removed from the resource."
        }
      },
      "required": [
        "resourceArn",
        "tagKeys"
      ],
      "type": "object"
    },
    "UntagResourceResponse": {
      "properties": {},
      "type": "object"
    },
    "UpdateAccountAuditConfigurationRequest": {
      "properties": {
        "auditCheckConfigurations": {
          "$ref": "#/definitions/AuditCheckConfigurations",
          "description": "<p>Specifies which audit checks are enabled and disabled for this account. Use <code>DescribeAccountAuditConfiguration</code> to see the list of all checks including those that are currently enabled.</p> <p>Note that some data collection may begin immediately when certain checks are enabled. When a check is disabled, any data collected so far in relation to the check is deleted.</p> <p>You cannot disable a check if it is used by any scheduled audit. You must first delete the check from the scheduled audit or delete the scheduled audit itself.</p> <p>On the first call to <code>UpdateAccountAuditConfiguration</code> this parameter is required and must specify at least one enabled check.</p>"
        },
        "auditNotificationTargetConfigurations": {
          "$ref": "#/definitions/AuditNotificationTargetConfigurations",
          "description": "Information about the targets to which audit notifications are sent."
        },
        "roleArn": {
          "$ref": "#/definitions/RoleArn",
          "description": "The ARN of the role that grants permission to AWS IoT to access information about your devices, policies, certificates and other items as necessary when performing an audit."
        }
      },
      "type": "object"
    },
    "UpdateAccountAuditConfigurationResponse": {
      "properties": {},
      "type": "object"
    },
    "UpdateAuthorizerRequest": {
      "properties": {
        "authorizerFunctionArn": {
          "$ref": "#/definitions/AuthorizerFunctionArn",
          "description": "The ARN of the authorizer's Lambda function."
        },
        "status": {
          "$ref": "#/definitions/AuthorizerStatus",
          "description": "The status of the update authorizer request."
        },
        "tokenKeyName": {
          "$ref": "#/definitions/TokenKeyName",
          "description": "The key used to extract the token from the HTTP headers. "
        },
        "tokenSigningPublicKeys": {
          "$ref": "#/definitions/PublicKeyMap",
          "description": "The public keys used to verify the token signature."
        }
      },
      "type": "object"
    },
    "UpdateAuthorizerResponse": {
      "properties": {
        "authorizerArn": {
          "$ref": "#/definitions/AuthorizerArn",
          "description": "The authorizer ARN."
        },
        "authorizerName": {
          "$ref": "#/definitions/AuthorizerName",
          "description": "The authorizer name."
        }
      },
      "type": "object"
    },
    "UpdateBillingGroupRequest": {
      "properties": {
        "billingGroupProperties": {
          "$ref": "#/definitions/BillingGroupProperties",
          "description": "The properties of the billing group."
        },
        "expectedVersion": {
          "$ref": "#/definitions/OptionalVersion",
          "description": "The expected version of the billing group. If the version of the billing group does not match the expected version specified in the request, the <code>UpdateBillingGroup</code> request is rejected with a <code>VersionConflictException</code>."
        }
      },
      "required": [
        "billingGroupProperties"
      ],
      "type": "object"
    },
    "UpdateBillingGroupResponse": {
      "properties": {
        "version": {
          "$ref": "#/definitions/Version",
          "description": "The latest version of the billing group."
        }
      },
      "type": "object"
    },
    "UpdateCACertificateRequest": {
      "description": "The input to the UpdateCACertificate operation.",
      "properties": {
        "registrationConfig": {
          "$ref": "#/definitions/RegistrationConfig",
          "description": "Information about the registration configuration."
        },
        "removeAutoRegistration": {
          "$ref": "#/definitions/RemoveAutoRegistration",
          "description": "If true, remove auto registration."
        }
      },
      "type": "object"
    },
    "UpdateCertificateRequest": {
      "description": "The input for the UpdateCertificate operation.",
      "properties": {},
      "type": "object"
    },
    "UpdateDynamicThingGroupRequest": {
      "properties": {
        "expectedVersion": {
          "$ref": "#/definitions/OptionalVersion",
          "description": "The expected version of the dynamic thing group to update."
        },
        "indexName": {
          "$ref": "#/definitions/IndexName",
          "description": "<p>The dynamic thing group index to update.</p> <note> <p>Currently one index is supported: 'AWS_Things'.</p> </note>"
        },
        "queryString": {
          "$ref": "#/definitions/QueryString",
          "description": "The dynamic thing group search query string to update."
        },
        "queryVersion": {
          "$ref": "#/definitions/QueryVersion",
          "description": "<p>The dynamic thing group query version to update.</p> <note> <p>Currently one query version is supported: \"2017-09-30\". If not specified, the query version defaults to this value.</p> </note>"
        },
        "thingGroupProperties": {
          "$ref": "#/definitions/ThingGroupProperties",
          "description": "The dynamic thing group properties to update."
        }
      },
      "required": [
        "thingGroupProperties"
      ],
      "type": "object"
    },
    "UpdateDynamicThingGroupResponse": {
      "properties": {
        "version": {
          "$ref": "#/definitions/Version",
          "description": "The dynamic thing group version."
        }
      },
      "type": "object"
    },
    "UpdateEventConfigurationsRequest": {
      "properties": {
        "eventConfigurations": {
          "$ref": "#/definitions/EventConfigurations",
          "description": "The new event configuration values."
        }
      },
      "type": "object"
    },
    "UpdateEventConfigurationsResponse": {
      "properties": {},
      "type": "object"
    },
    "UpdateIndexingConfigurationRequest": {
      "properties": {
        "thingGroupIndexingConfiguration": {
          "$ref": "#/definitions/ThingGroupIndexingConfiguration",
          "description": "Thing group indexing configuration."
        },
        "thingIndexingConfiguration": {
          "$ref": "#/definitions/ThingIndexingConfiguration",
          "description": "Thing indexing configuration."
        }
      },
      "type": "object"
    },
    "UpdateIndexingConfigurationResponse": {
      "properties": {},
      "type": "object"
    },
    "UpdateJobRequest": {
      "properties": {
        "abortConfig": {
          "$ref": "#/definitions/AbortConfig",
          "description": "Allows you to create criteria to abort a job."
        },
        "description": {
          "$ref": "#/definitions/JobDescription",
          "description": "A short text description of the job."
        },
        "jobExecutionsRolloutConfig": {
          "$ref": "#/definitions/JobExecutionsRolloutConfig",
          "description": "Allows you to create a staged rollout of the job."
        },
        "presignedUrlConfig": {
          "$ref": "#/definitions/PresignedUrlConfig",
          "description": "Configuration information for pre-signed S3 URLs."
        },
        "timeoutConfig": {
          "$ref": "#/definitions/TimeoutConfig",
          "description": "Specifies the amount of time each device has to finish its execution of the job. The timer is started when the job execution status is set to <code>IN_PROGRESS</code>. If the job execution status is not set to another terminal state before the time expires, it will be automatically set to <code>TIMED_OUT</code>. "
        }
      },
      "type": "object"
    },
    "UpdateRoleAliasRequest": {
      "properties": {
        "credentialDurationSeconds": {
          "$ref": "#/definitions/CredentialDurationSeconds",
          "description": "The number of seconds the credential will be valid."
        },
        "roleArn": {
          "$ref": "#/definitions/RoleArn",
          "description": "The role ARN."
        }
      },
      "type": "object"
    },
    "UpdateRoleAliasResponse": {
      "properties": {
        "roleAlias": {
          "$ref": "#/definitions/RoleAlias",
          "description": "The role alias."
        },
        "roleAliasArn": {
          "$ref": "#/definitions/RoleAliasArn",
          "description": "The role alias ARN."
        }
      },
      "type": "object"
    },
    "UpdateScheduledAuditRequest": {
      "properties": {
        "dayOfMonth": {
          "$ref": "#/definitions/DayOfMonth",
          "description": "The day of the month on which the scheduled audit takes place. Can be \"1\" through \"31\" or \"LAST\". This field is required if the \"frequency\" parameter is set to \"MONTHLY\". If days 29-31 are specified, and the month does not have that many days, the audit takes place on the \"LAST\" day of the month."
        },
        "dayOfWeek": {
          "$ref": "#/definitions/DayOfWeek",
          "description": "The day of the week on which the scheduled audit takes place. Can be one of \"SUN\", \"MON\", \"TUE\", \"WED\", \"THU\", \"FRI\" or \"SAT\". This field is required if the \"frequency\" parameter is set to \"WEEKLY\" or \"BIWEEKLY\"."
        },
        "frequency": {
          "$ref": "#/definitions/AuditFrequency",
          "description": "How often the scheduled audit takes place. Can be one of \"DAILY\", \"WEEKLY\", \"BIWEEKLY\" or \"MONTHLY\". The actual start time of each audit is determined by the system."
        },
        "targetCheckNames": {
          "$ref": "#/definitions/TargetAuditCheckNames",
          "description": "Which checks are performed during the scheduled audit. Checks must be enabled for your account. (Use <code>DescribeAccountAuditConfiguration</code> to see the list of all checks including those that are enabled or <code>UpdateAccountAuditConfiguration</code> to select which checks are enabled.)"
        }
      },
      "type": "object"
    },
    "UpdateScheduledAuditResponse": {
      "properties": {
        "scheduledAuditArn": {
          "$ref": "#/definitions/ScheduledAuditArn",
          "description": "The ARN of the scheduled audit."
        }
      },
      "type": "object"
    },
    "UpdateSecurityProfileRequest": {
      "properties": {
        "alertTargets": {
          "$ref": "#/definitions/AlertTargets",
          "description": "Where the alerts are sent. (Alerts are always sent to the console.)"
        },
        "behaviors": {
          "$ref": "#/definitions/Behaviors",
          "description": "Specifies the behaviors that, when violated by a device (thing), cause an alert."
        },
        "securityProfileDescription": {
          "$ref": "#/definitions/SecurityProfileDescription",
          "description": "A description of the security profile."
        }
      },
      "type": "object"
    },
    "UpdateSecurityProfileResponse": {
      "properties": {
        "alertTargets": {
          "$ref": "#/definitions/AlertTargets",
          "description": "Where the alerts are sent. (Alerts are always sent to the console.)"
        },
        "behaviors": {
          "$ref": "#/definitions/Behaviors",
          "description": "Specifies the behaviors that, when violated by a device (thing), cause an alert."
        },
        "creationDate": {
          "$ref": "#/definitions/Timestamp",
          "description": "The time the security profile was created."
        },
        "lastModifiedDate": {
          "$ref": "#/definitions/Timestamp",
          "description": "The time the security profile was last modified."
        },
        "securityProfileArn": {
          "$ref": "#/definitions/SecurityProfileArn",
          "description": "The ARN of the security profile that was updated."
        },
        "securityProfileDescription": {
          "$ref": "#/definitions/SecurityProfileDescription",
          "description": "The description of the security profile."
        },
        "securityProfileName": {
          "$ref": "#/definitions/SecurityProfileName",
          "description": "The name of the security profile that was updated."
        },
        "version": {
          "$ref": "#/definitions/Version",
          "description": "The updated version of the security profile."
        }
      },
      "type": "object"
    },
    "UpdateStreamRequest": {
      "properties": {
        "description": {
          "$ref": "#/definitions/StreamDescription",
          "description": "The description of the stream."
        },
        "files": {
          "$ref": "#/definitions/StreamFiles",
          "description": "The files associated with the stream."
        },
        "roleArn": {
          "$ref": "#/definitions/RoleArn",
          "description": "An IAM role that allows the IoT service principal assumes to access your S3 files."
        }
      },
      "type": "object"
    },
    "UpdateStreamResponse": {
      "properties": {
        "description": {
          "$ref": "#/definitions/StreamDescription",
          "description": "A description of the stream."
        },
        "streamArn": {
          "$ref": "#/definitions/StreamArn",
          "description": "The stream ARN."
        },
        "streamId": {
          "$ref": "#/definitions/StreamId",
          "description": "The stream ID."
        },
        "streamVersion": {
          "$ref": "#/definitions/StreamVersion",
          "description": "The stream version."
        }
      },
      "type": "object"
    },
    "UpdateThingGroupRequest": {
      "properties": {
        "expectedVersion": {
          "$ref": "#/definitions/OptionalVersion",
          "description": "The expected version of the thing group. If this does not match the version of the thing group being updated, the update will fail."
        },
        "thingGroupProperties": {
          "$ref": "#/definitions/ThingGroupProperties",
          "description": "The thing group properties."
        }
      },
      "required": [
        "thingGroupProperties"
      ],
      "type": "object"
    },
    "UpdateThingGroupResponse": {
      "properties": {
        "version": {
          "$ref": "#/definitions/Version",
          "description": "The version of the updated thing group."
        }
      },
      "type": "object"
    },
    "UpdateThingGroupsForThingRequest": {
      "properties": {
        "overrideDynamicGroups": {
          "$ref": "#/definitions/OverrideDynamicGroups",
          "description": "Override dynamic thing groups with static thing groups when 10-group limit is reached. If a thing belongs to 10 thing groups, and one or more of those groups are dynamic thing groups, adding a thing to a static group removes the thing from the last dynamic group."
        },
        "thingGroupsToAdd": {
          "$ref": "#/definitions/ThingGroupList",
          "description": "The groups to which the thing will be added."
        },
        "thingGroupsToRemove": {
          "$ref": "#/definitions/ThingGroupList",
          "description": "The groups from which the thing will be removed."
        },
        "thingName": {
          "$ref": "#/definitions/ThingName",
          "description": "The thing whose group memberships will be updated."
        }
      },
      "type": "object"
    },
    "UpdateThingGroupsForThingResponse": {
      "properties": {},
      "type": "object"
    },
    "UpdateThingRequest": {
      "description": "The input for the UpdateThing operation.",
      "properties": {
        "attributePayload": {
          "$ref": "#/definitions/AttributePayload",
          "description": "<p>A list of thing attributes, a JSON string containing name-value pairs. For example:</p> <p> <code>{\\\"attributes\\\":{\\\"name1\\\":\\\"value2\\\"}}</code> </p> <p>This data is used to add new attributes or update existing attributes.</p>"
        },
        "expectedVersion": {
          "$ref": "#/definitions/OptionalVersion",
          "description": "The expected version of the thing record in the registry. If the version of the record in the registry does not match the expected version specified in the request, the <code>UpdateThing</code> request is rejected with a <code>VersionConflictException</code>."
        },
        "removeThingType": {
          "$ref": "#/definitions/RemoveThingType",
          "description": "Remove a thing type association. If <b>true</b>, the association is removed."
        },
        "thingTypeName": {
          "$ref": "#/definitions/ThingTypeName",
          "description": "The name of the thing type."
        }
      },
      "type": "object"
    },
    "UpdateThingResponse": {
      "description": "The output from the UpdateThing operation.",
      "properties": {},
      "type": "object"
    },
    "UseBase64": {
      "type": "boolean"
    },
    "Valid": {
      "type": "boolean"
    },
    "ValidateSecurityProfileBehaviorsRequest": {
      "properties": {
        "behaviors": {
          "$ref": "#/definitions/Behaviors",
          "description": "Specifies the behaviors that, when violated by a device (thing), cause an alert."
        }
      },
      "required": [
        "behaviors"
      ],
      "type": "object"
    },
    "ValidateSecurityProfileBehaviorsResponse": {
      "properties": {
        "valid": {
          "$ref": "#/definitions/Valid",
          "description": "True if the behaviors were valid."
        },
        "validationErrors": {
          "$ref": "#/definitions/ValidationErrors",
          "description": "The list of any errors found in the behaviors."
        }
      },
      "type": "object"
    },
    "ValidationError": {
      "description": "Information about an error found in a behavior specification.",
      "properties": {
        "errorMessage": {
          "$ref": "#/definitions/ErrorMessage",
          "description": "The description of an error found in the behaviors."
        }
      },
      "type": "object"
    },
    "ValidationErrors": {
      "items": {
        "$ref": "#/definitions/ValidationError"
      },
      "type": "array"
    },
    "Value": {
      "type": "string"
    },
    "Version": {
      "type": "integer"
    },
    "VersionConflictException": {},
    "VersionNumber": {
      "type": "integer"
    },
    "VersionsLimitExceededException": {},
    "ViolationEvent": {
      "description": "Information about a Device Defender security profile behavior violation.",
      "properties": {
        "behavior": {
          "$ref": "#/definitions/Behavior",
          "description": "The behavior which was violated."
        },
        "metricValue": {
          "$ref": "#/definitions/MetricValue",
          "description": "The value of the metric (the measurement)."
        },
        "securityProfileName": {
          "$ref": "#/definitions/SecurityProfileName",
          "description": "The name of the security profile whose behavior was violated."
        },
        "thingName": {
          "$ref": "#/definitions/ThingName",
          "description": "The name of the thing responsible for the violation event."
        },
        "violationEventTime": {
          "$ref": "#/definitions/Timestamp",
          "description": "The time the violation event occurred."
        },
        "violationEventType": {
          "$ref": "#/definitions/ViolationEventType",
          "description": "The type of violation event."
        },
        "violationId": {
          "$ref": "#/definitions/ViolationId",
          "description": "The ID of the violation event."
        }
      },
      "type": "object"
    },
    "ViolationEventType": {
      "enum": [
        "in-alarm",
        "alarm-cleared",
        "alarm-invalidated"
      ],
      "type": "string"
    },
    "ViolationEvents": {
      "items": {
        "$ref": "#/definitions/ViolationEvent"
      },
      "type": "array"
    },
    "ViolationId": {
      "maxLength": 128,
      "minLength": 1,
      "pattern": "[a-zA-Z0-9\\-]+",
      "type": "string"
    },
    "WaitingForDataCollectionChecksCount": {
      "type": "integer"
    }
  }
}
